parent_classes:


  - class: Blast::YAMLValidator
    scope: public
    init_with: ''


properties:


  - name: node
    type: YAML::Node
    constructor_arg: true
    init_with: '{}'
    getter: true
    setter: true


functions:


  - name: parse
    type: Blast::Cpp::FunctionArgument
    body: |
      std::string this_func_name = "Blast::Quintessence::YAMLParsers::FunctionArgumentParser::parse";

      const std::string TYPE = "type";
      const std::string NAME = "name";
      const std::string DEFAULT_ARGUMENT = "default_argument";

      validate(node.IsMap(), this_func_name, "Unexpected sequence element in \"parameters\", expected to be of a YAML Map.");

      YAML::Node type_node = node.operator[](TYPE);
      YAML::Node name_node = node.operator[](NAME);
      YAML::Node default_argument_node = node.operator[](DEFAULT_ARGUMENT);

      validate(type_node.IsScalar(), this_func_name, "Unexpected type_node, expected to be of YAML type Scalar.");
      validate(name_node.IsScalar(), this_func_name, "Unexpected name_node, expected to be of YAML type Scalar.");
      validate(default_argument_node.IsScalar(), this_func_name, "Unexpected default_argument_node, expected to be of YAML type Scalar.");

      std::vector<std::string> default_value_dependency_symbols;
      // TODO:
      //std::vector<std::string> default_value_dependency_symbols = extract_default_argument_dependency_symbols(node);

      return Blast::Cpp::FunctionArgument(
            type_node.as<std::string>(),
            name_node.as<std::string>(),
            default_argument_node.as<std::string>(),
            default_value_dependency_symbols
      );
    body_dependency_symbols:
      - std::runtime_error


  - name: explode
    parameters:
      - name: location
        type: std::string
        default_argument: '"[unset-location]"'
      - name: error_message
        type: std::string
        default_argument: '"[unset-error_message]"'
    body: |
      std::stringstream ss;
      ss << "[" << location << "] " << error_message;
      throw std::runtime_error(ss.str());
    body_dependency_symbols:
      - std::stringstream


  - name: validate
    parameters:
      - name: value
        type: bool
        default_argument: false
      - name: location
        type: std::string
        default_argument: '"[unset-location]"'
      - name: error_message
        type: std::string
        default_argument: '"[unset-error_message]"'
    body: |
      if (!value) explode(location, error_message);


dependencies:


  - symbol: YAML::Node
    headers: [ yaml-cpp/yaml.h ]
  - symbol: Blast::Cpp::FunctionArgument
    headers: [ Blast/Cpp/FunctionArgument.hpp ]
  - symbol: Blast::YAMLValidator
    headers: [ Blast/YAMLValidator.hpp ]


