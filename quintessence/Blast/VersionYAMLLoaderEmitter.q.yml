parent_classes:


  - class: Blast::YamlCppValidator
    scope: protected
    init_with: ''


properties:


  - name: yaml_filename
    type: std::string
    init_with: '"[unset-yaml_filename]"'
    constructor_arg: true
    getter: true
    setter: false

  - name: root
    type: YAML::Node
    init_with: ''

  - name: major
    type: int
    init_with: 0
    getter: explicit

  - name: minor
    type: int
    init_with: 0
    getter: explicit

  - name: patch
    type: int
    init_with: 0
    getter: explicit

  - name: labels
    type: std::set<std::string>
    init_with: '{}'
    getter: explicit

  - name: metadata
    type: std::set<std::string>
    init_with: '{}'
    getter: explicit

  - name: loaded
    type: bool
    init_with: false


functions:


  - name: load
    guards: [ (!loaded) ]
    body: |
      root = YAML::LoadFile(yaml_filename);

      validate_or_throw(root, "version");
      validate_or_throw_v(root, { "version", "major" });
      validate_or_throw_v(root, { "version", "minor" });
      validate_or_throw_v(root, { "version", "patch" });
      validate_or_throw_v(root, { "version", "labels" });
      validate_or_throw_v(root, { "version", "metadata" });

      // Assign the version numbers
      major = root["version"]["major"].as<int>();
      minor = root["version"]["minor"].as<int>();
      patch = root["version"]["patch"].as<int>();

      // Collect, validate, and assign the labels
      YAML::Node labels_node = root["version"]["labels"];
      std::set<std::string> labels_vec;
      for (auto it=labels_node.begin(); it!=labels_node.end(); it++)
      {
         labels_vec.insert(it->as<std::string>());
      }
      validate_labels_format(labels_vec);
      labels = labels_vec;

      // Collect, validate, and assign the metadata
      YAML::Node metadata_node = root["version"]["metadata"];
      std::set<std::string> metadata_vec;
      for (auto it=metadata_node.begin(); it!=metadata_node.end(); it++)
      {
         metadata_vec.insert(it->as<std::string>());
      }
      validate_labels_format(metadata_vec);
      metadata = metadata_vec;

      loaded = true;
      return;


  - name: save
    guards: [ loaded ]
    body: |
      std::ofstream fout(yaml_filename);
      YAML::Emitter emitter(fout);
      emitter << root;
      fout.close();
    body_dependency_symbols:
      - std::ofstream


  - name: get_major
    type: int
    guards: [ loaded ]
    body: return major;


  - name: get_minor
    type: int
    guards: [ loaded ]
    body: return minor;


  - name: get_patch
    type: int
    guards: [ loaded ]
    body: return patch;


  - name: get_labels
    type: std::set<std::string>
    guards: [ loaded ]
    body: return labels;


  - name: get_metadata
    type: std::set<std::string>
    guards: [ loaded ]
    body: return metadata;


  - name: increment
    guards: [ loaded ]
    body: |
      static const std::string INTERNAL_DEVELOPMENT_VERSION_LABEL = "wip";

      // Increment the patch version
      patch++;

      // Update the YAML::Node "patch"
      root["version"]["patch"] = patch;

      labels.clear();

      // If the patch version is even, add the "wip" label
      bool incremented_patch_version_is_even = (patch % 2 == 0);
      bool include_wip_label = incremented_patch_version_is_even;
      if (include_wip_label) labels.insert(INTERNAL_DEVELOPMENT_VERSION_LABEL);

      // Update the YAML::Node "labels"
      std::vector<std::string> labels_as_vector(labels.begin(), labels.end());
      root["version"]["labels"] = labels_as_vector;

      return;


  - name: validate_or_throw
    parameters:
      - name: node
        type: YAML::Node
        default_argument: '{}'
      - name: key
        type: std::string
        default_argument: '"[unset-key]"'
    body: |
      if (!node[key])
      {
         std::stringstream error_message;
         error_message << "Missing key in node. Expecting \"" << key << "\".";
         Blast::Errors::throw_error("Blast::VersionYAMLLoaderEmitter", error_message.str());
      }
      return;
    body_dependency_symbols:
      - Blast::Errors
    

  - name: validate_or_throw_v
    parameters:
      - name: initial_node
        type: YAML::Node
        default_argument: '{}'
      - name: nested_keys
        type: std::vector<std::string>
        default_argument: '{}'
      - name: type
        type: YAML::NodeType::value
        default_argument: YAML::NodeType::Undefined
    body: |
      YAML::Node node = YAML::Clone(initial_node);

      std::vector<std::string> accumulated_keys;
      for (auto &nested_key : nested_keys)
      {
         accumulated_keys.push_back(nested_key);

         if (!node[nested_key])
         {
            // Wrap the accumulated keys in nice brackets and quotes
            for (auto &accumulated_key : accumulated_keys) accumulated_key = "[\"" + accumulated_key + "\"]";

            // Build and throw our error message
            std::stringstream error_message;
            error_message << "Missing key in node. Expecting node"
                          << Blast::StringJoiner(accumulated_keys, "").join()
                          << ".";
            Blast::Errors::throw_error("Blast::VersionYAMLLoaderEmitter", error_message.str());
         }

         node = node[nested_key];
      }

      if (node.Type())

      return;
    body_dependency_symbols:
      - Blast::Errors
      - Blast::StringJoiner


  - name: validate_labels_format
    type: bool
    parameters:
      - name: labels
        type: std::set<std::string>
        default_argument: '{}'
    body: |
      std::vector<std::string> invalid_labels;

      // Accumulate invalid labels
      for (auto &label : labels)
      {
         if (!is_valid_label(label)) invalid_labels.push_back(label);
      }

      // Throw error if there are invalid labels
      if (!invalid_labels.empty())
      {
         // Build and throw our error message
         std::stringstream error_message;
         error_message << "The following labels are invalid: ";
         for (auto &invalid_label : invalid_labels)
         {
            error_message << "\"" << invalid_label << "\", ";
         }
         Blast::Errors::throw_error("Blast::VersionYAMLLoaderEmitter", error_message.str());
      }
      return true;


  - name: add_label
    parameters:
      - name: label
        type: std::string
        default_argument: '"[unset-label]"'
    guards: [ is_valid_label(label) ]
    body: |
      labels.insert(label);
      return;


  - name: add_metadata
    parameters:
      - name: metadata_element
        type: std::string
        default_argument: '"[unset-metadata_element]"'
    guards: [ is_valid_label(metadata_element) ]
    body: |
      metadata.insert(metadata_element);
      return;


  - name: is_valid_label
    static: true
    type: bool
    parameters:
      - name: label
        type: std::string
        default_argument: '"[unset-label]"'
    body: |
      if (label.empty()) return false;

      // Check if first character is a letter
      if (!isalpha(label[0])) return false;

      for (char c : label)
      {
         // check if the character is not alphanumeric or underscore
         if (!isalnum(c) && c != '_') return false;

            // check if the character is uppercase
         if (isupper(c)) return false;
      }

      return true;


  - name: build_project_version_string
    type: std::string
    body: |
      std::stringstream result;
      result << major << "." << minor << "." << patch;

      std::vector<std::string> labels_v(labels.size());
      std::copy(labels.begin(), labels.end(), labels_v.begin());

      std::vector<std::string> metadata_v(metadata.size());
      std::copy(metadata.begin(), metadata.end(), metadata_v.begin());

      if (!labels.empty()) result << "-" << Blast::StringJoiner(labels_v, "-").join();
      if (!metadata.empty()) result << "+" << Blast::StringJoiner(metadata_v, "+").join();
      return result.str();
    body_dependency_symbols:
      - std::stringstream
      - Blast::StringJoiner
    

dependencies:


  - symbol: YAML::Node
    headers: [ yaml-cpp/yaml.h ]
  - symbol: YAML::NodeType::value
    headers: [ yaml-cpp/yaml.h ]
  - symbol: Blast::Errors
    headers: [ Blast/Errors.hpp ]
  - symbol: Blast::StringJoiner
    headers: [ Blast/StringJoiner.hpp ]
  - symbol: Blast::YamlCppValidator
    headers: [ Blast/YamlCppValidator.hpp ]
  - symbol: std::ofstream
    headers: [ fstream ]


