namespaces: [ 'Blast' ]
parent_classes: []
properties:
  - name: directory_components
    type: std::vector<std::string>
    init_with: '{}'
    constructor_arg: true
  - name: path_is_absolute
    type: bool
    init_with: false
    constructor_arg: true
functions:
  - name: create
    type: bool
    parameters: []
    body: |
      std::stringstream result_directories;
      const std::string SEPARATOR = "/";
      if (path_is_absolute) result_directories << "/";
      for (auto &directory_component : directory_components)
      {
        result_directories << directory_component << SEPARATOR;
        std::string directory_to_create = result_directories.str();

        if (Blast::DirectoryExistenceChecker(directory_to_create).exists()) continue;
        bool directory_created = std::__fs::filesystem::create_directories(directory_to_create.c_str());
        if (!directory_created)
        {
           std::stringstream error_message;
           error_message << "Could not create directory \"" << directory_to_create << "\"" << std::endl;
           throw std::runtime_error(error_message.str());
        }
      }
      return true;
    body_dependency_symbols:
      - std::__fs::filesystem::create_directory
      - std::stringstream
      - std::string
      - Blast::DirectoryExistenceChecker
dependencies:
  - symbol: bool
    headers: []
    include_directories: []
    linked_libraries: []
  - symbol: std::string
    headers: [ 'string' ]
    include_directories: []
    linked_libraries: []
  - symbol: std::vector<std::string>
    headers: [ 'vector', 'string' ]
    include_directories: []
    linked_libraries: []
  - symbol: std::__fs::filesystem::create_directory
    headers: [ 'filesystem' ]
    include_directories: []
    linked_libraries: []
  - symbol: std::stringstream
    headers: [ 'sstream' ]
    include_directories: []
    linked_libraries: []
  - symbol: Blast::DirectoryExistenceChecker
    headers: [ 'Blast/DirectoryExistenceChecker.hpp' ]
    include_directories: []
    linked_libraries: []
