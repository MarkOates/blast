namespaces: [ 'Blast' ]
parent_classes: []
properties:
  - name: directory_names
    type: std::vector<std::string>
    init_with: '{}'
    constructor_arg: true
  - name: path_is_absolute
    type: bool
    init_with: false
    constructor_arg: true
functions:
  - name: create
    type: bool
    parameters: []
    body: |
      std::stringstream result_directories;
      const std::string SEPARATOR = "/";
      if (path_is_absolute) result_directories << "/";
      for (auto &directory_name : directory_names)
      {
        result_directories << directory_name << SEPARATOR;
        std::string directory_to_create = result_directories.str();

        if (Blast::DirectoryExistenceChecker(directory_to_create).exists()) continue;
        int mkdir_result = mkdir(directory_to_create.c_str(), 0777);
        if (mkdir_result == -1) return false;
      }
      return true;
function_body_symbol_dependencies: [ 'mkdir', 'std::stringstream', 'std::string', 'Blast::DirectoryExistenceChecker' ]
dependencies:
  - symbol: bool
    headers: []
    include_directories: []
    linked_libraries: []
  - symbol: std::string
    headers: [ 'string' ]
    include_directories: []
    linked_libraries: []
  - symbol: std::vector<std::string>
    headers: [ 'vector', 'string' ]
    include_directories: []
    linked_libraries: []
  - symbol: mkdir
    headers: [ 'sys/stat.h' ]
    include_directories: []
    linked_libraries: []
  - symbol: std::stringstream
    headers: [ 'sstream' ]
    include_directories: []
    linked_libraries: []
  - symbol: Blast::DirectoryExistenceChecker
    headers: [ 'Blast/DirectoryExistenceChecker.hpp' ]
    include_directories: []
    linked_libraries: []
