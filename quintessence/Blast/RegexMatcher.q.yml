properties:
  - name: source_string
    init_with: "\"\""
    constructor_arg: true
    getter: true
  - name: regex_expression
    init_with: "\"\""
    constructor_arg: true
    getter: true
  - name: options
    type: std::vector<std::regex_constants::syntax_option_type>
    init_with: "{}"
    constructor_arg: true
    getter: true
functions:
  - name: get_match_info
    type: std::vector<std::pair<int, int>>
    body: |
      std::vector<std::pair<int, int>> results;

      std::string subject(source_string);
      try
      {
         //std::regex re("\\w+"); // find words
         //std::regex re(regex_expression, std::regex::icase);
         std::regex re(regex_expression);

         std::sregex_iterator next(subject.begin(), subject.end(), re);
         std::sregex_iterator end;
         while (next != end)
         {
            std::smatch match = *next;
            //std::cout << " - string: " << match.str() << std::endl;
            //std::cout << "   position: " << match.position() << std::endl;
            //std::cout << "   length: " << match.str().size() << std::endl;
            results.push_back(std::pair<int, int>(match.position(), match.str().size()));
            next++;
         }
      }
      catch (std::regex_error& e)
      {
         throw std::runtime_error("There was a syntax error in the regular expression");
      }

      return results;
    body_dependency_symbols:
      - std::regex
      - std::regex_iterator
      - std::smatch
      - std::regex_error
      - std::runtime_error
dependencies:
  - symbol: std::vector<std::regex_constants::syntax_option_type>
    headers: [ vector, regex ]
  - symbol: std::vector<std::pair<int, int>>
    headers: [ vector ]
  - symbol: std::regex
    headers: [ regex ]
  - symbol: std::regex_iterator
    headers: [ regex ]
  - symbol: std::smatch
    headers: [ regex ]
  - symbol: std::regex_error
    headers: [ regex ]
  - symbol: std::runtime_error
    headers: [ regex ]

