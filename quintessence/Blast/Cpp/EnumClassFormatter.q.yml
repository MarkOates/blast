properties:


  - name: enum_class
    type: Blast::Cpp::EnumClass
    constructor_arg: true
    init_with: '{}'


functions:


  - name: build_enum_definition
    type: std::string
    parameters:
      - name: indent_num_spaces
        type: int
        default_argument: 3
    guards: [ (indent_num_spaces >= 0) ]
    body: |
      std::stringstream result;
      result << "enum";

      // Only show "class Foobar" if it is present
      if (enum_class.get_is_class() && enum_class.has_name())
      {
         result << " class";
      }
      // Only show if a type is present
      if (enum_class.has_name())
      {
         result << " " << enum_class.get_name();
      }
      // Only show ": type" if a type is present
      if (enum_class.has_type())
      {
         result << " : " << enum_class.get_type();
      }

      result << std::endl;
      result << "{" << std::endl;
      bool is_first_item = true;
      for (auto &item : enum_class.get_enumerators())
      {
         result << std::string(indent_num_spaces, ' ') << item;
         if (is_first_item)
         {
            result << " = 0";
            is_first_item = false;
         }
         result << ",";
         result << std::endl;
      }
      result << "};" << std::endl;
      return result.str();
    body_dependency_symbols:
      - std::stringstream


dependencies:


  - symbol: Blast::Cpp::EnumClass
    headers: [ Blast/Cpp/EnumClass.hpp ]


