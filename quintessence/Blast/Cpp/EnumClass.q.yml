properties:


  - name: name
    type: std::string
    init_with: DEFAULT_CLASS_NAME
    constructor_arg: true
    getter: true
    setter: true
    
  - name: enumerators
    type: std::vector<std::string>
    init_with: '{}'
    constructor_arg: true
    getter: true
    setter: false

  - name: scope
    type: std::string
    init_with: DEFAULT_SCOPE
    getter: true
    setter: false

  - name: type
    type: std::string
    init_with: DEFAULT_TYPE
    getter: true
    setter: false

  - name: is_class
    type: bool
    init_with: false
    constructor_arg: true
    getter: true
    setter: true

  - name: start_from
    type: int
    init_with: 0
    getter: true
    setter: explicit

  - name: enumerators_are_bitwise
    type: bool
    init_with: false
    getter: true
    setter: explicit

  - name: has_to_string_method
    type: bool
    init_with: false
    getter: true
    setter: true

  - name: name_of_to_string_method
    type: std::string
    init_with: DEFAULT_NAME_OF_TO_STRING_METHOD
    getter: true
    setter: true

  - name: has_from_string_method
    type: bool
    init_with: false
    getter: true
    setter: true

  - name: name_of_from_string_method
    type: std::string
    init_with: DEFAULT_NAME_OF_FROM_STRING_METHOD
    getter: true
    setter: true

  - name: DEFAULT_CLASS_NAME
    constexpr: true
    static: true
    type: const char*
    init_with: '(char*)""'

  - name: DEFAULT_NAME_OF_TO_STRING_METHOD
    constexpr: true
    static: true
    type: const char*
    init_with: '(char*)"to_string"'

  - name: DEFAULT_NAME_OF_FROM_STRING_METHOD
    constexpr: true
    static: true
    type: const char*
    init_with: '(char*)"from_string"'

  - name: DEFAULT_SCOPE
    constexpr: true
    static: true
    type: const char*
    init_with: '(char*)"private"'

  - name: DEFAULT_TYPE
    constexpr: true
    static: true
    type: const char*
    init_with: '(char*)""'


documentation:


  - todos:
      - Rename "elements" to "enumerators", Update callers


functions:


  - name: set_enumerators
    parameters:
      - name: enumerators
        type: std::vector<std::string>
        default_argument: '{}'
    guards: [ validate_elements_are_unique(enumerators) ]
    body: |
      this->enumerators = enumerators;
      return;


  - name: has_name
    type: bool
    body: |
      return !name.empty();


  - name: set_scope
    parameters:
      - name: scope
        type: std::string
        default_argument: '"[unset-scope]"'
    body: |
      // NOTE: this validation is not assured when the value is set during construction
      // TODO: add test for this method
      static std::set<std::string> valid_scopes = { "public", "private", "protected" };
      if (valid_scopes.count(scope) == 0)
      {
         // TODO: include incorrect type, and valid types in error message
         throw std::runtime_error("[Blast::Cpp::EnumClass::set_scope]: error: scope is invalid");
      }
      this->scope = scope;
      return;
    body_dependency_symbols:
      - std::set


  - name: set_type
    parameters:
      - name: type
        type: std::string
        default_argument: '"[unset-type]"'
    body: |
      // NOTE: this validation is not assured when the value is set during construction
      // TODO: add test for this method
      static std::set<std::string> valid_types = { "", "int", "int16_t", "uint16_t", "int32_t", "uint32_t" };
      if (valid_types.count(type) == 0)
      {
         // TODO: include incorrect type, and valid types in error message
         std::stringstream error_message;
         error_message << "[Blast::Cpp::EnumClass::set_type]: error: The provided type \"" << type << "\" is invalid. ";
         error_message << "Permitted types are [";
         for (auto &valid_type : valid_types)
         {
            error_message << "\"" << valid_type << "\"" << ", ";
         }
         error_message << "]";
         throw std::runtime_error(error_message.str());
      }
      this->type = type;
      return;
    body_dependency_symbols:
      - std::set


  - name: set_start_from
    parameters:
      - name: start_from
        type: int
        default_argument: 0
    guards: [ (start_from >= 0) ]
    body: |
      // TODO: add test for this method
      validate_start_from_is_a_power_of_two_if_enumerators_are_bitwise(enumerators_are_bitwise, start_from);
      this->start_from = start_from;
      return;


  - name: set_enumerators_are_bitwise
    parameters:
      - name: enumerators_are_bitwise
        type: bool
        default_argument: false
    body: |
      // TODO: add test for this method
      validate_start_from_is_a_power_of_two_if_enumerators_are_bitwise(enumerators_are_bitwise, start_from);
      this->enumerators_are_bitwise = enumerators_are_bitwise;
      return;


  - name: has_type
    type: bool
    body: |
      return (!type.empty());


  - name: is_private
    type: bool
    body: |
      return scope == "private";


  - name: is_protected
    type: bool
    body: |
      return scope == "protected";


  - name: is_public
    type: bool
    body: |
      return scope == "public";


  - name: build_to_string_method
    type: Blast::Cpp::Function
    guards: [ validate(name), validate_permit_upper(name_of_to_string_method) ]
    body: |
      // TODO: finish implementing this function
      if (enumerators.empty())
      {
         throw std::runtime_error(
            "[Blast::Cpp::EnumClass::build_to_string_method]: error: "
               "\"enumerators\" cannot be empty because the first enumerator is used as a default value. Feel free "
                  "improve this feature possibly by expanding the \"to_string: \" feature with additional data, "
                  "adding a \"to_string_default_argument\", or another better idea."
         );
      }

      std::string argument_default_value = name + "::" + enumerators[0]; // NOTE: Using the first enum as the default argument
      Blast::Cpp::Function result(
         "std::string",
         name_of_to_string_method,
         std::vector<Blast::Cpp::FunctionArgument>({
            Blast::Cpp::FunctionArgument(name, "value", argument_default_value),
            Blast::Cpp::FunctionArgument("bool", "throw_on_error", "true"),
         }),
         build_to_string_method_body(),
         true, // is_static
         false // is_const (false, static methods cannot be const)
      );
      return result;
    body_dependency_symbols:
      - std::vector
      - Blast::Cpp::FunctionArgument


  - name: build_to_string_method_body
    type: std::string
    body: |
      // TODO: improve this function, consider using a static list of names rather that defining them in this method
      std::stringstream result;
      for (auto &enumerator : enumerators)
      {
         result << "if (value == " << name << "::" << enumerator << ") return \"" << to_lower(enumerator) << "\";" << std::endl;
      }
      result << "// TODO: Implement \"throw_on_error\" argument" << std::endl;
      result << "return \"\";" << std::endl;
      //Blast::TemplatedFile templated_file(
         //"return \"unimplemented\";",
         //{}
      //);
      //return templated_file.generate_content();
      return result.str();
    body_dependency_symbols:
      - Blast::TemplatedFile
      - std::stringstream


  - name: build_from_string_method
    type: Blast::Cpp::Function
    guards: [ validate(name), validate_permit_upper(name_of_from_string_method) ]
    body: |
      // TODO: finish implementing this function
      if (enumerators.empty())
      {
         throw std::runtime_error(
            "[Blast::Cpp::EnumClass::build_from_string_method]: error: "
               "\"enumerators\" cannot be empty because the first enumerator is used as a default value. Feel free "
                  "improve this feature possibly by expanding the \"to_string: \" feature with additional data, "
                  "adding a \"to_string_default_argument\", or another better idea."
         );
      }
      std::string argument_default_value = "\"[unset-value]\"";
      //std::string argument_default_value = enumerators[0]; // NOTE: Using the first enum as the default argument
      Blast::Cpp::Function result(
         name, //"std::string",
         name_of_from_string_method,
         std::vector<Blast::Cpp::FunctionArgument>({
            //Blast::Cpp::FunctionArgument("std::string", "value"),
            Blast::Cpp::FunctionArgument("std::string", "value", argument_default_value),
            Blast::Cpp::FunctionArgument("bool", "throw_on_error", "true"),
         }),
         build_from_string_method_body(),
         true, // is_static
         false // is_const (false, static methods cannot be const)
      );
      return result;
    body_dependency_symbols:
      - std::vector
      - Blast::Cpp::FunctionArgument


  - name: build_from_string_method_body
    type: std::string
    body: |
      // TODO: improve this function, consider using a static list of names rather that defining them in this method
      std::stringstream result;
      for (auto &enumerator : enumerators)
      {
         std::string string_value = to_lower(enumerator);
         std::stringstream enum_value;
         enum_value << name << "::" << enumerator;
         result << "if (value == \"" << string_value << "\") return " << enum_value.str() << ";" << std::endl;
      }
      result << "throw std::runtime_error(\"Blast/Cpp/EnumClass: ERROR: Could not find enum for \\\" + value + \\\"\");";
      result << std::endl;
      //result << "return << " << name << "::" << \"error\";" << std::endl;
      //Blast::TemplatedFile templated_file(
         //"return \"unimplemented\";",
         //{}
      //);
      //return templated_file.generate_content();
      return result.str();
    body_dependency_symbols:
      - Blast::TemplatedFile
      - std::stringstream


  - name: validate
    static: true
    type: bool
    parameters:
      - name: method_name
        type: std::string
        default_argument: '"[unset-method_name]"'
    body: |
      // TODO: test this function

      // Check if string is at least 3 characters long
      if (method_name.length() < 3) {
         return false;
      }
    
      // Check if string has only lowercase and underscore characters
      for (char c : method_name) {
         if (!std::islower(c) && c != '_' && !std::isupper(c)) {
            return false;
         }
      }
      return true;


  - name: validate_permit_upper
    static: true
    type: bool
    parameters:
      - name: method_name
        type: std::string
        default_argument: '"[unset-method_name]"'
    body: |
      // TODO: test this function

      // Check if string is at least 3 characters long
      if (method_name.length() < 3) {
         return false;
      }
    
      // Check if string has only lowercase and underscore characters
      for (char c : method_name) {
         if (!std::islower(c) && c != '_') {
            return false;
         }
      }
      return true;


  - name: to_lower
    type: std::string
    parameters:
      - name: value
        type: std::string
        default_argument: '"[unset-value]"'
    body: |
      std::string result;
      result.reserve(value.size());

      for (char c : value)
      {
         result += std::tolower(static_cast<unsigned char>(c));
      }

      return result;


  - name: is_power_of_two
    static: true
    type: bool
    parameters:
      - name: n
        type: uint32_t
        default_argument: 0
    body: |
      // TODO: Test this
       if (n == 0) return true;
       return (n > 0) && ((n & (n - 1)) == 0);


  - name: validate_start_from_is_a_power_of_two_if_enumerators_are_bitwise
    static: true
    type: bool
    parameters:
      - name: enumerators_are_bitwise
        type: bool
        default_argument: false
      - name: start_from
        type: int
        default_argument: false
    guards: [ start_from >= 0 ]
    body: |
      // TODO: Test this
      if (!enumerators_are_bitwise) return true;
      if (!is_power_of_two(start_from))
      {
         throw std::runtime_error(
            "[Blast::Cpp::EnumClass::validate_start_from_is_a_power_of_two_if_enumerators_are_bitwise]: error: "
               "\"enumerators_are_bitwise\" is set to true, and thus \"start_from\" must be a power of two but it "
               "is not."
         );
      }
      return true;
    body_dependency_symbols:
      - std::unordered_set


  - name: validate_elements_are_unique
    static: true
    type: bool
    parameters:
      - name: elements
        type: std::vector<std::string>
        default_argument: '{}'
    body: |
      // TODO: move this function into an isolated class, or class with a set of validation functions
      std::unordered_set<std::string> unique_set;
      for (const auto& element : elements)
      {
         if (!unique_set.insert(element).second)
         {
             return false;
         }
      }
      return true;
    body_dependency_symbols:
      - std::unordered_set


dependencies:


  - symbol: Blast::Cpp::Function
    headers: [ Blast/Cpp/Function.hpp ]
  - symbol: Blast::TemplatedFile
    headers: [ Blast/TemplatedFile.hpp ]
  - symbol: Blast::Cpp::FunctionArgument
    headers: [ Blast/Cpp/FunctionArgument.hpp ]
  - symbol: Blast::CamelCaseToUnderscoreConverter
    headers: [ Blast/CamelCaseToUnderscoreConverter.hpp ]
    

