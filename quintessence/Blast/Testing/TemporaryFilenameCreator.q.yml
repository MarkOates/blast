methods:


  - name: create_filename
    type: std::string
    body: |
      static Blast::Random random(time(0)); // NOTE: Not sure how else to do this but with static
      return Blast::TimeStamper().generate_now_timestamp_utc() + "_" + random.get_random_string(26);
    body_dependency_symbols:
      - Blast::TimeStamper
      - Blast::Random
      - std::tmpnam
      - close


  - name: create_filename_within_guaranteed_unique_directory
    type: std::string
    body: |
      Blast::Testing::TemporaryDirectoryCreator temporary_directory_creator;
      std::string unique_directory = temporary_directory_creator.create().string();
      std::string unique_filename = std::filesystem::path(create_filename()).filename().string();
      return unique_directory + "/" + unique_filename;
    body_dependency_symbols:
      - Blast::Testing::TemporaryDirectoryCreator


dependencies:


  - symbol: std::tmpnam
    headers: [ cstdio ]
  - symbol: close
    headers: [ unistd.h ]
  - symbol: Blast::Testing::TemporaryDirectoryCreator
    headers: [ Blast/Testing/TemporaryDirectoryCreator.hpp ]
  - symbol: Blast::Errors
    headers: [ Blast/Errors.hpp ]
  - symbol: Blast::Random
    headers: [ Blast/Random.hpp ]
  - symbol: Blast::TimeStamper
    headers: [ Blast/TimeStamper.hpp ]


