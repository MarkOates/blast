properties:


  - name: TYPE
    type: char*
    static: true
    init_with: '(char*)"Base"'
    constexpr: true

  - name: type
    type: std::string
    init_with: TYPE
    constructor_arg: true
    getter: true

  - name: build
    type: Blast::BuildSystem::Builds::Base*
    init_with: nullptr
    getter: true
    setter: true


functions:


  - name: is_type
    type: bool
    parameters:
      - name: possible_type
        type: std::string
        default_argument: '""'
    body: |
      return (possible_type == get_type());


  - name: render_text
    type: std::string
    virtual: true
    guards: [ build ]
    body: |
      std::stringstream result;

      unsigned i=0;

      result << "[========= BUILD =========]" << std::endl;
      result << std::endl;
      for (auto &build_stage : build->get_build_stages())
      {
         Blast::BuildSystem::BuildStageRenderer build_stage_renderer;
         build_stage_renderer.set_build_stage(build_stage);
         std::string build_stage_render = build_stage_renderer.build_text_report();

         i++;
         result << "[#=------ STAGE " << i << " ------=#]" << std::endl;
         result << "  - Type: " << build_stage->get_type() << std::endl;
         result << "  - Status: " << colorize_status(build_stage->get_status()) << std::endl;
         result << "  - Duration: " << build_stage->calc_duration_seconds() << " seconds" << std::endl;
         if (!build_stage_render.empty()) result << build_stage_render;
         result << std::endl;
      }
      result << "[===== Duration: " << build->infer_duration_seconds() << " seconds =======]" << std::endl;

      return result.str();
    body_dependency_symbols:
      - std::stringstream
      - Blast::BuildSystem::BuildStageRenderer


  - name: colorize_status
    type: std::string
    parameters:
      - name: status
        type: std::string
        default_argument: '"[unset-status]"'
    body: |
      const std::string CONSOLE_COLOR_RED = "\033[1;31m";
      const std::string CONSOLE_COLOR_YELLOW = "\033[1;33m";
      const std::string CONSOLE_COLOR_GREEN = "\033[1;32m";
      const std::string CONSOLE_COLOR_DEFAULT = "\033[0m";
      const std::string CONSOLE_COLOR_CYAN = "\033[1;36m";

      std::string color;

      if (status == Blast::BuildSystem::BuildStages::Base::STATUS_WAITING_TO_START) { color = CONSOLE_COLOR_YELLOW; }
      else if (status == Blast::BuildSystem::BuildStages::Base::STATUS_RUNNING) { color = CONSOLE_COLOR_YELLOW; }
      else if (status == Blast::BuildSystem::BuildStages::Base::STATUS_SUCCEEDED) { color = CONSOLE_COLOR_GREEN; }
      else if (status == Blast::BuildSystem::BuildStages::Base::STATUS_ERROR) { color = CONSOLE_COLOR_RED; }
      else if (status == Blast::BuildSystem::BuildStages::Base::STATUS_FAILED) { color = CONSOLE_COLOR_RED; }
      else
      {
         throw std::runtime_error(Blast::Errors::build_error_message(
               "Blast::BuildSystem::ReportRenderers::Base::colorize_status()",
               "Unaccounted for status type"
            )
         );
      }

      return color + status + CONSOLE_COLOR_DEFAULT;
    body_dependency_symbols:
      - Blast::BuildSystem::BuildStages::Base
      - Blast::Errors


dependencies:


  - symbol: Blast::BuildSystem::BuildStageRenderer
    headers: [ Blast/BuildSystem/BuildStageRenderer.hpp ]
  - symbol: Blast::BuildSystem::BuildStages::Base
    headers: [ Blast/BuildSystem/BuildStages/Base.hpp ]
  - symbol: Blast::BuildSystem::Builds::Base
    headers: [ Blast/BuildSystem/Builds/Base.hpp ]
  - symbol: Blast::Errors
    headers: [ Blast/Errors.hpp ]


