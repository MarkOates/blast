properties:


  - name: suggested_symbol_headers
    type: std::map<std::string, std::vector<std::string>>
    init_with: 'get_default_suggested_symbol_headers()'


functions:


  - name: generate_autofill_suggestion_for_symbol
    type: std::string
    parameters:
      - name: symbol
        type: std::string
        default_argument: '"[unset-symbol]"'
    body: |
      std::string header = __replace(symbol, "::", "/") + ".hpp";
      return header;


  - name: find_suggested_headers
    type: std::vector<std::string>
    parameters:
      - name: symbol
        type: std::string
        default_argument: '"[unset-symbol]"'
      - name: autogenerate_a_header_if_one_is_not_present
        type: bool
        default_argument: true
    body: |
      if (suggested_symbol_headers.count(symbol) == 0)
      {
         if (autogenerate_a_header_if_one_is_not_present) return { generate_autofill_suggestion_for_symbol(symbol) };
         return {};
      }
      return suggested_symbol_headers[symbol];


  - name: find_suggested_headers_csv
    type: std::string
    parameters:
      - name: symbol
        type: std::string
        default_argument: '"[unset-symbol]"'
      - name: autogenerate_a_header_if_one_is_not_present
        type: bool
        default_argument: true
    body: |
      return Blast::StringJoiner(
            find_suggested_headers(symbol, autogenerate_a_header_if_one_is_not_present),
            ", "
         ).join();
    body_dependency_symbols:
      - Blast::StringJoiner


  - name: get_default_suggested_symbol_headers
    type: std::map<std::string, std::vector<std::string>>
    body: |
      return std::map<std::string, std::vector<std::string>>{
         { "StageInterface", { "Hexagon/StageInterface.hpp" }, },
         { "std::function", { "functional" }, },
         { "std::min", { "algorithm" }, },
         { "std::max", { "algorithm" }, },
         { "fmod", { "cmath" }, },

         // Allegro
         { "ALLEGRO_EVENT", { "allegro5/allegro.h" }, },
         { "ALLEGRO_FONT", { "allegro5/allegro_font.h" }, },
         { "ALLEGRO_BITMAP", { "allegro5/allegro.h" }, },
         { "ALLEGRO_DISPLAY", { "allegro5/allegro.h" }, },
         { "ALLEGRO_COLOR", { "allegro5/allegro.h" }, },
         { "ALLEGRO_STATE", { "allegro5/allegro.h" }, },
         { "al_color_html", { "allegro5/allegro_color.h" }, },
         { "al_draw_rectangle", { "allegro5/allegro_primitives.h" }, },
         { "al_draw_filled_rectangle", { "allegro5/allegro_primitives.h" }, },
         { "al_draw_rounded_rectangle", { "allegro5/allegro_primitives.h" }, },
         { "al_draw_filled_rounded_rectangle", { "allegro5/allegro_primitives.h" }, },
         { "al_draw_circle", { "allegro5/allegro_primitives.h" }, },
         { "al_draw_filled_circle", { "allegro5/allegro_primitives.h" }, },
      };


  - name: __replace
    type: std::string
    private: true
    parameters:
      - name: str
        type: std::string
        default_argument: "\"source string\""
      - name: from
        type: std::string
        default_argument: "\"source\""
      - name: to
        type: std::string
        default_argument: "\"result\""
    body: |
       size_t start_pos = 0;
       while((start_pos = str.find(from, start_pos)) != std::string::npos) {
          str.replace(start_pos, from.length(), to);
          start_pos += to.length();
       }
       return str;


dependencies:


  - symbol: Blast::StringJoiner
    headers: [ Blast/StringJoiner.hpp ]


