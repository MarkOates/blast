functions:
  - name: __replace
    type: std::string
    parameters:
      - name: str
        type: std::string
        default_argument: "\"\""
      - name: from
        type: std::string
        default_argument: "\"\""
      - name: to
        type: std::string
        default_argument: "\"\""
    body: |
      size_t start_pos = 0;
      while((start_pos = str.find(from, start_pos)) != std::string::npos) {
         str.replace(start_pos, from.length(), to);
         start_pos += to.length();
      }
      return str;
  - name: execute_command
    type: void
    parameters:
      - name: command
        type: std::string
        default_argument: "\"\""
    body: |
      Blast::ShellCommandExecutorWithCallback shell_command_executor(
         command,
         Blast::ShellCommandExecutorWithCallback::simple_cout_callback
         //Blast::ShellCommandExecutorWithCallback::simple_silent_callback
      );
      shell_command_executor.execute();
    body_dependency_symbols:
      - Blast::ShellCommandExecutorWithCallback
  - name: block_execution_with_rerun_pause
    type: void
    body: |
      std::string rerun_command = "rerun --quiet -c -p \"**/*.{" \
         "rb,js,tsx,coffee,css,scss,sass,erb,html,haml,ru,yml,slim,md,feature,c,h,cpp,hpp,txt,cfg}" \
         "\"";
      std::string project_directory = "/Users/markoates/Repos/blast/";
      std::vector<std::string> command_tokens;
      command_tokens = {
        //"(cd ",
        //project_directory,
        //" && ",
        rerun_command,
        " \"(cd ",
           project_directory,
           " && exit)\"",
      };

      std::stringstream command;
      for (auto &command_token : command_tokens)
      {
         command << command_token << " ";
      }

      execute_command(command.str());
      return;
  - name: run_full_rebuild
    type: void
    body: |
      std::string full_rebuild_command = "make clean && make programs && make && make clean && make programs && make";
      execute_command(full_rebuild_command);
  - name: run
    type: void
    body: |
      while(true)
      {
         run_with_block_after_command();
      }
      return;
  - name: run_with_block_after_command
    type: void
    body: |
      std::string rerun_command = "rerun --quiet -c -p \"**/*.{" \
         "rb,js,tsx,coffee,css,scss,sass,erb,html,haml,ru,yml,slim,md,feature,c,h,cpp,hpp,txt,cfg}" \
         "\"";
      std::string project_directory = "/Users/markoates/Repos/blast/";
      std::vector<std::string> command_tokens;
      command_tokens = {
        //"(cd ",
        //project_directory,
        //" && ",
        //rerun_command,
        " \"(cd ",
           project_directory,
           " && make focus)\"",
      };

      std::stringstream command;
      for (auto &command_token : command_tokens)
      {
         command << command_token << " ";
      }

      execute_command(command.str());
      block_execution_with_rerun_pause();
      return;
    body_dependency_symbols:
      - std::vector<std::string>
      - std::stringstream
dependencies:
  - symbol: Blast::ShellCommandExecutorWithCallback
    headers: [ Blast/ShellCommandExecutorWithCallback.hpp ]

