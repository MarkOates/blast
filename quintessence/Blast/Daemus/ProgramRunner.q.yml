functions:
  - name: __replace
    type: std::string
    parameters:
      - name: str
        type: std::string
        default_argument: "\"\""
      - name: from
        type: std::string
        default_argument: "\"\""
      - name: to
        type: std::string
        default_argument: "\"\""
    body: |
      size_t start_pos = 0;
      while((start_pos = str.find(from, start_pos)) != std::string::npos) {
         str.replace(start_pos, from.length(), to);
         start_pos += to.length();
      }
      return str;
  - name: execute_command
    type: void
    parameters:
      - name: command
        type: std::string
        default_argument: "\"\""
    body: |
      Blast::ShellCommandExecutorWithCallback shell_command_executor(
         command,
         Blast::ShellCommandExecutorWithCallback::simple_cout_callback
      );
      shell_command_executor.execute();
    body_dependency_symbols:
      - Blast::ShellCommandExecutorWithCallback
  - name: run
    type: void
    body: |
      //  "--tag focus"
      //std::string RUBY_DEV_COMMAND_RERUN = "COMPONENT_NAME=[[COMPONENT_NAME]]; rerun -c "bin/rails db:environment:set RAILS_ENV=test; bundle exec rspec spec/${COMPONENT_NAME}_spec.rb"; unset COMPONENT_NAME";
      //std::string RUBY_DEV_COMMAND = "COMPONENT_NAME=[[COMPONENT_NAME]]; bin/rails db:environment:set RAILS_ENV=test; bundle exec rspec spec/${COMPONENT_NAME}_spec.rb; unset COMPONENT_NAME";

      //std::string user_input;

      //std::cout << "Ruby/Rspec mode" << std::endl;
      //std::cout << "Type the name of the component: ";
      //getline(std::cin, user_input);
      //user_input = "graphql/graph_api/partners/mutations/external_job_review_create";
      //std::cout << "Skipping component input. Using "" << user_input << """;
      //std::cout << std::endl;

      //if (user_input == "exit") break;

      //std::string user_command = RUBY_DEV_COMMAND_RERUN;
      //user_command = __replace(user_command, "[[COMPONENT_NAME]]", user_input);

      std::vector<std::string> command_tokens;
      command_tokens = {
         "echo Hello, Mark",
      };

      std::stringstream command;
      for (auto &command_token : command_tokens)
      {
         command << command_token << " ";
      }

      execute_command(command.str());
      return;
    body_dependency_symbols:
      - std::vector<std::string>
      - std::stringstream
dependencies:
  - symbol: Blast::ShellCommandExecutorWithCallback
    headers: [ Blast/ShellCommandExecutorWithCallback.hpp ]

