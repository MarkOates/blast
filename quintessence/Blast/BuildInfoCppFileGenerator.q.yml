properties:


  - name: build_info
    type: Blast::BuildInfo
    constructor_arg: true
    init_with: '{}'
    getter: true
    setter: false

  - name: cpp_class
    type: Blast::Cpp::Class

  - name: initialized
    type: bool
    init_with: false


functions:


  - name: set_build_info
    parameters:
      - name: build_info
        type: Blast::BuildInfo
        default_argument: '{}'
    guards: [ (!initialized) ]
    body: |
      this->build_info = build_info;
      return;


  - name: initialize
    body: |
      cpp_class = build_cpp_class();
      initialized = true;
      return;


  - name: build_cpp_class
    type: Blast::Cpp::Class
    body: |
      //return Blast::Cpp::Class(
         //std::string class_name="UnnamedClass",
         //std::vector<std::string> namespaces={},
         //std::vector<Blast::Cpp::ParentClassProperties> parent_classes_properties={},
         //std::vector<Blast::Cpp::ClassAttributes> attribute_properties={},
         //std::vector<Blast::Cpp::EnumClass> enum_classes={},
         //std::vector<Blast::Cpp::Function> functions={},
         //std::vector<Blast::Cpp::SymbolDependencies> symbol_dependencies={},
         //std::vector<Blast::Cpp::SymbolDependencies> function_body_symbol_dependencies={}
      //);
      return Blast::Cpp::Class(
         "BuildInfo", // TODO: consider changing this to ThisBuildInfo
         {},
         {},
         build_cpp_class_attribute_properties(), // attribute_properties
         {}, // enum_classes
         build_cpp_class_functions(), // functions
         build_cpp_class_symbol_dependencies(), // symbol_dependencies
         {} // function_body_symbol_dependencies
      );


  - name: build_cpp_class_functions
    type: std::vector<Blast::Cpp::Function>
    body: |
      std::vector<Blast::Cpp::Function> result = {
         build_get_cpp_version_function()
      };
      return result;


  - name: build_cpp_class_attribute_properties
    type: std::vector<Blast::Cpp::ClassAttributes>
    body: |
      std::vector<Blast::Cpp::ClassAttributes> result = {
         build_cpp_class_attribute(
            "std::string",
            "time_of_build",
            build_info.get_time_of_build()
         ),
         build_cpp_class_attribute(
            "std::string",
            "building_platform_os_name",
            build_info.get_building_platform_os_name()
         ),
         build_cpp_class_attribute(
            "std::string",
            "building_platform_os_version",
            build_info.get_building_platform_os_version()
         ),
         build_cpp_class_attribute(
            "std::string",
            "building_platform_chipset",
            build_info.get_building_platform_chipset()
         ),
         build_cpp_class_attribute(
            "std::string",
            "compiler_name",
            build_info.get_compiler_name()
         ),
         build_cpp_class_attribute(
            "std::string",
            "compiler_version",
            build_info.get_compiler_version()
         ),
         build_cpp_class_attribute(
            "std::string",
            "allegro_version_num",
            build_info.get_allegro_version_num()
         ),
         build_cpp_class_attribute(
            "std::string",
            "allegro_version_git_branch",
            build_info.get_allegro_version_git_branch()
         ),
         build_cpp_class_attribute(
            "std::string",
            "allegro_version_git_hash",
            build_info.get_allegro_version_git_hash()
         ),
         build_cpp_class_attribute(
            "std::string",
            "allegro_version_git_latest_commit_date_and_time",
            build_info.get_allegro_version_git_latest_commit_date_and_time()
         ),
         build_cpp_class_attribute(
            "int",
            "allegro_version_git_num_commits",
            std::to_string(build_info.get_allegro_version_git_num_commits())
         ),
      };
      return result;


  - name: build_get_cpp_version_function
    type: Blast::Cpp::Function
    body: |
      std::string body = R"END(   std::string result = "unknown C++ version";
      #if __cplusplus == 199711L
         result = "C++98";
      #elif __cplusplus == 201103L
         result = "C++11";
      #elif __cplusplus == 201402L
         result ="C++14";
      #elif __cplusplus == 201703L
         result = "C++17";
      #elif __cplusplus == 202002L
         result = "C++20";
      #endif
      return result;)END";

      body = Blast::String::Unindenter(body).remove_spaces_at_beginning();

      return Blast::Cpp::Function(
            "std::string", //type
            "get_cpp_version_string", // name
            {}, // signature
            body, // body
            true // is_static
         );
    body_dependency_symbols:
      - Blast::String::Unindenter


  - name: build_cpp_class_attribute
    type: Blast::Cpp::ClassAttributes
    parameters:
      - name: datatype
        type: std::string
        default_argument: '"std::string"'
      - name: variable_name
        type: std::string
        default_argument: '"variable"'
      - name: initialization_value
        type: std::string
        default_argument: '"variable"'
    guards: [ is_valid_datatype(datatype) ]
    body: |
      return Blast::Cpp::ClassAttributes(
            datatype, //std::string datatype,
            variable_name, //std::string variable_name,
            (datatype == "std::string") ? wrap_in_quotes(initialization_value) : initialization_value, //std::string initialization_value,
            true, //bool is_static,
            false, //bool is_constructor_parameter,
            true, //bool has_getter,
            false, //bool has_expicit_getter,
            false, //bool has_getter_ref,
            false, //bool has_setter,
            false, //bool has_explicit_setter,
            false, //bool is_constexpr
            false //bool is_exposed
         );


  - name: build_cpp_class_symbol_dependencies
    type: std::vector<Blast::Cpp::SymbolDependencies>
    body: |
      std::vector<Blast::Cpp::SymbolDependencies> result = {
         Blast::Cpp::SymbolDependencies(
            "std::string", // std::string symbol,
            { "string" }, // std::vector<std::string> include_header_files={},
            {}, // std::vector<std::string> dependency_include_directories={},
            {} // std::vector<std::string> linked_library_names={}
         ),
         Blast::Cpp::SymbolDependencies(
            "int", // std::string symbol,
            {}, // std::vector<std::string> include_header_files={},
            {}, // std::vector<std::string> dependency_include_directories={},
            {} // std::vector<std::string> linked_library_names={}
         ),
      };
      return result;


  - name: wrap_in_quotes
    type: std::string
    parameters:
      - name: str
        type: std::string
        default_argument: '""'
    body: |
      return "\"" + str + "\"";


  - name: is_valid_datatype
    type: bool
    parameters:
      - name: str
        type: std::string
        default_argument: '""'
    body: |
       return (str == "std::string" || str == "int");


  - name: header_file_content
    type: std::string
    guards: [ initialized ]
    body: |
      Blast::Cpp::ClassGenerator generator(cpp_class);
      return generator.generate_header_file_content();
    body_dependency_symbols:
      - Blast::Cpp::ClassGenerator


  - name: source_file_content
    type: std::string
    guards: [ initialized ]
    body: |
      Blast::Cpp::ClassGenerator generator(cpp_class);
      return generator.generate_source_file_content();
    body_dependency_symbols:
      - Blast::Cpp::ClassGenerator


dependencies:


  - symbol: Blast::Cpp::Class
    headers: [ Blast/Cpp/Class.hpp ]
  - symbol: Blast::Cpp::Function
    headers: [ Blast/Cpp/Function.hpp ]
  - symbol: Blast::Cpp::ClassGenerator
    headers: [ Blast/Cpp/ClassGenerator.hpp ]
  - symbol: Blast::Cpp::ClassAttributes
    headers: [ Blast/Cpp/ClassAttributes.hpp ]
  - symbol: Blast::Cpp::SymbolDependencies
    headers: [ Blast/Cpp/SymbolDependencies.hpp ]
  - symbol: Blast::BuildInfo
    headers: [ Blast/BuildInfo.hpp ]
  - symbol: Blast::String::Unindenter
    headers: [ Blast/String/Unindenter.hpp ]


