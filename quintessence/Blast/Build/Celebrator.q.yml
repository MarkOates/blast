functions:


  - name: generate_full_width_output_banner
    type: std::string
    parameters:
      - name: message
        type: std::string
        default_argument: "\"\""
      - name: width
        type: int
        default_argument: 80
      - name: fill_char
        type: char
        default_argument: "'='"
      - name: num_leading_fill_characters
        type: std::size_t
        default_argument: 4
    body: |
      std::string decorated_message = std::string(num_leading_fill_characters, fill_char) + " " + message + " ";

      std::stringstream stream;
      stream
        << std::left
        << std::setfill(fill_char)
        << std::setw(width)
        << decorated_message
        ;
      return stream.str();
    body_dependency_symbols:
      - std::stringstream
      - std::string
      - std::setfill
      - std::setw


  - name: generate_pass_banner
    type: std::string
    parameters:
      - name: width
        type: int
        default_argument: 80
    body: |
      std::vector<std::string> lines = {
        "|---------- ruler ----------------------------------------------------------------------------------------------|",
        "▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒",
        "▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒     █▀▀▀▀▄  █▀▀▀▀█  █▀▀▀▀▀  █▀▀▀▀▀    ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒",
        "▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒     █▄▄▄▄▀  █▄▄▄▄█  ▀▀▀▀▀█  ▀▀▀▀▀█    ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒",
        "▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒     ▀       ▀    ▀  ▀▀▀▀▀▀  ▀▀▀▀▀▀    ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒",
        "▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒",
      };

      int banner_width = 0;

      // HACK
      // OK, the lengths of the strings are not being reported properly, probably because they might be wchars or the string
      // is using extended chars.  For now... as a hack... I'm going to manually set the length to 113.  See this stack
      // overflow for more info: https://stackoverflow.com/questions/4063146/getting-the-actual-length-of-a-utf-8-encoded-stdstring
      // Also, this webpage with a function to validate a utf8 string: http://www.zedwood.com/article/cpp-is-valid-utf8-string-function
      //banner_width = 113;

      if (!lines.empty())
      {
        // NOTE: assuming the first line is the ruler used to determine the length (see previous HACK comment) so will be
        // using the length of the first line until the number of "code points" can be calculated. Also, will be popping
        // off the first line because of this.
        banner_width = lines[0].length();
        lines.erase(lines.begin());
      }

      std::string CONSOLE_COLOR_GREEN = "\033[32m";
      std::string CONSOLE_COLOR_DEFAULT = "\033[0m";

      // DEBUG
      // TODO: Add a "debug_output" option, and add a --debug flag to the programs/build_celebrator

      int left_padding_width = std::max(0, (width - banner_width) / 2);
      std::string left_padding_str(left_padding_width, ' ');
      //std::cout << "banner_width: " << banner_width << std::endl;
      //std::cout << "width: " << width << std::endl;
      //std::cout << "left_padding_width: " << left_padding_width << std::endl;
      //std::cout << "left_padding: #" << left_padding_str << "#" << std::endl;

      std::stringstream stream;
      stream << CONSOLE_COLOR_GREEN;
      for (auto &line : lines)
      {
        stream
          << left_padding_str
          << line
          << std::endl
          ;
      }
      stream << CONSOLE_COLOR_DEFAULT;
      return stream.str();
    body_dependency_symbols:
      - std::cout
      - std::stringstream
      - std::vector
      - std::string
      - std::setfill
      - std::setw


  - name: build_patterned_line
    type: std::string
    parameters:
      - name: length
        type: int
        default_argument: 127
    guards: [ (length > 0) ]
    body: |
      // NOTE: this function is WIP
      std::stringstream result;
      std::string CONSOLE_COLOR_GREEN = "\033[1;32m";
      std::string CONSOLE_COLOR_BLUE = "\033[1;34m";

      int length_so_far = 0;

      // TODO:
      while (length_so_far < (length-1))
      {
         result << CONSOLE_COLOR_GREEN << "▓" << CONSOLE_COLOR_BLUE << "▒";
         length_so_far += 2;
      }
      result << CONSOLE_COLOR_GREEN << "▓";

      return result.str();


  - name: generate_component_built_banner
    type: std::string
    parameters:
      - name: width
        type: int
        default_argument: 80
    body: |
      std::string CONSOLE_COLOR_GREEN = "\033[1;32m";
      std::string CONSOLE_COLOR_BLUE = "\033[1;34m";
      std::string CONSOLE_COLOR_DEFAULT = "\033[0m";

      std::vector<std::string> lines = {
        "|---------- ruler --------------------------------------------------------------------------------------|",
        build_patterned_line(101),
        //"▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓",
        "▓▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒▓",
        //"▓▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒                                     ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒▓",                 |
        "▓▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒   \033[1;34mCOMPONENT BUILT\033[1;32m   ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒▓",
        "▓▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒▓",
        build_patterned_line(101),
        //"▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓▒▓",
      };

      int banner_width = 0;

      // HACK
      // OK, the lengths of the strings are not being reported properly, probably because they might be wchars or the string
      // is using extended chars.  For now... as a hack... I'm going to manually set the length to 113.  See this stack
      // overflow for more info: https://stackoverflow.com/questions/4063146/getting-the-actual-length-of-a-utf-8-encoded-stdstring
      // Also, this webpage with a function to validate a utf8 string: http://www.zedwood.com/article/cpp-is-valid-utf8-string-function
      //banner_width = 113;

      if (!lines.empty())
      {
        // NOTE: assuming the first line is the ruler used to determine the length (see previous HACK comment) so will be
        // using the length of the first line until the number of "code points" can be calculated. Also, will be popping
        // off the first line because of this.
        banner_width = lines[0].length();
        lines.erase(lines.begin());
      }


      // DEBUG
      // TODO: Add a "debug_output" option, and add a --debug flag to the programs/build_celebrator

      int left_padding_width = std::max(0, (width - banner_width) / 2);
      std::string left_padding_str(left_padding_width, ' ');
      //std::cout << "banner_width: " << banner_width << std::endl;
      //std::cout << "width: " << width << std::endl;
      //std::cout << "left_padding_width: " << left_padding_width << std::endl;
      //std::cout << "left_padding: #" << left_padding_str << "#" << std::endl;

      std::stringstream stream;
      //stream << CONSOLE_COLOR_GREEN;
      for (auto &line : lines)
      {
        stream
          << left_padding_str
          << line
          << std::endl
          ;
      }
      stream << CONSOLE_COLOR_DEFAULT;
      return stream.str();
    body_dependency_symbols:
      - std::cout
      - std::stringstream
      - std::vector
      - std::string
      - std::setfill
      - std::setw



  - name: generate_built_banner
    type: std::string
    parameters:
      - name: width
        type: int
        default_argument: 80
    body: |
      std::string CONSOLE_COLOR_GREEN = "\033[1;32m";
      std::string CONSOLE_COLOR_BLUE = "\033[1;34m";
      std::string CONSOLE_COLOR_YELLOW = "\033[1;33m";
      std::string CONSOLE_COLOR_DEFAULT = "\033[0m";

      std::vector<std::string> lines = {
                             "|---------- ruler ----------------------------------------------------------------------------------------------|",
      CONSOLE_COLOR_YELLOW + "████▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒████",
      CONSOLE_COLOR_GREEN +  "██▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒██",
      CONSOLE_COLOR_GREEN +  "▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒       BUILT       ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒",
      CONSOLE_COLOR_GREEN +  "██▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒██",
      CONSOLE_COLOR_YELLOW + "████▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒████",
      };

      int banner_width = 0;

      // HACK
      // OK, the lengths of the strings are not being reported properly, probably because they might be wchars or the string
      // is using extended chars.  For now... as a hack... I'm going to manually set the length to 113.  See this stack
      // overflow for more info: https://stackoverflow.com/questions/4063146/getting-the-actual-length-of-a-utf-8-encoded-stdstring
      // Also, this webpage with a function to validate a utf8 string: http://www.zedwood.com/article/cpp-is-valid-utf8-string-function
      //banner_width = 113;

      if (!lines.empty())
      {
        // NOTE: assuming the first line is the ruler used to determine the length (see previous HACK comment) so will be
        // using the length of the first line until the number of "code points" can be calculated. Also, will be popping
        // off the first line because of this.
        banner_width = lines[0].length();
        lines.erase(lines.begin());
      }


      // DEBUG
      // TODO: Add a "debug_output" option, and add a --debug flag to the programs/build_celebrator

      int left_padding_width = std::max(0, (width - banner_width) / 2);
      std::string left_padding_str(left_padding_width, ' ');
      //std::cout << "banner_width: " << banner_width << std::endl;
      //std::cout << "width: " << width << std::endl;
      //std::cout << "left_padding_width: " << left_padding_width << std::endl;
      //std::cout << "left_padding: #" << left_padding_str << "#" << std::endl;

      std::stringstream stream;
      //stream << CONSOLE_COLOR_GREEN;
      for (auto &line : lines)
      {
        stream
          << left_padding_str
          << line
          << std::endl
          ;
      }
      stream << CONSOLE_COLOR_DEFAULT;
      return stream.str();
    body_dependency_symbols:
      - std::cout
      - std::stringstream
      - std::vector
      - std::string
      - std::setfill
      - std::setw







dependencies:


  - symbol: std::setfill
    headers: [ iomanip ]
  - symbol: std::setw
    headers: [ iomanip ]
