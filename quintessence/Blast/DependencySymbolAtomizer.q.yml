properties:


  - name: dependency_symbol
    type: std::string
    init_with: '""'
    constructor_arg: true
    getter: true
    setter: true


functions:


  - name: atomize
    type: std::vector<std::string>
    body: |
      std::string possibly_composite_dep = dependency_symbol;
      std::vector<char> chars_to_replace = { ',', '>', '<', '&', '*' };

      // replace the chars
      for (auto &char_to_replace : chars_to_replace)
      {
         std::replace(possibly_composite_dep.begin(), possibly_composite_dep.end(), char_to_replace, ' ');
      }

      // split it into tokens
      std::vector<std::string> tokenized_deps = Blast::StringSplitter(possibly_composite_dep, ' ').split();
      
      // erase the empty tokens
      for (int i=0; i<tokenized_deps.size(); i++)
      {
         if (tokenized_deps[i].empty())
         {
            tokenized_deps.erase(tokenized_deps.begin()+i);
            i--;
         }
      }
      
      return tokenized_deps;
    body_dependency_symbols:
      - Blast::StringSplitter


dependencies:


  - symbol: Blast::StringSplitter
    headers: [ Blast/StringSplitter.hpp ]


