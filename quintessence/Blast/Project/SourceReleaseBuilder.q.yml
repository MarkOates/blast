properties:
  - name: destination_directory
    type: std::string
    init_with: "\"/Users/markoates/Desktop/Release/\""
    constructor_arg: true
  - name: project_name
    type: std::string
    init_with: '"Flowers"'
    constructor_arg: true
    getter: true
  - name: source_project_directory
    type: std::string
    init_with: '"/Users/markoates/Repos/Flowers"'
    constructor_arg: true
    getter: true


functions:


  - name: write_file_contents
    parameters:
      - name: filename
        type: std::string
        default_argument: "\"\""
      - name: file_contents
        type: std::string
        default_argument: "\"\""
    body: |
      std::ofstream out(filename);
      out << file_contents;
      out.close();
    body_dependency_symbols:
      - std::ofstream


  - name: get_makefile_content
    type: std::string
    body: |
      std::string MAKEFILE_CONTENT = R"HEREDOC(SRC_FILES := $(shell find src -type f)
      ALLEGRO_LIBS=-lallegro_color -lallegro_font -lallegro_ttf -lallegro_dialog -lallegro_audio -lallegro_acodec -lallegro_primitives -lallegro_image -lallegro -lallegro_main
      main: $(SRC_FILES)
      )HEREDOC";
      MAKEFILE_CONTENT += "\t";
      MAKEFILE_CONTENT += "g++ -std=c++17 $^ programs/" + project_name + ".cpp -o " + project_name
                        + " -I./include $(ALLEGRO_LIBS)";
      return MAKEFILE_CONTENT;


  - name: get_pinfo_content
    type: std::string
    body: |
      std::string PINFO_CONTENT = R"HEREDOC(
      <?xml version="1.0" encoding="UTF-8"?>
      <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
      <plist version="1.0">
      <dict>
         <key>CFBundleDevelopmentRegion</key>
         <string>English</string>
         <key>CFBundleExecutable</key>
         <string>Hexagon</string>
         <key>CFBundleGetInfoString</key>
         <string>0.8, Copyright 2019 Mark Oates</string>
         <key>CFBundleIconFile</key>
         <string>Icon.icns</string>
         <key>CFBundleIdentifier</key>
         <string>org.markoates.Hexagon</string>
         <key>CFBundleInfoDictionaryVersion</key>
         <string>6.0</string>
         <key>CFBundleLongVersionString</key>
         <string>Hexagon</string>
         <key>CFBundleName</key>
         <string></string>
         <key>CFBundlePackageType</key>
         <string>APPL</string>
         <key>CFBundleShortVersionString</key>
         <string>0.8</string>
         <key>CFBundleSignature</key>
         <string>????</string>
         <key>CFBundleVersion</key>
         <string></string>
         <key>CSResourcesFileMapped</key>
         <true/>
         <key>LSRequiresCarbon</key>
         <true/>
         <key>NSHumanReadableCopyright</key>
         <string>Copyright 2019 Mark Oates</string>
      </dict>
      </plist>
      )HEREDOC";
      return PINFO_CONTENT;


  - name: copy_file
    parameters:
      - name: source_filename
        type: std::string
        default_argument: "\"\""
      - name: destination_filename
        type: std::string
        default_argument: "\"\""
    body: |
      std::ifstream src(source_filename, std::ios::binary);
      std::ofstream dst(destination_filename,   std::ios::binary);
      dst << src.rdbuf();
    body_dependency_symbols:
      - std::ifstream
      - std::ofstream


  - name: list_symlinks
    type: std::vector<std::pair<std::string, std::string>>
    body: |
      std::string command = std::string("find ") + destination_directory;
      Blast::ShellCommandExecutorWithCallback executor(
         command,
         ShellCommandExecutorWithCallback::simple_silent_callback
      );
      std::string executor_result = executor.execute();
      StringSplitter splitter(executor_result, '\n');

      std::vector<std::string> filenames = splitter.split();
      std::vector<std::pair<std::string, std::string>> result;

      for (auto &filename : filenames)
      {
         Blast::Project::SymlinkChecker symlink_checker(filename);
         if (symlink_checker.is_symlink())
         {
            std::pair<std::string, std::string> this_symlink_info{ filename, symlink_checker.read_symlink_target() };
            result.push_back(this_symlink_info);
         }
      }

      std::sort(result.begin(), result.end());

      return result;
    body_dependency_symbols:
      - std::cout
      - Blast::Project::SymlinkChecker
      - Blast::ShellCommandExecutorWithCallback
      - StringSplitter


  - name: replace_symlinks_with_copies_of_linked_files
    body: |
      std::cout << "Reading symlinks... " << std::endl;
      std::vector<std::pair<std::string, std::string>> symlinks = list_symlinks();

      for (auto &symlink : symlinks)
      {
         std::string file_to_remove = symlink.first;
         std::string file_to_copy_source = symlink.second;
         std::string file_to_copy_destination = symlink.first;

         if (remove(file_to_remove.c_str()) != 0)
         {
            std::stringstream error_message;
            error_message << "There was an error trying to delete the file \"" << file_to_remove << "\"" << std::endl;
            throw std::runtime_error(error_message.str());
         }

         copy_file(file_to_copy_source, file_to_copy_destination);
      }

      std::cout << "Finished reading symlinks (" << symlinks.size() << ")." << std::endl;
      return;
    body_dependency_symbols:
      - remove
      - std::stringstream


  - name: get_source_release_folder_name
    type: std::string
    body: |
      return get_project_name() + "SourceRelease";


  - name: get_macos_release_folder_name
    type: std::string
    body: |
      return get_project_name() + "MacOSRelease";


  - name: get_win64_release_folder_name
    type: std::string
    body: |
      return get_project_name() + "Win64Release";


  - name: generate_macos_release
    body: |
      // create folder "Flower.app/"
      return;


  - name: generate_source_release
    body: |
      std::string source_directory = get_source_project_directory();
      // !! WARNING: local variable name shadows class instance variable name:
      std::string xxx = destination_directory + "/" + get_source_release_folder_name();

      // create the directory
      std::vector<std::string> directories_that_will_exist = StringSplitter(xxx, '/').split();
      Blast::DirectoryCreator directory_creator(directories_that_will_exist, true);
      bool created = directory_creator.create();
      if (!created)
      {
         std::stringstream error_message;
         error_message << "Project/ReleaseBuilder error: could not create directory \""
                      << xxx
                      << "\"";
         throw std::runtime_error(error_message.str());
      }

      std::string destination_directory = xxx;


      std::stringstream copy_include_files_command;
      copy_include_files_command << "cp -R " << source_directory << "/include " << destination_directory << "/include";
      std::stringstream copy_src_files_command;
      copy_src_files_command << "cp -R " << source_directory << "/src " << destination_directory << "/src";
      std::stringstream copy_data_files_command;
      copy_data_files_command << "cp -R " << source_directory << "/bin/programs/data " << destination_directory << "/data";
      std::stringstream copy_program_files_command;
      copy_program_files_command << "cp -R " << source_directory << "/programs " << destination_directory << "/programs";
      std::stringstream copy_readme_file_command;
      copy_readme_file_command << "cp " << source_directory << "/README.md " << destination_directory << "/README.md";

      // copy files
      Blast::ShellCommandExecutorWithCallback include_file_copy_executor(copy_include_files_command.str(), ShellCommandExecutorWithCallback::simple_silent_callback);
      Blast::ShellCommandExecutorWithCallback src_file_copy_executor(copy_src_files_command.str(), ShellCommandExecutorWithCallback::simple_silent_callback);
      Blast::ShellCommandExecutorWithCallback data_file_copy_executor(copy_data_files_command.str(), ShellCommandExecutorWithCallback::simple_silent_callback);
      Blast::ShellCommandExecutorWithCallback program_file_copy_executor(copy_program_files_command.str(), ShellCommandExecutorWithCallback::simple_silent_callback);
      Blast::ShellCommandExecutorWithCallback readme_file_copy_executor(copy_readme_file_command.str(), ShellCommandExecutorWithCallback::simple_silent_callback);

      std::cout << "Copying include files into \"" << destination_directory << "\"... ";
      include_file_copy_executor.execute();
      std::cout << "done." << std::endl;

      std::cout << "Copying src files into \"" << destination_directory << "\"... ";
      src_file_copy_executor.execute();
      std::cout << "done." << std::endl;

      std::cout << "Copying program files into \"" << destination_directory << "\"... ";
      program_file_copy_executor.execute();
      std::cout << "done." << std::endl;

      std::cout << "Copying data files into \"" << destination_directory << "\"... ";
      data_file_copy_executor.execute();
      std::cout << "done." << std::endl;

      std::cout << "Copying README.md file into \"" << destination_directory << "\"... ";
      readme_file_copy_executor.execute();
      std::cout << "done." << std::endl;

      std::cout << "Creating rudimentary Makefile...";
      std::string makefile_full_filename = destination_directory + "/Makefile";
      write_file_contents(makefile_full_filename, get_makefile_content());
      std::cout << "done." << std::endl;

      replace_symlinks_with_copies_of_linked_files();

      return;
    body_dependency_symbols:
      - remove
      - Blast::DirectoryCreator
      - Blast::ShellCommandExecutorWithCallback
      - std::stringstream


dependencies:


  - symbol: std::ifstream
    headers: [ fstream ]
  - symbol: std::ofstream
    headers: [ fstream ]
  - symbol: std::stringstream
    headers: [ sstream ]
  - symbol: remove
    headers: [ cstdio ]
  - symbol: std::vector<std::pair<std::string, std::string>>
    headers: [ vector, string ]
  - symbol: StringSplitter
    headers: [ Blast/StringSplitter.hpp ]
  - symbol: Blast::DirectoryCreator
    headers: [ Blast/DirectoryCreator.hpp ]
  - symbol: Blast::Project::SymlinkChecker
    headers: [ Blast/Project/SymlinkChecker.hpp ]
  - symbol: Blast::ShellCommandExecutorWithCallback
    headers: [ Blast/ShellCommandExecutorWithCallback.hpp ]
