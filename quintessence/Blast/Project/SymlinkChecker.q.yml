properties:
  - name: filename
    type: std::string
    init_with: "\"\""
    constructor_arg: true
functions:
  - name: is_symlink
    type: bool
    body: |
      std::filesystem::path path(filename);
      if (!std::filesystem::exists(path)) return false;

      return std::filesystem::is_symlink(std::filesystem::symlink_status(path));
      //if (std::filesystem::is_symlink(std::filesystem::status(path)))
      {
         std::stringstream error_message;
         error_message << "an error occurred when trying to read_symlink_target in "
                       << "Blast/Project/SymlinkChecker: "
                       << "The file \"" << filename << "\" does not exist.";
         throw std::runtime_error(error_message.str());
      }

      //return is_symlink__shell_call_impl();

      // This is the expected implementation below, but std::filesystem::is_symlink is returning false
      // on Windows so these lines are disabled and the shell call is used in its place

      //std::filesystem::file_status file_status = std::filesystem::symlink_status(path);
      //return std::filesystem::is_symlink(file_status);
    body_dependency_symbols:
      - std::stringstream
      - std::filesystem::path
      - std::filesystem::exists
      - std::filesystem::is_symlink
  - name: is_symlink__shell_call_impl
    type: bool
    body: |
      std::stringstream command;
      command << "ls -l " << filename;
      Blast::ShellCommandExecutorWithCallback executor(
         command.str(),
         Blast::ShellCommandExecutorWithCallback::simple_silent_callback);
      std::string command_result = executor.execute();
      if (!command_result.empty() && command_result[0] == 'l') return true;
      return false;
    body_dependency_symbols:
      - Blast::ShellCommandExecutorWithCallback
  - name: read_symlink_target
    type: std::string
    body: |
      return read_symlink_target__shell_call_impl();

      // This is the expected implementation below, but std::filesystem::read_symlink is
      // throwing an error on Windows so has been disabled and the shell call is used in its place

      //if (!is_symlink())
      //{
      //   std::string error_message = "an error occurred when trying to read_symlink_target in Blast/Project/SymlinkChecker";
      //   throw std::runtime_error(error_message);
      //}
      //std::filesystem::path path(filename);
      //return std::filesystem::read_symlink(path).string();
    body_dependency_symbols:
      - std::filesystem::path
      - std::filesystem::read_symlink
  - name: read_symlink_target__shell_call_impl
    type: std::string
    body: |
      std::stringstream command;
      command << "readlink " << filename;
      Blast::ShellCommandExecutorWithCallback executor(
         command.str(),
         Blast::ShellCommandExecutorWithCallback::simple_silent_callback);
      std::string command_result = executor.execute();
      if (!command_result.empty() && command_result.back() == '\n') command_result.pop_back();
      return command_result;
    body_dependency_symbols:
      - Blast::ShellCommandExecutorWithCallback
dependencies:
  - symbol: Blast::ShellCommandExecutorWithCallback
    headers: [ Blast/ShellCommandExecutorWithCallback.hpp ]
  - symbol: std::stringstream
    headers: [ sstream ]
  - symbol: std::filesystem::path
    headers: [ filesystem ]
  - symbol: std::filesystem::exists
    headers: [ filesystem ]
  - symbol: std::filesystem::is_symlink
    headers: [ filesystem ]
  - symbol: std::filesystem::read_symlink
    headers: [ filesystem ]
