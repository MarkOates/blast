properties:


  - name: app_icon_filename
    type: std::string
    init_with: DEFAULT_APP_ICON_FILENAME
    constructor_arg: true
    getter: true
    setter: true

  - name: APP_INFO_FILENAME
    constexpr: true
    static: true
    type: const char*
    init_with: '(char*)"app.info"'

  - name: DEFAULT_APP_ICON_FILENAME
    constexpr: true
    static: true
    type: const char*
    init_with: '(char*)"data/icons/allegro-flare-generic-icon-1024.png"'


methods:


  - name: app_icon_filename_is_default
    type: bool
    body: |
      return (app_icon_filename == DEFAULT_APP_ICON_FILENAME);


  - name: get_contents
    type: std::string
    body: |
      std::stringstream result;
      result << "app_icon_filename=" << app_icon_filename << std::endl;
      return result.str();
    body_dependency_symbols:
      - std::stringstream


  - name: load_contents
    parameters:
      - name: raw_contents
        type: std::string
        default_argument: '"[unset-raw_contents]"'
    body: |
      std::istringstream iss(raw_contents);
      std::string line;

      // TODO: Check for extra keys, expected keys that were not found, etc
      std::vector<std::string> duplicate_keys;
      std::vector<std::string> excess_keys;
      std::vector<std::string> expected_keys = {
         "app_icon_filename",
      };

      // Process each line
      int line_num = 0;
      while (std::getline(iss, line))
      {
         line_num++;

         std::string trimmed_line = Blast::String::Trimmer(line).trim();
         if (trimmed_line.empty()) continue; // Skip blank lines


         // Validate line format
        
         std::vector<std::string> line_tokens = trim_each(Blast::StringSplitter(trimmed_line, '=').split());
         if (line_tokens.size() != 2)
         {
            // TODO: Throw
            Blast::Errors::throw_error(
               "Blast::Project::SourceReleaseAppInfoFile::load_contents",
               "Expecting 2 tokens between a '=' character, but there were " + std::to_string(line_tokens.size())
                  + " on line " + std::to_string(line_num)
            );
         }

         if (line_tokens[0].empty() || line_tokens[1].empty())
         {
            // TODO: Throw
            Blast::Errors::throw_error(
               "Blast::Project::SourceReleaseAppInfoFile::load_contents",
               "Expecting 2 non-blank tokens between a '=' character, but one or the other is blank on line "
                  + std::to_string(line_num)
            );
         }

         std::string prefix = line_tokens[0];
         std::string postfix = line_tokens[1];


         // Pull variable
         // TODO: Check for extra keys, expected keys that were not found, duplicate keys, etc

         if (prefix == "app_icon_filename") app_icon_filename = postfix;
      }
      return;
    body_dependency_symbols:
      - Blast::StringSplitter
      - Blast::String::Trimmer
      - std::filesystem::exists
      - Blast::Errors


  - name: trim_each
    type: std::vector<std::string>
    static: true
    parameters:
      - name: tokens
        type: std::vector<std::string>
        default_argument: '{}'
    body: |
      for (auto &s : tokens)
      {
         // ltrim
         s.erase(s.begin(), std::find_if(s.begin(), s.end(), [](int c) {return !std::isspace(c);}));
         // rtrim
         s.erase(std::find_if(s.rbegin(), s.rend(), [](int c) {return !std::isspace(c);}).base(), s.end());
      }
      return tokens;
    body_dependency_symbols:
      - std::find_if


dependencies:


  - symbol: std::find_if
    headers: [ algorithm ]
  - symbol: Blast::StringSplitter
    headers: [ Blast/StringSplitter.hpp ]
  - symbol: Blast::String::Trimmer
    headers: [ Blast/String/Trimmer.hpp ]
  - symbol: std::filesystem::exists
    headers: [ filesystem ]
  - symbol: Blast::Errors
    headers: [ Blast/Errors.hpp ]


