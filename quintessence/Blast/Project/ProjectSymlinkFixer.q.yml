functions:
  - name: starts_with
    private: true
    type: bool
    parameters:
      - name: source
        type: std::string
        default_argument: "\"\""
      - name: string_to_find
        type: std::string
        default_argument: "\"\""
    body: |
      return source.rfind(string_to_find, 0) == 0;



  - name: line_count
    type: int
    parameters:
      - name: filename
        type: std::string
        default_argument: "\"\""
    body: |
      std::ifstream myfile(filename);

      // new lines will be skipped unless we stop it from happening:
      myfile.unsetf(std::ios_base::skipws);

      // count the newlines with an algorithm specialized for counting:
      unsigned line_count = std::count(
            std::istream_iterator<char>(myfile),
            std::istream_iterator<char>(),
            '\n');

      //std::cout << "Lines: " << line_count << "\n";}
      return line_count;
    body_dependency_symbols:
      - std::ifstream


  - name: read_file_firstline
    type: std::string
    parameters:
      - name: filename
        type: std::string
        default_argument: "\"\""
    body: |
      std::ifstream infile(filename);

      std::string sLine;
      if (infile.good())
      {
         getline(infile, sLine);
      }
      else
      {
         throw std::runtime_error("Unexpected error in read_file_firstline");
      }

      infile.close();

      return sLine;


  - name: likely_an_intended_symlink
    private: true
    type: bool
    parameters:
      - name: filename
        type: std::string
        default_argument: "\"\""
      - name: string_to_find
        type: std::string
        default_argument: "\"\""
    body: |
      std::ifstream infile(filename);
      bool starts_with_string = false;

      if (infile.good())
      {
         std::string sLine;
         getline(infile, sLine);
         //std::cout << sLine << std::endl;
         if (starts_with(sLine, string_to_find)) starts_with_string = true;
         if (starts_with(sLine, "../") && line_count(filename) == 1) starts_with_string = true;
      }

      infile.close();

      return starts_with_string;


  - name: run
    type: std::string
    body: return "Hello World!";
dependencies:
  - symbol: std::ifstream
    headers: [ fstream ]
