properties:
  - name: destination_directory
    type: std::string
    init_with: "\"/Users/markoates/Desktop/Release\""
    constructor_arg: true
functions:
  - name: copy_file
    parameters:
      - name: source_filename
        type: std::string
        default_argument: "\"\""
      - name: destination_filename
        type: std::string
        default_argument: "\"\""
    body: |
      std::ifstream src(source_filename, std::ios::binary);
      std::ofstream dst(destination_filename,   std::ios::binary);
      dst << src.rdbuf();
    body_dependency_symbols:
      - std::ifstream
      - std::ofstream
  - name: list_symlinks
    type: std::vector<std::pair<std::string, std::string>>
    body: |
      std::string command = std::string("find ") + destination_directory;
      Blast::ShellCommandExecutorWithCallback executor(command, ShellCommandExecutorWithCallback::simple_silent_callback);
      std::string executor_result = executor.execute();
      StringSplitter splitter(executor_result, '\n');

      std::vector<std::string> filenames = splitter.split();
      std::vector<std::pair<std::string, std::string>> result;

      for (auto &filename : filenames)
      {
         Blast::Project::SymlinkChecker symlink_checker(filename);
         if (symlink_checker.is_symlink())
         {
            std::pair<std::string, std::string> this_symlink_info{ filename, symlink_checker.read_symlink_target() };
            result.push_back(this_symlink_info);
         }
      }

      return result;
    body_dependency_symbols:
      - std::cout
      - Blast::Project::SymlinkChecker
      - Blast::ShellCommandExecutorWithCallback
      - StringSplitter
  - name: replace_symlinks_with_copies_of_linked_files
    body: |
      std::vector<std::pair<std::string, std::string>> symlinks = list_symlinks();

      for (auto &symlink : symlinks)
      {
         std::string file_to_remove = symlink.first;
         std::string file_to_copy_source = symlink.second;
         std::string file_to_copy_destination = symlink.first;

         if (remove(file_to_remove.c_str()) != 0)
         {
            std::stringstream error_message;
            error_message << "There was an error trying to delete the file \"" << file_to_remove << "\"" << std::endl;
            throw std::runtime_error(error_message.str());
         }

         copy_file(file_to_copy_source, file_to_copy_destination);
      }
      return;
    body_dependency_symbols:
      - remove
      - std::stringstream
  - name: generate_source_release
    body: |
      std::string source_directory = "/Users/markoates/Repos/LabyrinthOfLore";

      std::stringstream copy_include_files_command;
      copy_include_files_command << "cp -R " << source_directory << "/include " << destination_directory << "/include";
      std::stringstream copy_src_files_command;
      copy_src_files_command << "cp -R " << source_directory << "/src " << destination_directory << "/src";
      std::stringstream copy_data_files_command;
      copy_data_files_command << "cp -R " << source_directory << "/data " << destination_directory << "/data";

      // copy files
      Blast::ShellCommandExecutorWithCallback include_file_copy_executor(copy_include_files_command.str(), ShellCommandExecutorWithCallback::simple_silent_callback);
      Blast::ShellCommandExecutorWithCallback src_file_copy_executor(copy_src_files_command.str(), ShellCommandExecutorWithCallback::simple_silent_callback);
      Blast::ShellCommandExecutorWithCallback data_file_copy_executor(copy_data_files_command.str(), ShellCommandExecutorWithCallback::simple_silent_callback);

      std::cout << "Copying include files into \"" << destination_directory << "\"... ";
      include_file_copy_executor.execute();
      std::cout << "done." << std::endl;

      std::cout << "Copying src files into \"" << destination_directory << "\"... ";
      src_file_copy_executor.execute();
      std::cout << "done." << std::endl;

      std::cout << "Copying data files into \"" << destination_directory << "\"... ";
      data_file_copy_executor.execute();
      std::cout << "done." << std::endl;

      replace_symlinks_with_copies_of_linked_files();

      return;
    body_dependency_symbols:
      - remove
      - Blast::ShellCommandExecutorWithCallback
      - std::stringstream
dependencies:
  - symbol: std::ifstream
    headers: [ fstream ]
  - symbol: std::ofstream
    headers: [ fstream ]
  - symbol: std::stringstream
    headers: [ sstream ]
  - symbol: remove
    headers: [ cstdio ]
  - symbol: std::vector<std::pair<std::string, std::string>>
    headers: [ vector, string ]
  - symbol: StringSplitter
    headers: [ Blast/StringSplitter.hpp ]
  - symbol: Blast::Project::SymlinkChecker
    headers: [ Blast/Project/SymlinkChecker.hpp ]
  - symbol: Blast::ShellCommandExecutorWithCallback
    headers: [ Blast/ShellCommandExecutorWithCallback.hpp ]
