properties:
  - name: project_repo_name
    type: std::string
    init_with: "\"\""
    constructor_arg: true
  - name: project_repo_base_path
    type: std::string
    init_with: "\"/Users/markoates/Repos/\""
    getter: true
    constructor_arg: true
functions:
  - name: get_source_file_listing
    type: std::vector<std::string>
    body: |
      std::stringstream command;

      command << "(cd " << project_repo_base_path << project_repo_name << " && " << "find -f **/*)";

      std::string response = Blast::ShellCommandExecutorWithCallback(
         command.str(),
         ShellCommandExecutorWithCallback::simple_silent_callback
      ).execute();

      std::vector<std::string> response_lines = StringSplitter(response, '\n').split();

      return response_lines;
    body_dependency_symbols:
      - std::stringstream
  - name: run
    type: std::string
    body: |
       std::string project_path_name = "blast/";
       std::string repos_base = std::string("/Users/markoates/Repos/") + project_path_name;

       std::string project_source_path = "";
       std::string project_destination_path = "";

       // make folder if not exists
       // releases/

       // make folder if not exists
       // releases/source/

       // copy source files
       // find src/**/*

       // copy   releases/source/data/* files
       // copy   releases/source/include/* files
       // copy   releases/source/src/* files
       // create releases/source/Makefile

       //- al_load_bitmap
       //- al_load_font
       //- bitmaps
       //- fonts
    body_dependency_symbols:
      - StringSplitter
      - Blast::ShellCommandExecutorWithCallback
      - std::cout
      - std::endl
dependencies:
  - symbol: StringSplitter
    headers: [ Blast/StringSplitter.hpp ]
  - symbol: Blast::ShellCommandExecutorWithCallback
    headers: [ Blast/ShellCommandExecutorWithCallback.hpp ]
  - symbol: std::cout
    headers: [ iostream ]
  - symbol: std::endl
    headers: [ iostream ]
  - symbol: std::stringstream
    headers: [ sstream ]
