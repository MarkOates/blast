properties:
  - name: project_root_directory
    type: std::string
    init_with: "\"\""
    constructor_arg: true
functions:
  - name: get_component_fragment_folder_name
    private: true
    type: std::string
    parameters:
      - name: component_fragment
        type: Blast::Project::component_fragment_t
        default_argument: COMPONENT_FRAGMENT_TYPE_UNDEFINED
    body: |
      switch (component_fragment)
      {
      case COMPONENT_FRAGMENT_TYPE_HEADER:
         return "include";
         break;
      case COMPONENT_FRAGMENT_TYPE_SOURCE:
         return "src";
         break;
      case COMPONENT_FRAGMENT_TYPE_EXAMPLE:
         return "examples";
         break;
      case COMPONENT_FRAGMENT_TYPE_TEST:
         return "tests";
         break;
      case COMPONENT_FRAGMENT_TYPE_QUINTESSENCE:
         return "quintessence";
         break;
      default:
         throw std::runtime_error("get_component_fragment_folder_name error: unaccounted for component_fragment_t");
         break;
      }
  - name: get_component_fragment_extension
    private: true
    type: std::string
    parameters:
      - name: component_fragment
        type: Blast::Project::component_fragment_t
        default_argument: COMPONENT_FRAGMENT_TYPE_UNDEFINED
    body: |
      return "";
  - name: get_components_of_fragment_type
    private: true
    type: std::vector<std::string>
    parameters:
      - name: project_root_directory
        type: std::string
        default_argument: "\"\""
      - name: component_fragment
        type: Blast::Project::component_fragment_t
        default_argument: COMPONENT_FRAGMENT_TYPE_UNDEFINED
    body: |
      return {};
  - name: components
    type: std::vector<std::string>
    body: |
      return {};
dependencies:
  - symbol: Blast::Project::component_fragment_t
    headers: [ Blast/Project/ComponentFragmentTypeEnum.hpp ]
