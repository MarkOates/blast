properties:


  - name: component
    type: Blast::Project::Component*
    init_with: nullptr
    constructor_arg: true


functions:


  - name: list_component_dependency_names
    type: std::vector<std::string>
    guards: [ component ]
    body: |
       // TODO: move this to guard
       if (!component->exists())
       {
          std::stringstream error_message;
          error_message << "[Blast::Project::ComponentDependencyLister error] "
                        << "cannot list_component_dependency_names; The component \""
                        << component->get_name() << "\" does not exist";
          throw std::runtime_error(error_message.str());
       }

       if (!component->has_quintessence())
       {
          std::stringstream error_message;
          error_message << "[Blast::Project::ComponentDependencyLister error] "
                        << "cannot list_component_dependency_names; The component \""
                        << component->get_name() << "\" must have a quintessence (until further support is added).";
          throw std::runtime_error(error_message.str());
       }

       std::vector<std::string> result;

       return result;
    body_dependency_symbols:
      - Blast::Project::ComponentLister
      - std::stringstream
      - std::count
      - yaml


  - name: get_component_quintessence_full_filename
    type: std::string
    private: true
    guards: [ component ]
    body: |
      std::string project_root = component->get_project_root();
      std::string component_name = component->get_name();
      Blast::ProjectComponentFileTypes::project_file_type_t type = Blast::ProjectComponentFileTypes::QUINTESSENCE_FILE;
      std::string filename = Blast::ProjectComponentFilenameGenerator(component_name, type).generate_filename();
      std::string full_filename = project_root + filename;
      return full_filename;
    body_dependency_symbols:
      - Blast::ProjectComponentFilenameGenerator
      - Blast::ProjectComponentFileTypes


dependencies:


  - symbol: Blast::ProjectComponentFileTypes
    headers: [ Blast/ProjectComponentFileTypes.hpp ]
  - symbol: Blast::ProjectComponentFilenameGenerator
    headers: [ Blast/ProjectComponentFilenameGenerator.hpp ]
  - symbol: Blast::Project::ComponentLister
    headers: [ Blast/Project/ComponentLister.hpp ]
  - symbol: Blast::Project::Component*
    headers: [ Blast/Project/Component.hpp ]
  - symbol: std::vector<std::string>
    headers: [ vector, string ]
  - symbol: std::count
    headers: [ algorithm ]
  - symbol: std::stringstream
    headers: [ sstream ]
  - symbol: yaml
    headers: [ yaml-cpp/yaml.h ]


