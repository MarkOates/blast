properties:


  - name: name
    type: std::string
    init_with: "\"Unnamed/Component\""
    constructor_arg: true
    getter: true
  - name: project_root
    type: std::string
    init_with: "\"\""
    constructor_arg: true
    getter: true


functions:


  - name: generate_full_path_test_binary_filename
    type: std::string
    body: |
      std::string filename = Blast::ProjectComponentFilenameGenerator(
            name,
            Blast::ProjectComponentFileTypes::TEST_EXECUTABLE_FILE
         ).generate_filename();

      return project_root + filename;
    body_dependency_symbols:
      - Blast::ProjectComponentFilenameGenerator
      - Blast::ProjectComponentFileTypes


  - name: list_existing_component_files
    type: std::vector<std::string>
    body: |
      std::vector<std::string> result;

      std::time_t most_recent_file_write_time = 0;
      std::vector<Blast::ProjectComponentFileTypes::project_file_type_t> types_to_scan_for = {
         Blast::ProjectComponentFileTypes::QUINTESSENCE_FILE,
         Blast::ProjectComponentFileTypes::SOURCE_FILE,
         Blast::ProjectComponentFileTypes::HEADER_FILE,
         Blast::ProjectComponentFileTypes::TEST_SOURCE_FILE,
         Blast::ProjectComponentFileTypes::EXAMPLE_SOURCE_FILE,
         Blast::ProjectComponentFileTypes::DOCUMENTATION_FILE,
         //Blast::ProjectComponentFileTypes::OBJECT_FILE,
         //Blast::ProjectComponentFileTypes::TEST_OBJECT_FILE,
         //Blast::ProjectComponentFileTypes::TEST_BINARY, // should this be TEST_EXECUTABLE
         //Blast::ProjectComponentFileTypes::EXAMPLE_OBJECT_FILE,
         //Blast::ProjectComponentFileTypes::EXAMPLE_BINARY, // should this be TEST_EXECUTABLE
      };

      for (auto &type_to_scan_for : types_to_scan_for)
      {
         std::string filename = Blast::ProjectComponentFilenameGenerator(name, type_to_scan_for).generate_filename();
         std::string full_filename = project_root + filename;
         bool exists = Blast::FileExistenceChecker(full_filename).exists();

         if (exists) result.push_back(full_filename);
      }

      return result;


  - name: last_write_time
    type: std::time_t
    body: |
      std::time_t most_recent_file_write_time = 0;

      std::vector<Blast::ProjectComponentFileTypes::project_file_type_t> types_to_scan_for = {
         Blast::ProjectComponentFileTypes::QUINTESSENCE_FILE,
         Blast::ProjectComponentFileTypes::SOURCE_FILE,
         Blast::ProjectComponentFileTypes::HEADER_FILE,
         Blast::ProjectComponentFileTypes::TEST_SOURCE_FILE,
         Blast::ProjectComponentFileTypes::EXAMPLE_SOURCE_FILE,
         Blast::ProjectComponentFileTypes::DOCUMENTATION_FILE,
         //Blast::ProjectComponentFileTypes::OBJECT_FILE,
         //Blast::ProjectComponentFileTypes::TEST_BINARY,
         //Blast::ProjectComponentFileTypes::EXAMPLE_BINARY,
      };

      for (auto &type_to_scan_for : types_to_scan_for)
      {
         std::string filename = Blast::ProjectComponentFilenameGenerator(name, type_to_scan_for).generate_filename();
         std::string full_filename = project_root + filename;
         if (Blast::FileExistenceChecker(full_filename).exists())
         {
            std::time_t this_file_last_write_time = Blast::FileLastWriteTime(full_filename).last_write_time();
            if (this_file_last_write_time > most_recent_file_write_time)
            {
               most_recent_file_write_time = this_file_last_write_time;
            }
         }
      }

      return most_recent_file_write_time;
    body_dependency_symbols:
      - Blast::FileLastWriteTime
      - Blast::ProjectComponentFilenameGenerator


  - name: check_fragment_file_last_write_time
    static: true
    type: std::time_t
    parameters:
      - name: project_root
        type: std::string
        default_argument: '"[unset-project_root]"'
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
      - name: fragment_type
        type: Blast::ProjectComponentFileTypes::project_file_type_t
        default_argument: Blast::ProjectComponentFileTypes::QUINTESSENCE_FILE
    body: |
      std::string fragment_filename = Blast::ProjectComponentFilenameGenerator(name, fragment_type).generate_filename();
      std::string full_filename = project_root + fragment_filename;
      if (!Blast::FileExistenceChecker(full_filename).exists())
      {
         return 0;
      }
      return Blast::FileLastWriteTime(full_filename).last_write_time();

      //if (!Blast::FileExistenceChecker(full_filename).exists())
      //{
         // TODO: Something if this file does not exist
         //std::time_t this_file_last_write_time = Blast::FileLastWriteTime(full_filename).last_write_time();
         //if (this_file_last_write_time > most_recent_file_write_time)
         //{
            //most_recent_file_write_time = this_file_last_write_time;
         //}
      //}
      //return;


  - name: check_file_existence
    type: bool
    private: true
    parameters:
      - name: type
        type: Blast::ProjectComponentFileTypes::project_file_type_t
        default_argument: Blast::ProjectComponentFileTypes::QUINTESSENCE_FILE
    body: |
      std::string filename = Blast::ProjectComponentFilenameGenerator(name, type).generate_filename();
      std::string full_filename = project_root + filename;

      //std::cout << std::endl;
      //std::cout << "## " << full_filename << std::endl;

      return Blast::FileExistenceChecker(full_filename).exists();
    body_dependency_symbols:
      - std::cout
      - Blast::ProjectComponentFilenameGenerator
      - Blast::ProjectComponentFileTypes
      - Blast::FileExistenceChecker


  - name: exists
    type: bool
    body: |
      std::vector<Blast::ProjectComponentFileTypes::project_file_type_t> types_to_scan_for = {
         Blast::ProjectComponentFileTypes::QUINTESSENCE_FILE,
         Blast::ProjectComponentFileTypes::SOURCE_FILE,
         Blast::ProjectComponentFileTypes::HEADER_FILE,
         Blast::ProjectComponentFileTypes::TEST_SOURCE_FILE,
         Blast::ProjectComponentFileTypes::EXAMPLE_SOURCE_FILE,
         Blast::ProjectComponentFileTypes::DOCUMENTATION_FILE,
         //Blast::ProjectComponentFileTypes::OBJECT_FILE,
         //Blast::ProjectComponentFileTypes::TEST_BINARY,
         //Blast::ProjectComponentFileTypes::EXAMPLE_BINARY,
      };

      for (auto &type_to_scan_for : types_to_scan_for)
      {
         if (check_file_existence(type_to_scan_for)) return true;
      }
      return false;
    body_dependency_symbols:
      - Blast::ProjectComponentFileTypes
      - vector


  - name: has_quintessence
    type: bool
    body: |
      return check_file_existence(Blast::ProjectComponentFileTypes::QUINTESSENCE_FILE);
    body_dependency_symbols:
      - Blast::ProjectComponentFileTypes


  - name: has_only_source_and_header
    type: bool
    body: |
      return (
        !has_quintessence()
        && check_file_existence(Blast::ProjectComponentFileTypes::SOURCE_FILE)
        && check_file_existence(Blast::ProjectComponentFileTypes::HEADER_FILE)
      );
    body_dependency_symbols:
      - Blast::ProjectComponentFileTypes


  - name: has_test
    type: bool
    body: |
      return check_file_existence(Blast::ProjectComponentFileTypes::TEST_SOURCE_FILE);
    body_dependency_symbols:
      - Blast::ProjectComponentFileTypes


  - name: has_documentation
    type: bool
    body: |
      return check_file_existence(Blast::ProjectComponentFileTypes::DOCUMENTATION_FILE);
    body_dependency_symbols:
      - Blast::ProjectComponentFileTypes


  - name: read_symlinks
    type: std::vector<std::pair<std::string, std::string>>
    body: |
      std::vector<std::string> existing_filenames = list_existing_component_files();
      std::vector<std::pair<std::string, std::string>> result = {};

      for (auto &filename : existing_filenames)
      {
         Blast::Project::SymlinkChecker symlink_checker(filename);
         bool is_symlink = symlink_checker.is_symlink();
         if (is_symlink)
         {
            std::string symlink_target = symlink_checker.read_symlink_target();
            result.push_back({ filename, symlink_target });
         }
      }

      return result;
    body_dependency_symbols:
      - Blast::Project::SymlinkChecker


dependencies:


  - symbol: vector
    headers: [ vector ]
  - symbol: std::vector<std::pair<std::string, std::string>>
    headers: [ vector, utility, string ]
  - symbol: Blast::ProjectComponentFileTypes::project_file_type_t
    headers: [ Blast/ProjectComponentFileTypes.hpp ]
  - symbol: Blast::ProjectComponentFileTypes::project_file_type_t
    headers: [ Blast/ProjectComponentFileTypes.hpp ]
  - symbol: Blast::ProjectComponentFilenameGenerator
    headers: [ Blast/ProjectComponentFilenameGenerator.hpp ]
  - symbol: Blast::ProjectComponentFileTypes
    headers: [ Blast/ProjectComponentFileTypes.hpp ]
  - symbol: Blast::FileExistenceChecker
    headers: [ Blast/FileExistenceChecker.hpp ]
  - symbol: Blast::Project::SymlinkChecker
    headers: [ Blast/Project/SymlinkChecker.hpp ]
  - symbol: Blast::FileLastWriteTime
    headers: [ Blast/FileLastWriteTime.hpp ]
  - symbol: std::time_t
    headers: [ ctime ]
