properties:
  - name: name
    type: std::string
    init_with: "\"Unnamed/Component\""
    constructor_arg: true
    getter: true
  - name: project_root
    type: std::string
    init_with: "\"/Users/markoates/Repos/blast/\""
    constructor_arg: true
    getter: true


functions:
  - name: generate_full_path_test_binary_filename
    type: std::string
    body: |
      std::string filename = Blast::ProjectComponentFilenameGenerator(name, Blast::ProjectComponentFileTypes::TEST_FILE).generate_filename();
      return project_root + filename;
    body_dependency_symbols:
      - Blast::ProjectComponentFilenameGenerator
      - Blast::ProjectComponentFileTypes
       
  - name: check_file_existence
    type: bool
    private: true
    parameters:
      - name: type
        type: Blast::ProjectComponentFileTypes::project_file_type_t
        default_argument: Blast::ProjectComponentFileTypes::QUINTESSENCE_FILE
    body: |
      std::string filename = Blast::ProjectComponentFilenameGenerator(name, type).generate_filename();
      std::string full_filename = project_root + filename;
      return Blast::FileExistenceChecker(full_filename).exists();
    body_dependency_symbols:
      - Blast::ProjectComponentFilenameGenerator
      - Blast::ProjectComponentFileTypes
      - Blast::FileExistenceChecker

  - name: exists
    type: bool
    body: |
      std::vector<Blast::ProjectComponentFileTypes::project_file_type_t> types_to_scan_for = {
         Blast::ProjectComponentFileTypes::QUINTESSENCE_FILE,
         Blast::ProjectComponentFileTypes::SOURCE_FILE,
         Blast::ProjectComponentFileTypes::HEADER_FILE,
         Blast::ProjectComponentFileTypes::TEST_FILE,
         Blast::ProjectComponentFileTypes::EXAMPLE_FILE,
         //Blast::ProjectComponentFileTypes::OBJECT_FILE,
         //Blast::ProjectComponentFileTypes::TEST_BINARY,
         //Blast::ProjectComponentFileTypes::EXAMPLE_BINARY,
      };

      for (auto &type_to_scan_for : types_to_scan_for)
      {
         if (check_file_existence(type_to_scan_for)) return true;
      }
      return false;
    body_dependency_symbols:
      - Blast::ProjectComponentFileTypes
      - vector

  - name: has_quintessence
    type: bool
    body: |
      return check_file_existence(Blast::ProjectComponentFileTypes::QUINTESSENCE_FILE);
    body_dependency_symbols:
      - Blast::ProjectComponentFileTypes

  - name: has_only_source_and_header
    type: bool
    body: |
      return (
        !has_quintessence()
        && check_file_existence(Blast::ProjectComponentFileTypes::SOURCE_FILE)
        && check_file_existence(Blast::ProjectComponentFileTypes::HEADER_FILE)
      );
    body_dependency_symbols:
      - Blast::ProjectComponentFileTypes

  - name: has_test
    type: bool
    body: |
      return check_file_existence(Blast::ProjectComponentFileTypes::TEST_FILE);
    body_dependency_symbols:
      - Blast::ProjectComponentFileTypes


dependencies:
  - symbol: vector
    headers: [ vector ]
  - symbol: Blast::ProjectComponentFileTypes::project_file_type_t
    headers: [ Blast/ProjectComponentFileTypes.hpp ]
  - symbol: Blast::ProjectComponentFileTypes::project_file_type_t
    headers: [ Blast/ProjectComponentFileTypes.hpp ]
  - symbol: Blast::ProjectComponentFilenameGenerator
    headers: [ Blast/ProjectComponentFilenameGenerator.hpp ]
  - symbol: Blast::ProjectComponentFileTypes
    headers: [ Blast/ProjectComponentFileTypes.hpp ]
  - symbol: Blast::FileExistenceChecker
    headers: [ Blast/FileExistenceChecker.hpp ]
