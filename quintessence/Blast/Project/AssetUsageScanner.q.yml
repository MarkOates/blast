properties:


  - name: project_directory
    type: std::string
    init_with: '"/Users/markoates/Repos/SomePlatformer"'
    constructor_arg: true
    getter: true
    setter: true


methods:


  - name: get_git_command
    type: std::string
    guards: [ 'std::filesystem::exists(project_directory)' ]
    body: |
      std::stringstream command;
      command << "(cd " << project_directory << " && "
                 << "git grep --untracked --break \"asset_studio::\" "
                 << "\":(exclude)./documentation/*\" "
                 << "\":(exclude)./include/lib/*\" "
                 << "\":(exclude)./project_files/*\" "
                 << "\":(exclude)./tmp/*\" "
                 << "\":(exclude)./scripts/*\" "
                 << "\":(exclude)./tests/*\" " // NOTE: Excluding tests, consider removing this exclusion
              << ")"
              ;
      return command.str();
    body_dependency_symbols:
      - std::filesystem
      - std::stringstream


  - name: build_comma_separated_unique_asset_identifier_list
    type: std::string
    static: true
    parameters:
      - name: asset_studio_data
        type: std::vector<std::pair<std::string, std::string>>*
        default_argument: nullptr
    guards: [ asset_studio_data ]
    body: |
      //std::ostringstream result_stream;
      //auto &extracted_data = *asset_studio_data;

      //for (size_t i = 0; i < extracted_data.size(); i++)
      //{
         //result_stream << "\"" << extracted_data[i].second << "\"";
         //if (i < extracted_data.size() - 1)
         //{
            //result_stream << " ";
         //}
      //}


      if (!asset_studio_data) return "";

      std::ostringstream result_stream;
      std::set<std::string> unique_items;

      // Extract unique elements
      for (const auto &entry : *asset_studio_data)
      {
         unique_items.insert(entry.second);
      }

      // Format as quoted strings
      auto it = unique_items.begin();
      while (it != unique_items.end())
      {
         result_stream << "\"" << *it << "\"";
         if (++it != unique_items.end())
         {
            result_stream << " ";
         }
      }

      return result_stream.str();

      //return result_stream.str();
    body_dependency_symbols:
      - std::set
      - std::ostringstream


  - name: extract_asset_studio_data
    type: std::vector<std::pair<std::string, std::string>>
    static: true
    parameters:
      - name: lines
        type: std::vector<std::string>*
        default_argument: nullptr
    guards: [ lines ]
    body: |
       std::vector<std::pair<std::string, std::string>> results;
       std::regex asset_regex(R"(asset_studio::([^\"}]+))");

       for (const std::string &line : *lines)
       {
          std::smatch match;
          if (std::regex_search(line, match, asset_regex))
          {
             std::string full_match = match.str(0);
             std::string trimmed_match = match.str(1);
             results.emplace_back(full_match, trimmed_match);
          }
       }
       return results;
    body_dependency_symbols:
      - std::regex
      - std::regex_search


  - name: check_for_prefixed_assets
    type: std::pair<bool, std::vector<std::string>>
    body: |
      Blast::ShellCommandExecutorWithCallback executor(
            get_git_command(),
            ShellCommandExecutorWithCallback::simple_silent_callback
         );
      std::string execution_result = executor.execute();
      std::vector<std::string> tokens = Blast::StringSplitter(execution_result, '\n').split();
      tokens = remove_empty(trim_each(tokens));

      return { tokens.empty(), tokens };
    body_dependency_symbols:
      - Blast::StringSplitter
      - Blast::ShellCommandExecutorWithCallback
      - Blast::String::Trimmer


  - name: trim_each
    type: std::vector<std::string>
    static: true
    parameters:
      - name: tokens
        type: std::vector<std::string>
        default_argument: '{}'
    body: |
      for (auto &s : tokens)
      {
         // ltrim
         s.erase(s.begin(), std::find_if(s.begin(), s.end(), [](int c) {return !std::isspace(c);}));
         // rtrim
         s.erase(std::find_if(s.rbegin(), s.rend(), [](int c) {return !std::isspace(c);}).base(), s.end());
      }
      return tokens;
    body_dependency_symbols:
      - std::find_if


  - name: remove_empty
    static: true
    private: true
    type: std::vector<std::string>
    parameters:
      - name: strVector
        type: std::vector<std::string>
        default_argument: '{}'
    body: |
      // Use the erase-remove idiom to remove empty strings
      strVector.erase(
            std::remove_if(strVector.begin(), strVector.end(), [](const std::string& str)
                  {
                     return str.empty();
                  }),
                  strVector.end());
      return strVector;


dependencies:


  - symbol: Blast::ShellCommandExecutorWithCallback
    headers: [ Blast/ShellCommandExecutorWithCallback.hpp ]
  - symbol: Blast::String::Trimmer
    headers: [ Blast/String/Trimmer.hpp ]
  - symbol: Blast::StringSplitter
    headers: [ Blast/StringSplitter.hpp ]
  - symbol: std::find_if
    headers: [ algorithm ]
  - symbol: std::regex
    headers: [ regex ]
  - symbol: std::regex_search
    headers: [ regex ]
  - symbol: Blast::StringJoiner
    headers: [ Blast/StringJoiner.hpp ]
  - symbol: std::ostringstream
    headers: [ sstream ]


