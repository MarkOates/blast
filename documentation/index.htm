<!DOCTYPE html>
<head>
<style>
*
{
  font-family: 'Arial';
  padding: 3px 20px;
}
table td
{
  padding: 3px 20px;
}
.property
{
  color: blue;
}
.private_property
{
  color: lightblue;
}

.method
{
  color: red;
}

.private_method
{
  color: pink;
}

.dependency
{
  color: green;
}

.component
{
  padding: 20 10 20 10;
  margin: 20 10 20 10;
  background-color: #dfdfdf;
}

.component h3
{
}
</style>
</head>
<body>
<h1>TOC</h1>
<ul>
  <li><a href="#quintessence/Blast/BinaryObfusicator.q.yml">quintessence/Blast/BinaryObfusicator.q.yml</a></li>
  <li><a href="#quintessence/Blast/Build/Celebrator.q.yml">quintessence/Blast/Build/Celebrator.q.yml</a></li>
  <li><a href="#quintessence/Blast/CamelCaseToUnderscoreConverter.q.yml">quintessence/Blast/CamelCaseToUnderscoreConverter.q.yml</a></li>
  <li><a href="#quintessence/Blast/Cpp/Function.q.yml">quintessence/Blast/Cpp/Function.q.yml</a></li>
  <li><a href="#quintessence/Blast/DirectoryCreator.q.yml">quintessence/Blast/DirectoryCreator.q.yml</a></li>
  <li><a href="#quintessence/Blast/DirectoryExistenceChecker.q.yml">quintessence/Blast/DirectoryExistenceChecker.q.yml</a></li>
  <li><a href="#quintessence/Blast/FileCreator.q.yml">quintessence/Blast/FileCreator.q.yml</a></li>
  <li><a href="#quintessence/Blast/FileExistenceChecker.q.yml">quintessence/Blast/FileExistenceChecker.q.yml</a></li>
  <li><a href="#quintessence/Blast/FileLastWriteTime.q.yml">quintessence/Blast/FileLastWriteTime.q.yml</a></li>
  <li><a href="#quintessence/Blast/Inflector.q.yml">quintessence/Blast/Inflector.q.yml</a></li>
  <li><a href="#quintessence/Blast/Project/ActionCreator.q.yml">quintessence/Blast/Project/ActionCreator.q.yml</a></li>
  <li><a href="#quintessence/Blast/Project/Component.q.yml">quintessence/Blast/Project/Component.q.yml</a></li>
  <li><a href="#quintessence/Blast/Project/ComponentBasenameExtractor.q.yml">quintessence/Blast/Project/ComponentBasenameExtractor.q.yml</a></li>
  <li><a href="#quintessence/Blast/Project/ComponentCreator.q.yml">quintessence/Blast/Project/ComponentCreator.q.yml</a></li>
  <li><a href="#quintessence/Blast/Project/ComponentLister.q.yml">quintessence/Blast/Project/ComponentLister.q.yml</a></li>
  <li><a href="#quintessence/Blast/Project/ComponentRelativeLister.q.yml">quintessence/Blast/Project/ComponentRelativeLister.q.yml</a></li>
  <li><a href="#quintessence/Blast/Project/ProgramLister.q.yml">quintessence/Blast/Project/ProgramLister.q.yml</a></li>
  <li><a href="#quintessence/Blast/Project/ProjectSymlinkFixer.q.yml">quintessence/Blast/Project/ProjectSymlinkFixer.q.yml</a></li>
  <li><a href="#quintessence/Blast/Project/SourceReleaseBuilder.q.yml">quintessence/Blast/Project/SourceReleaseBuilder.q.yml</a></li>
  <li><a href="#quintessence/Blast/Project/SymlinkChecker.q.yml">quintessence/Blast/Project/SymlinkChecker.q.yml</a></li>
  <li><a href="#quintessence/Blast/RegexMatcher.q.yml">quintessence/Blast/RegexMatcher.q.yml</a></li>
  <li><a href="#quintessence/Blast/ShellCommandExecutorWithCallback.q.yml">quintessence/Blast/ShellCommandExecutorWithCallback.q.yml</a></li>
  <li><a href="#quintessence/Blast/SimpleTextSearcher.q.yml">quintessence/Blast/SimpleTextSearcher.q.yml</a></li>
  <li><a href="#quintessence/Blast/String/Trimmer.q.yml">quintessence/Blast/String/Trimmer.q.yml</a></li>
  <li><a href="#quintessence/Blast/StringSplitter.q.yml">quintessence/Blast/StringSplitter.q.yml</a></li>
  <li><a href="#quintessence/Blast/StringUpcaser.q.yml">quintessence/Blast/StringUpcaser.q.yml</a></li>
  <li><a href="#quintessence/Blast/TaoTeChingQuoteGenerator.q.yml">quintessence/Blast/TaoTeChingQuoteGenerator.q.yml</a></li>
  <li><a href="#quintessence/Blast/TemplatedFile.q.yml">quintessence/Blast/TemplatedFile.q.yml</a></li>
  <li><a href="#quintessence/DirectoryFileHasher.q.yml">quintessence/DirectoryFileHasher.q.yml</a></li>
</ul>
<h1>Components</h1>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/BinaryObfusicator.q.yml">quintessence/Blast/BinaryObfusicator.q.yml</h3>
     <table>
    </table>
     <table>
<tr>
  <td class="method">run()</td>
</tr>
    </table>
     <table>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/Build/Celebrator.q.yml">quintessence/Blast/Build/Celebrator.q.yml</h3>
     <table>
    </table>
     <table>
<tr>
  <td class="method">generate_full_width_output_banner(2)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::setfill&quot;, &quot;headers&quot;=&gt;[&quot;iomanip&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::setw&quot;, &quot;headers&quot;=&gt;[&quot;iomanip&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/CamelCaseToUnderscoreConverter.q.yml">quintessence/Blast/CamelCaseToUnderscoreConverter.q.yml</h3>
     <table>
<tr>
  <td class="property">str</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">convert_to_underscores()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::transform&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;isupper&quot;, &quot;headers&quot;=&gt;[&quot;cctype&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;islower&quot;, &quot;headers&quot;=&gt;[&quot;cctype&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/Cpp/Function.q.yml">quintessence/Blast/Cpp/Function.q.yml</h3>
     <table>
<tr>
  <td class="property">type</td>
  <td class="property"></td>
</tr>
<tr>
  <td class="property">name</td>
  <td class="property"></td>
</tr>
<tr>
  <td class="property">signature</td>
  <td class="property">std::vector&lt;Blast::Cpp::FunctionArgument&gt;</td>
</tr>
<tr>
  <td class="property">body</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">is_static</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">is_const</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">is_override</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">is_virtual</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">is_pure_virtual</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;Blast::Cpp::FunctionArgument&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Blast/Cpp/FunctionArgument.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/DirectoryCreator.q.yml">quintessence/Blast/DirectoryCreator.q.yml</h3>
     <table>
<tr>
  <td class="property">directory_components</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">path_is_absolute</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">create(0)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;bool&quot;, &quot;headers&quot;=&gt;[], &quot;include_directories&quot;=&gt;[], &quot;linked_libraries&quot;=&gt;[]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::string&quot;, &quot;headers&quot;=&gt;[&quot;string&quot;], &quot;include_directories&quot;=&gt;[], &quot;linked_libraries&quot;=&gt;[]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::string&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;], &quot;include_directories&quot;=&gt;[], &quot;linked_libraries&quot;=&gt;[]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;mkdir&quot;, &quot;headers&quot;=&gt;[&quot;sys/stat.h&quot;], &quot;include_directories&quot;=&gt;[], &quot;linked_libraries&quot;=&gt;[]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::stringstream&quot;, &quot;headers&quot;=&gt;[&quot;sstream&quot;], &quot;include_directories&quot;=&gt;[], &quot;linked_libraries&quot;=&gt;[]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::DirectoryExistenceChecker&quot;, &quot;headers&quot;=&gt;[&quot;Blast/DirectoryExistenceChecker.hpp&quot;], &quot;include_directories&quot;=&gt;[], &quot;linked_libraries&quot;=&gt;[]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/DirectoryExistenceChecker.q.yml">quintessence/Blast/DirectoryExistenceChecker.q.yml</h3>
     <table>
<tr>
  <td class="property">directory_name</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">exists(0)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;stat&quot;, &quot;headers&quot;=&gt;[&quot;sys/stat.h&quot;], &quot;include_directories&quot;=&gt;[], &quot;linked_libraries&quot;=&gt;[]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::string&quot;, &quot;headers&quot;=&gt;[&quot;string&quot;], &quot;include_directories&quot;=&gt;[], &quot;linked_libraries&quot;=&gt;[]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/FileCreator.q.yml">quintessence/Blast/FileCreator.q.yml</h3>
     <table>
<tr>
  <td class="property">filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">initial_content</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">create_if_not_exists()</td>
</tr>
<tr>
  <td class="method">create_or_overwrite()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::ofstream&quot;, &quot;headers&quot;=&gt;[&quot;fstream&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/FileExistenceChecker.q.yml">quintessence/Blast/FileExistenceChecker.q.yml</h3>
     <table>
<tr>
  <td class="property">filename</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">exists()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::filesystem::exists&quot;, &quot;headers&quot;=&gt;[&quot;filesystem&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/FileLastWriteTime.q.yml">quintessence/Blast/FileLastWriteTime.q.yml</h3>
     <table>
<tr>
  <td class="property">filename</td>
  <td class="property"></td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">last_write_time()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::filesystem::last_write_time&quot;, &quot;headers&quot;=&gt;[&quot;filesystem&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;decltype(T)::clock::to_time_t(T)&quot;, &quot;headers&quot;=&gt;[&quot;ctime&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::time_t&quot;, &quot;headers&quot;=&gt;[&quot;ctime&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/Inflector.q.yml">quintessence/Blast/Inflector.q.yml</h3>
     <table>
<tr>
  <td class="property">word</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">pluralize()</td>
</tr>
<tr>
  <td class="method">build_inflections_list()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::RegexMatcher&quot;, &quot;headers&quot;=&gt;[&quot;Blast/RegexMatcher.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::tuple&lt;std::string, std::string, std::regex_constants::syntax_option_type&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;tuple&quot;, &quot;string&quot;, &quot;regex&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/Project/ActionCreator.q.yml">quintessence/Blast/Project/ActionCreator.q.yml</h3>
     <table>
<tr>
  <td class="property">parent_component</td>
  <td class="property">Blast::Project::Component</td>
</tr>
<tr>
  <td class="property">action_name_snake_case</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="private_method">generate_action_name_camel_case()</td>
</tr>
<tr>
  <td class="private_method">generate_action_name_identifier_constant()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Project::Component&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Project/Component.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/Project/Component.q.yml">quintessence/Blast/Project/Component.q.yml</h3>
     <table>
<tr>
  <td class="property">name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">project_root</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">generate_full_path_test_binary_filename()</td>
</tr>
<tr>
  <td class="method">list_existing_component_files()</td>
</tr>
<tr>
  <td class="method">last_write_time()</td>
</tr>
<tr>
  <td class="private_method">check_file_existence(1)</td>
</tr>
<tr>
  <td class="method">exists()</td>
</tr>
<tr>
  <td class="method">has_quintessence()</td>
</tr>
<tr>
  <td class="method">has_only_source_and_header()</td>
</tr>
<tr>
  <td class="method">has_test()</td>
</tr>
<tr>
  <td class="method">read_symlinks()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;vector&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;utility&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ProjectComponentFileTypes::project_file_type_t&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ProjectComponentFileTypes.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ProjectComponentFileTypes::project_file_type_t&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ProjectComponentFileTypes.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ProjectComponentFilenameGenerator&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ProjectComponentFilenameGenerator.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ProjectComponentFileTypes&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ProjectComponentFileTypes.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::FileExistenceChecker&quot;, &quot;headers&quot;=&gt;[&quot;Blast/FileExistenceChecker.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Project::SymlinkChecker&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Project/SymlinkChecker.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::FileLastWriteTime&quot;, &quot;headers&quot;=&gt;[&quot;Blast/FileLastWriteTime.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::time_t&quot;, &quot;headers&quot;=&gt;[&quot;ctime&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/Project/ComponentBasenameExtractor.q.yml">quintessence/Blast/Project/ComponentBasenameExtractor.q.yml</h3>
     <table>
<tr>
  <td class="property">filename</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">identify_file_type()</td>
</tr>
<tr>
  <td class="method">identify_component_basename()</td>
</tr>
<tr>
  <td class="method">extract_component()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::pair&lt;std::string, std::string&gt;&quot;, &quot;headers&quot;=&gt;[&quot;string&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/Project/ComponentCreator.q.yml">quintessence/Blast/Project/ComponentCreator.q.yml</h3>
     <table>
    </table>
     <table>
<tr>
  <td class="method">get_quintessence_file_default_content()</td>
</tr>
<tr>
  <td class="method">generate()</td>
</tr>
    </table>
     <table>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/Project/ComponentLister.q.yml">quintessence/Blast/Project/ComponentLister.q.yml</h3>
     <table>
<tr>
  <td class="property">project_root_directory</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="private_method">get_component_fragment_folder_name(1)</td>
</tr>
<tr>
  <td class="private_method">get_component_fragment_extension(1)</td>
</tr>
<tr>
  <td class="private_method">get_components_of_fragment_type(2)</td>
</tr>
<tr>
  <td class="method">components_sorted_by_most_recent()</td>
</tr>
<tr>
  <td class="method">components()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Project::Component&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Project/Component.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Project::component_fragment_t&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Project/ComponentFragmentTypeEnum.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ShellCommandExecutorWithCallback&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ShellCommandExecutorWithCallback.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Project::ComponentBasenameExtractor&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Project/ComponentBasenameExtractor.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;StringSplitter&quot;, &quot;headers&quot;=&gt;[&quot;Blast/StringSplitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::time_t&quot;, &quot;headers&quot;=&gt;[&quot;ctime&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::unique&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::reverse&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::sort&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/Project/ComponentRelativeLister.q.yml">quintessence/Blast/Project/ComponentRelativeLister.q.yml</h3>
     <table>
<tr>
  <td class="property">component</td>
  <td class="property">Blast::Project::Component*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">list_component_relative_names()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Project::ComponentLister&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Project/ComponentLister.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Project::Component*&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Project/Component.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::string&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::count&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::stringstream&quot;, &quot;headers&quot;=&gt;[&quot;sstream&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/Project/ProgramLister.q.yml">quintessence/Blast/Project/ProgramLister.q.yml</h3>
     <table>
<tr>
  <td class="property">project_root</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">build_program_lister_shell_command()</td>
</tr>
<tr>
  <td class="method">program_filenames()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::sort&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ShellCommandExecutorWithCallback&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ShellCommandExecutorWithCallback.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;StringSplitter&quot;, &quot;headers&quot;=&gt;[&quot;Blast/StringSplitter.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/Project/ProjectSymlinkFixer.q.yml">quintessence/Blast/Project/ProjectSymlinkFixer.q.yml</h3>
     <table>
<tr>
  <td class="property">project_folder</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="private_method">starts_with(2)</td>
</tr>
<tr>
  <td class="method">has_one_line(1)</td>
</tr>
<tr>
  <td class="method">read_file_firstline(1)</td>
</tr>
<tr>
  <td class="private_method">likely_an_intended_symlink(2)</td>
</tr>
<tr>
  <td class="method">read_symlink(1)</td>
</tr>
<tr>
  <td class="method">run()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Project::SymlinkChecker&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Project/SymlinkChecker.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::filesystem&quot;, &quot;headers&quot;=&gt;[&quot;filesystem&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::istream_iterator&quot;, &quot;headers&quot;=&gt;[&quot;iterator&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ShellCommandExecutorWithCallback&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ShellCommandExecutorWithCallback.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::cout&quot;, &quot;headers&quot;=&gt;[&quot;iostream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::endl&quot;, &quot;headers&quot;=&gt;[&quot;iostream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::ifstream&quot;, &quot;headers&quot;=&gt;[&quot;fstream&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/Project/SourceReleaseBuilder.q.yml">quintessence/Blast/Project/SourceReleaseBuilder.q.yml</h3>
     <table>
<tr>
  <td class="property">destination_directory</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">project_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">source_project_directory</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">write_file_contents(2)</td>
</tr>
<tr>
  <td class="method">get_makefile_content()</td>
</tr>
<tr>
  <td class="method">get_pinfo_content()</td>
</tr>
<tr>
  <td class="method">copy_file(2)</td>
</tr>
<tr>
  <td class="method">list_symlinks()</td>
</tr>
<tr>
  <td class="method">fix_symlink_targets_from_relative_to_absolute()</td>
</tr>
<tr>
  <td class="method">replace_symlinks_with_copies_of_linked_files()</td>
</tr>
<tr>
  <td class="method">get_source_release_folder_name()</td>
</tr>
<tr>
  <td class="method">get_macos_release_folder_name()</td>
</tr>
<tr>
  <td class="method">get_win64_release_folder_name()</td>
</tr>
<tr>
  <td class="method">generate_macos_release()</td>
</tr>
<tr>
  <td class="method">generate_source_release()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::ifstream&quot;, &quot;headers&quot;=&gt;[&quot;fstream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::ofstream&quot;, &quot;headers&quot;=&gt;[&quot;fstream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::stringstream&quot;, &quot;headers&quot;=&gt;[&quot;sstream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;remove&quot;, &quot;headers&quot;=&gt;[&quot;cstdio&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;StringSplitter&quot;, &quot;headers&quot;=&gt;[&quot;Blast/StringSplitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::DirectoryCreator&quot;, &quot;headers&quot;=&gt;[&quot;Blast/DirectoryCreator.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Project::SymlinkChecker&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Project/SymlinkChecker.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ShellCommandExecutorWithCallback&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ShellCommandExecutorWithCallback.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Project::ProjectSymlinkFixer&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Project/ProjectSymlinkFixer.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/Project/SymlinkChecker.q.yml">quintessence/Blast/Project/SymlinkChecker.q.yml</h3>
     <table>
<tr>
  <td class="property">filename</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">is_symlink()</td>
</tr>
<tr>
  <td class="method">is_symlink__shell_call_impl()</td>
</tr>
<tr>
  <td class="method">read_symlink_target()</td>
</tr>
<tr>
  <td class="method">read_symlink_target__shell_call_impl()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ShellCommandExecutorWithCallback&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ShellCommandExecutorWithCallback.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::stringstream&quot;, &quot;headers&quot;=&gt;[&quot;sstream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::filesystem::path&quot;, &quot;headers&quot;=&gt;[&quot;filesystem&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::filesystem::exists&quot;, &quot;headers&quot;=&gt;[&quot;filesystem&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::filesystem::is_symlink&quot;, &quot;headers&quot;=&gt;[&quot;filesystem&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::filesystem::read_symlink&quot;, &quot;headers&quot;=&gt;[&quot;filesystem&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/RegexMatcher.q.yml">quintessence/Blast/RegexMatcher.q.yml</h3>
     <table>
<tr>
  <td class="property">source_string</td>
  <td class="property"></td>
</tr>
<tr>
  <td class="property">regex_expression</td>
  <td class="property"></td>
</tr>
<tr>
  <td class="property">options</td>
  <td class="property">std::vector&lt;std::regex_constants::syntax_option_type&gt;</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">get_match_info()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::regex_constants::syntax_option_type&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;regex&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::pair&lt;int, int&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::regex&quot;, &quot;headers&quot;=&gt;[&quot;regex&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::regex_iterator&quot;, &quot;headers&quot;=&gt;[&quot;regex&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::smatch&quot;, &quot;headers&quot;=&gt;[&quot;regex&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::regex_error&quot;, &quot;headers&quot;=&gt;[&quot;regex&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::runtime_error&quot;, &quot;headers&quot;=&gt;[&quot;regex&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/ShellCommandExecutorWithCallback.q.yml">quintessence/Blast/ShellCommandExecutorWithCallback.q.yml</h3>
     <table>
<tr>
  <td class="property">command</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">callback</td>
  <td class="property">std::function&lt;void(std::string)&gt;</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">simple_silent_callback(1)</td>
</tr>
<tr>
  <td class="method">simple_cout_callback(1)</td>
</tr>
<tr>
  <td class="method">execute()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::function&lt;void(std::string)&gt;&quot;, &quot;headers&quot;=&gt;[&quot;functional&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;void*&quot;, &quot;headers&quot;=&gt;[&quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;FILE&quot;, &quot;headers&quot;=&gt;[&quot;cstdio&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::string&quot;, &quot;headers&quot;=&gt;[&quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::array&quot;, &quot;headers&quot;=&gt;[&quot;array&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::shared_ptr&quot;, &quot;headers&quot;=&gt;[&quot;memory&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;pipe&quot;, &quot;headers&quot;=&gt;[&quot;cstdio&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;popen&quot;, &quot;headers&quot;=&gt;[&quot;cstdio&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;pclose&quot;, &quot;headers&quot;=&gt;[&quot;cstdio&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;feof&quot;, &quot;headers&quot;=&gt;[&quot;cstdio&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;fgets&quot;, &quot;headers&quot;=&gt;[&quot;cstdio&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::runtime_error&quot;, &quot;headers&quot;=&gt;[&quot;stdexcept&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/SimpleTextSearcher.q.yml">quintessence/Blast/SimpleTextSearcher.q.yml</h3>
     <table>
<tr>
  <td class="property">search_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">elements</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">would_be_included_in_results(1)</td>
</tr>
<tr>
  <td class="method">results()</td>
</tr>
    </table>
     <table>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/String/Trimmer.q.yml">quintessence/Blast/String/Trimmer.q.yml</h3>
     <table>
<tr>
  <td class="property">text</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">trim()</td>
</tr>
<tr>
  <td class="private_method">ltrim(1)</td>
</tr>
<tr>
  <td class="private_method">rtrim(1)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::find_if&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/StringSplitter.q.yml">quintessence/Blast/StringSplitter.q.yml</h3>
     <table>
<tr>
  <td class="property">string</td>
  <td class="property"></td>
</tr>
<tr>
  <td class="property">delimiter</td>
  <td class="property">char</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">split()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;char&quot;, &quot;headers&quot;=&gt;[]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::string&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::stringstream&quot;, &quot;headers&quot;=&gt;[&quot;sstream&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/StringUpcaser.q.yml">quintessence/Blast/StringUpcaser.q.yml</h3>
     <table>
<tr>
  <td class="property">original_text</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">upcase()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::transform&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::toupper&quot;, &quot;headers&quot;=&gt;[&quot;cctype&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/TaoTeChingQuoteGenerator.q.yml">quintessence/Blast/TaoTeChingQuoteGenerator.q.yml</h3>
     <table>
<tr>
  <td class="property">quotes</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">pick_quote()</td>
</tr>
<tr>
  <td class="method">default_quotes_list()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::sample&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::back_inserter&quot;, &quot;headers&quot;=&gt;[&quot;iterator&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::mt19937&quot;, &quot;headers&quot;=&gt;[&quot;random&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::random_device&quot;, &quot;headers&quot;=&gt;[&quot;random&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/TemplatedFile.q.yml">quintessence/Blast/TemplatedFile.q.yml</h3>
     <table>
<tr>
  <td class="property">template_content</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">insertion_variables</td>
  <td class="property">std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;</td>
</tr>
    </table>
     <table>
<tr>
  <td class="private_method">__replace(3)</td>
</tr>
<tr>
  <td class="method">generate_content()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;string&quot;, &quot;vector&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/DirectoryFileHasher.q.yml">quintessence/DirectoryFileHasher.q.yml</h3>
     <table>
    </table>
     <table>
<tr>
  <td class="method">run()</td>
</tr>
    </table>
     <table>
    </table>
  </div>
</ul>
<h1>Dependents</h1>
<pre>
{
  "std/setfill": [
    "Blast/Build/Celebrator"
  ],
  "std/setw": [
    "Blast/Build/Celebrator"
  ],
  "std/transform": [
    "Blast/CamelCaseToUnderscoreConverter",
    "Blast/StringUpcaser"
  ],
  "isupper": [
    "Blast/CamelCaseToUnderscoreConverter"
  ],
  "islower": [
    "Blast/CamelCaseToUnderscoreConverter"
  ],
  "std/vector<Blast/Cpp/FunctionArgument>": [
    "Blast/Cpp/Function"
  ],
  "bool": [
    "Blast/DirectoryCreator"
  ],
  "std/string": [
    "Blast/DirectoryCreator",
    "Blast/DirectoryExistenceChecker",
    "Blast/ShellCommandExecutorWithCallback"
  ],
  "std/vector<std/string>": [
    "Blast/DirectoryCreator",
    "Blast/Project/ComponentRelativeLister",
    "Blast/StringSplitter"
  ],
  "mkdir": [
    "Blast/DirectoryCreator"
  ],
  "std/stringstream": [
    "Blast/DirectoryCreator",
    "Blast/Project/ComponentRelativeLister",
    "Blast/Project/SourceReleaseBuilder",
    "Blast/Project/SymlinkChecker",
    "Blast/StringSplitter"
  ],
  "Blast/DirectoryExistenceChecker": [
    "Blast/DirectoryCreator"
  ],
  "stat": [
    "Blast/DirectoryExistenceChecker"
  ],
  "std/ofstream": [
    "Blast/FileCreator",
    "Blast/Project/SourceReleaseBuilder"
  ],
  "std/filesystem/exists": [
    "Blast/FileExistenceChecker",
    "Blast/Project/SymlinkChecker"
  ],
  "std/filesystem/last_write_time": [
    "Blast/FileLastWriteTime"
  ],
  "decltype(T)/clock/to_time_t(T)": [
    "Blast/FileLastWriteTime"
  ],
  "std/time_t": [
    "Blast/FileLastWriteTime",
    "Blast/Project/Component",
    "Blast/Project/ComponentLister"
  ],
  "Blast/RegexMatcher": [
    "Blast/Inflector"
  ],
  "std/vector<std/tuple<std/string, std/string, std/regex_constants/syntax_option_type>>": [
    "Blast/Inflector"
  ],
  "Blast/Project/Component": [
    "Blast/Project/ActionCreator",
    "Blast/Project/ComponentLister",
    "Blast/Project/ComponentRelativeLister"
  ],
  "vector": [
    "Blast/Project/Component"
  ],
  "std/vector<std/pair<std/string, std/string>>": [
    "Blast/Project/Component",
    "Blast/Project/SourceReleaseBuilder",
    "Blast/TemplatedFile"
  ],
  "Blast/ProjectComponentFileTypes/project_file_type_t": [
    "Blast/Project/Component",
    "Blast/Project/Component"
  ],
  "Blast/ProjectComponentFilenameGenerator": [
    "Blast/Project/Component"
  ],
  "Blast/ProjectComponentFileTypes": [
    "Blast/Project/Component"
  ],
  "Blast/FileExistenceChecker": [
    "Blast/Project/Component"
  ],
  "Blast/Project/SymlinkChecker": [
    "Blast/Project/Component",
    "Blast/Project/ProjectSymlinkFixer",
    "Blast/Project/SourceReleaseBuilder"
  ],
  "Blast/FileLastWriteTime": [
    "Blast/Project/Component"
  ],
  "std/pair<std/string, std/string>": [
    "Blast/Project/ComponentBasenameExtractor"
  ],
  "Blast/Project/component_fragment_t": [
    "Blast/Project/ComponentLister"
  ],
  "Blast/ShellCommandExecutorWithCallback": [
    "Blast/Project/ComponentLister",
    "Blast/Project/ProgramLister",
    "Blast/Project/ProjectSymlinkFixer",
    "Blast/Project/SourceReleaseBuilder",
    "Blast/Project/SymlinkChecker"
  ],
  "Blast/Project/ComponentBasenameExtractor": [
    "Blast/Project/ComponentLister"
  ],
  "StringSplitter": [
    "Blast/Project/ComponentLister",
    "Blast/Project/ProgramLister",
    "Blast/Project/SourceReleaseBuilder"
  ],
  "std/unique": [
    "Blast/Project/ComponentLister"
  ],
  "std/reverse": [
    "Blast/Project/ComponentLister"
  ],
  "std/sort": [
    "Blast/Project/ComponentLister",
    "Blast/Project/ProgramLister"
  ],
  "Blast/Project/ComponentLister": [
    "Blast/Project/ComponentRelativeLister"
  ],
  "std/count": [
    "Blast/Project/ComponentRelativeLister"
  ],
  "std/filesystem": [
    "Blast/Project/ProjectSymlinkFixer"
  ],
  "std/istream_iterator": [
    "Blast/Project/ProjectSymlinkFixer"
  ],
  "std/cout": [
    "Blast/Project/ProjectSymlinkFixer"
  ],
  "std/endl": [
    "Blast/Project/ProjectSymlinkFixer"
  ],
  "std/ifstream": [
    "Blast/Project/ProjectSymlinkFixer",
    "Blast/Project/SourceReleaseBuilder"
  ],
  "remove": [
    "Blast/Project/SourceReleaseBuilder"
  ],
  "Blast/DirectoryCreator": [
    "Blast/Project/SourceReleaseBuilder"
  ],
  "Blast/Project/ProjectSymlinkFixer": [
    "Blast/Project/SourceReleaseBuilder"
  ],
  "std/filesystem/path": [
    "Blast/Project/SymlinkChecker"
  ],
  "std/filesystem/is_symlink": [
    "Blast/Project/SymlinkChecker"
  ],
  "std/filesystem/read_symlink": [
    "Blast/Project/SymlinkChecker"
  ],
  "std/vector<std/regex_constants/syntax_option_type>": [
    "Blast/RegexMatcher"
  ],
  "std/vector<std/pair<int, int>>": [
    "Blast/RegexMatcher"
  ],
  "std/regex": [
    "Blast/RegexMatcher"
  ],
  "std/regex_iterator": [
    "Blast/RegexMatcher"
  ],
  "std/smatch": [
    "Blast/RegexMatcher"
  ],
  "std/regex_error": [
    "Blast/RegexMatcher"
  ],
  "std/runtime_error": [
    "Blast/RegexMatcher",
    "Blast/ShellCommandExecutorWithCallback"
  ],
  "std/function<void(std/string)>": [
    "Blast/ShellCommandExecutorWithCallback"
  ],
  "void": [
    "Blast/ShellCommandExecutorWithCallback"
  ],
  "FILE": [
    "Blast/ShellCommandExecutorWithCallback"
  ],
  "std/array": [
    "Blast/ShellCommandExecutorWithCallback"
  ],
  "std/shared_ptr": [
    "Blast/ShellCommandExecutorWithCallback"
  ],
  "pipe": [
    "Blast/ShellCommandExecutorWithCallback"
  ],
  "popen": [
    "Blast/ShellCommandExecutorWithCallback"
  ],
  "pclose": [
    "Blast/ShellCommandExecutorWithCallback"
  ],
  "feof": [
    "Blast/ShellCommandExecutorWithCallback"
  ],
  "fgets": [
    "Blast/ShellCommandExecutorWithCallback"
  ],
  "std/find_if": [
    "Blast/String/Trimmer"
  ],
  "char": [
    "Blast/StringSplitter"
  ],
  "std/toupper": [
    "Blast/StringUpcaser"
  ],
  "std/sample": [
    "Blast/TaoTeChingQuoteGenerator"
  ],
  "std/back_inserter": [
    "Blast/TaoTeChingQuoteGenerator"
  ],
  "std/mt19937": [
    "Blast/TaoTeChingQuoteGenerator"
  ],
  "std/random_device": [
    "Blast/TaoTeChingQuoteGenerator"
  ]
}
</pre>
</body>