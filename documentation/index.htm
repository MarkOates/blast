<!DOCTYPE html>
<head>
<style>
*
{
  font-family: 'Arial';
  padding: 3px 20px;
}
table td
{
  padding: 3px 20px;
}
.property
{
  color: blue;
}
.private_property
{
  color: lightblue;
}

.method
{
  color: red;
}

.private_method
{
  color: pink;
}

.dependency
{
  color: green;
}

.component
{
  padding: 20 10 20 10;
  margin: 20 10 20 10;
  background-color: #dfdfdf;
}

.component h3
{
}
</style>
</head>
<body>
<h1>TOC</h1>
<ul>
  <li><a href="#quintessence/ASCIICharacterRenderer.q.yml">quintessence/ASCIICharacterRenderer.q.yml</a></li>
  <li><a href="#quintessence/Blast/BinaryObfusicator.q.yml">quintessence/Blast/BinaryObfusicator.q.yml</a></li>
  <li><a href="#quintessence/Blast/Build/Celebrator.q.yml">quintessence/Blast/Build/Celebrator.q.yml</a></li>
  <li><a href="#quintessence/Blast/BuildInfo.q.yml">quintessence/Blast/BuildInfo.q.yml</a></li>
  <li><a href="#quintessence/Blast/BuildInfoBuilder.q.yml">quintessence/Blast/BuildInfoBuilder.q.yml</a></li>
  <li><a href="#quintessence/Blast/BuildInfoCppFileGenerator.q.yml">quintessence/Blast/BuildInfoCppFileGenerator.q.yml</a></li>
  <li><a href="#quintessence/Blast/BuildSystem/BuildFactory.q.yml">quintessence/Blast/BuildSystem/BuildFactory.q.yml</a></li>
  <li><a href="#quintessence/Blast/BuildSystem/BuildStageFactory.q.yml">quintessence/Blast/BuildSystem/BuildStageFactory.q.yml</a></li>
  <li><a href="#quintessence/Blast/BuildSystem/BuildStageRenderer.q.yml">quintessence/Blast/BuildSystem/BuildStageRenderer.q.yml</a></li>
  <li><a href="#quintessence/Blast/BuildSystem/BuildStageRenderers/Base.q.yml">quintessence/Blast/BuildSystem/BuildStageRenderers/Base.q.yml</a></li>
  <li><a href="#quintessence/Blast/BuildSystem/BuildStageRenderers/ShellCommand.q.yml">quintessence/Blast/BuildSystem/BuildStageRenderers/ShellCommand.q.yml</a></li>
  <li><a href="#quintessence/Blast/BuildSystem/BuildStages/Base.q.yml">quintessence/Blast/BuildSystem/BuildStages/Base.q.yml</a></li>
  <li><a href="#quintessence/Blast/BuildSystem/BuildStages/ShellCommand.q.yml">quintessence/Blast/BuildSystem/BuildStages/ShellCommand.q.yml</a></li>
  <li><a href="#quintessence/Blast/BuildSystem/Builds/Base.q.yml">quintessence/Blast/BuildSystem/Builds/Base.q.yml</a></li>
  <li><a href="#quintessence/Blast/BuildSystem/ReportRenderer.q.yml">quintessence/Blast/BuildSystem/ReportRenderer.q.yml</a></li>
  <li><a href="#quintessence/Blast/BuildSystem/ReportRenderers/Base.q.yml">quintessence/Blast/BuildSystem/ReportRenderers/Base.q.yml</a></li>
  <li><a href="#quintessence/Blast/CamelCaseToConstantConverter.q.yml">quintessence/Blast/CamelCaseToConstantConverter.q.yml</a></li>
  <li><a href="#quintessence/Blast/CamelCaseToUnderscoreConverter.q.yml">quintessence/Blast/CamelCaseToUnderscoreConverter.q.yml</a></li>
  <li><a href="#quintessence/Blast/Cpp/EnumClass.q.yml">quintessence/Blast/Cpp/EnumClass.q.yml</a></li>
  <li><a href="#quintessence/Blast/Cpp/EnumClassFormatter.q.yml">quintessence/Blast/Cpp/EnumClassFormatter.q.yml</a></li>
  <li><a href="#quintessence/Blast/Cpp/Function.q.yml">quintessence/Blast/Cpp/Function.q.yml</a></li>
  <li><a href="#quintessence/Blast/Cpp/FunctionBody.q.yml">quintessence/Blast/Cpp/FunctionBody.q.yml</a></li>
  <li><a href="#quintessence/Blast/DependencyHeadersSuggester.q.yml">quintessence/Blast/DependencyHeadersSuggester.q.yml</a></li>
  <li><a href="#quintessence/Blast/DependencySymbolAtomizer.q.yml">quintessence/Blast/DependencySymbolAtomizer.q.yml</a></li>
  <li><a href="#quintessence/Blast/DirectoryCreator.q.yml">quintessence/Blast/DirectoryCreator.q.yml</a></li>
  <li><a href="#quintessence/Blast/DirectoryExistenceChecker.q.yml">quintessence/Blast/DirectoryExistenceChecker.q.yml</a></li>
  <li><a href="#quintessence/Blast/Errors.q.yml">quintessence/Blast/Errors.q.yml</a></li>
  <li><a href="#quintessence/Blast/FileCreator.q.yml">quintessence/Blast/FileCreator.q.yml</a></li>
  <li><a href="#quintessence/Blast/FileExistenceChecker.q.yml">quintessence/Blast/FileExistenceChecker.q.yml</a></li>
  <li><a href="#quintessence/Blast/FileLastWriteTime.q.yml">quintessence/Blast/FileLastWriteTime.q.yml</a></li>
  <li><a href="#quintessence/Blast/Inflector.q.yml">quintessence/Blast/Inflector.q.yml</a></li>
  <li><a href="#quintessence/Blast/Project/ActionCreator.q.yml">quintessence/Blast/Project/ActionCreator.q.yml</a></li>
  <li><a href="#quintessence/Blast/Project/Component.q.yml">quintessence/Blast/Project/Component.q.yml</a></li>
  <li><a href="#quintessence/Blast/Project/ComponentBasenameExtractor.q.yml">quintessence/Blast/Project/ComponentBasenameExtractor.q.yml</a></li>
  <li><a href="#quintessence/Blast/Project/ComponentCreator.q.yml">quintessence/Blast/Project/ComponentCreator.q.yml</a></li>
  <li><a href="#quintessence/Blast/Project/ComponentDependencyLister.q.yml">quintessence/Blast/Project/ComponentDependencyLister.q.yml</a></li>
  <li><a href="#quintessence/Blast/Project/ComponentLister.q.yml">quintessence/Blast/Project/ComponentLister.q.yml</a></li>
  <li><a href="#quintessence/Blast/Project/ComponentRelativeLister.q.yml">quintessence/Blast/Project/ComponentRelativeLister.q.yml</a></li>
  <li><a href="#quintessence/Blast/Project/ProgramLister.q.yml">quintessence/Blast/Project/ProgramLister.q.yml</a></li>
  <li><a href="#quintessence/Blast/Project/ProjectSymlinkFixer.q.yml">quintessence/Blast/Project/ProjectSymlinkFixer.q.yml</a></li>
  <li><a href="#quintessence/Blast/Project/SourceReleaseBuilder.q.yml">quintessence/Blast/Project/SourceReleaseBuilder.q.yml</a></li>
  <li><a href="#quintessence/Blast/Project/SymlinkChecker.q.yml">quintessence/Blast/Project/SymlinkChecker.q.yml</a></li>
  <li><a href="#quintessence/Blast/Quintessence/YAMLParsers/EnumClassParser.q.yml">quintessence/Blast/Quintessence/YAMLParsers/EnumClassParser.q.yml</a></li>
  <li><a href="#quintessence/Blast/Quintessence/YAMLParsers/FunctionArgumentParser.q.yml">quintessence/Blast/Quintessence/YAMLParsers/FunctionArgumentParser.q.yml</a></li>
  <li><a href="#quintessence/Blast/RegexMatcher.q.yml">quintessence/Blast/RegexMatcher.q.yml</a></li>
  <li><a href="#quintessence/Blast/ReleaseInfo.q.yml">quintessence/Blast/ReleaseInfo.q.yml</a></li>
  <li><a href="#quintessence/Blast/ReleaseInfoBuilder.q.yml">quintessence/Blast/ReleaseInfoBuilder.q.yml</a></li>
  <li><a href="#quintessence/Blast/ReleaseInfoCppFileGenerator.q.yml">quintessence/Blast/ReleaseInfoCppFileGenerator.q.yml</a></li>
  <li><a href="#quintessence/Blast/ShellCommandExecutorWithCallback.q.yml">quintessence/Blast/ShellCommandExecutorWithCallback.q.yml</a></li>
  <li><a href="#quintessence/Blast/SimpleTextSearcher.q.yml">quintessence/Blast/SimpleTextSearcher.q.yml</a></li>
  <li><a href="#quintessence/Blast/String/Trimmer.q.yml">quintessence/Blast/String/Trimmer.q.yml</a></li>
  <li><a href="#quintessence/Blast/StringSplitter.q.yml">quintessence/Blast/StringSplitter.q.yml</a></li>
  <li><a href="#quintessence/Blast/StringUpcaser.q.yml">quintessence/Blast/StringUpcaser.q.yml</a></li>
  <li><a href="#quintessence/Blast/SystemInfo.q.yml">quintessence/Blast/SystemInfo.q.yml</a></li>
  <li><a href="#quintessence/Blast/TaoTeChingQuoteGenerator.q.yml">quintessence/Blast/TaoTeChingQuoteGenerator.q.yml</a></li>
  <li><a href="#quintessence/Blast/TemplatedFile.q.yml">quintessence/Blast/TemplatedFile.q.yml</a></li>
  <li><a href="#quintessence/Blast/Testing/TemporaryDirectoryCreator.q.yml">quintessence/Blast/Testing/TemporaryDirectoryCreator.q.yml</a></li>
  <li><a href="#quintessence/Blast/TimeStamper.q.yml">quintessence/Blast/TimeStamper.q.yml</a></li>
  <li><a href="#quintessence/Blast/VersionYAMLLoaderEmitter.q.yml">quintessence/Blast/VersionYAMLLoaderEmitter.q.yml</a></li>
  <li><a href="#quintessence/Blast/YAMLValidator.q.yml">quintessence/Blast/YAMLValidator.q.yml</a></li>
  <li><a href="#quintessence/Checkbox.q.yml">quintessence/Checkbox.q.yml</a></li>
  <li><a href="#quintessence/EpicDarkFont.q.yml">quintessence/EpicDarkFont.q.yml</a></li>
  <li><a href="#quintessence/HostnameExtractor.q.yml">quintessence/HostnameExtractor.q.yml</a></li>
  <li><a href="#quintessence/NcursesArt/GithubRepoStatusFetcher.q.yml">quintessence/NcursesArt/GithubRepoStatusFetcher.q.yml</a></li>
  <li><a href="#quintessence/NcursesArt/Rails/ComponentFilenameGenerator.q.yml">quintessence/NcursesArt/Rails/ComponentFilenameGenerator.q.yml</a></li>
  <li><a href="#quintessence/OrigamiMommyFontLoader.q.yml">quintessence/OrigamiMommyFontLoader.q.yml</a></li>
  <li><a href="#quintessence/ProjectComponentBasenameExtractor.q.yml">quintessence/ProjectComponentBasenameExtractor.q.yml</a></li>
  <li><a href="#quintessence/ProjectFilenameGenerator.q.yml">quintessence/ProjectFilenameGenerator.q.yml</a></li>
  <li><a href="#quintessence/ProjectListBuilder.q.yml">quintessence/ProjectListBuilder.q.yml</a></li>
  <li><a href="#quintessence/Question.q.yml">quintessence/Question.q.yml</a></li>
  <li><a href="#quintessence/Quiz.q.yml">quintessence/Quiz.q.yml</a></li>
  <li><a href="#quintessence/QuizYAMLLoader.q.yml">quintessence/QuizYAMLLoader.q.yml</a></li>
  <li><a href="#quintessence/Quizes/MultiplexQuestion.q.yml">quintessence/Quizes/MultiplexQuestion.q.yml</a></li>
  <li><a href="#quintessence/Quizes/MultiplexQuestionCollectionHelper.q.yml">quintessence/Quizes/MultiplexQuestionCollectionHelper.q.yml</a></li>
  <li><a href="#quintessence/Quizes/MultiplexQuizRunner.q.yml">quintessence/Quizes/MultiplexQuizRunner.q.yml</a></li>
  <li><a href="#quintessence/Quizes/MultiplexSheetLoader.q.yml">quintessence/Quizes/MultiplexSheetLoader.q.yml</a></li>
  <li><a href="#quintessence/SmallFontLoader.q.yml">quintessence/SmallFontLoader.q.yml</a></li>
  <li><a href="#quintessence/StringSplitter.q.yml">quintessence/StringSplitter.q.yml</a></li>
  <li><a href="#quintessence/StringVectorIntersection.q.yml">quintessence/StringVectorIntersection.q.yml</a></li>
  <li><a href="#quintessence/VortexFontLoader.q.yml">quintessence/VortexFontLoader.q.yml</a></li>
  <li><a href="#quintessence/ncurses_art/Backends/Base.q.yml">quintessence/ncurses_art/Backends/Base.q.yml</a></li>
  <li><a href="#quintessence/ncurses_art/Backends/Ncurses.q.yml">quintessence/ncurses_art/Backends/Ncurses.q.yml</a></li>
</ul>
<h1>Components</h1>
<ul>
  <div class="component">
    <h3 id="quintessence/ASCIICharacterRenderer.q.yml">quintessence/ASCIICharacterRenderer.q.yml</h3>
     <table>
    </table>
     <table>
<tr>
  <td class="method">draw_character(std::map&lt;char, std::vector&lt;std::string&gt;&gt; letters=&#39;a&#39;, char c=&#39;a&#39;, int x=0, int y=0)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;char, std::vector&lt;std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;vector&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::string&quot;, &quot;headers&quot;=&gt;[&quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;char&quot;, &quot;headers&quot;=&gt;[]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;mvaddnstr&quot;, &quot;headers&quot;=&gt;[&quot;ncurses.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/BinaryObfusicator.q.yml">quintessence/Blast/BinaryObfusicator.q.yml</h3>
     <table>
    </table>
     <table>
<tr>
  <td class="method">run()</td>
</tr>
    </table>
     <table>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/Build/Celebrator.q.yml">quintessence/Blast/Build/Celebrator.q.yml</h3>
     <table>
    </table>
     <table>
<tr>
  <td class="method">generate_full_width_output_banner(std::string message=&quot;&quot;, int width=80, char fill_char=&#39;=&#39;, std::size_t num_leading_fill_characters=4)</td>
</tr>
<tr>
  <td class="method">generate_pass_banner(int width=80)</td>
</tr>
<tr>
  <td class="method">generate_fail_banner(int width=80)</td>
</tr>
<tr>
  <td class="method">build_patterned_line(int length=127)</td>
</tr>
<tr>
  <td class="method">generate_component_built_banner(int width=80)</td>
</tr>
<tr>
  <td class="method">generate_built_banner(int width=80)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::setfill&quot;, &quot;headers&quot;=&gt;[&quot;iomanip&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::setw&quot;, &quot;headers&quot;=&gt;[&quot;iomanip&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::size_t&quot;, &quot;headers&quot;=&gt;[&quot;cstddef&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/BuildInfo.q.yml">quintessence/Blast/BuildInfo.q.yml</h3>
     <table>
<tr>
  <td class="property">time_of_build</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">building_platform_os_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">building_platform_os_version</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">building_platform_chipset</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">compiler_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">compiler_version</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">allegro_version_num</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">allegro_version_git_branch</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">allegro_version_git_hash</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">allegro_version_git_latest_commit_date_and_time</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">allegro_version_git_num_commits</td>
  <td class="property">int</td>
</tr>
    </table>
     <table>
    </table>
     <table>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/BuildInfoBuilder.q.yml">quintessence/Blast/BuildInfoBuilder.q.yml</h3>
     <table>
    </table>
     <table>
<tr>
  <td class="method">build()</td>
</tr>
<tr>
  <td class="method">get_allegro_version_git_hash()</td>
</tr>
<tr>
  <td class="method">get_allegro_version_git_branch()</td>
</tr>
<tr>
  <td class="method">get_allegro_version_git_num_commits()</td>
</tr>
<tr>
  <td class="method">get_allegro_version_git_latest_commit_date_and_time()</td>
</tr>
<tr>
  <td class="private_method">project_git_repo_active()</td>
</tr>
<tr>
  <td class="private_method">allegro_folder_exists()</td>
</tr>
<tr>
  <td class="private_method">allegro_git_repo_active()</td>
</tr>
<tr>
  <td class="private_method">allegro_flare_folder_exists()</td>
</tr>
<tr>
  <td class="private_method">allegro_flare_git_repo_active()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::regex&quot;, &quot;headers&quot;=&gt;[&quot;regex&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::BuildInfo&quot;, &quot;headers&quot;=&gt;[&quot;Blast/BuildInfo.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::DirectoryExistenceChecker&quot;, &quot;headers&quot;=&gt;[&quot;Blast/DirectoryExistenceChecker.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;NcursesArt::GithubRepoStatusFetcher&quot;, &quot;headers&quot;=&gt;[&quot;NcursesArt/GithubRepoStatusFetcher.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/BuildInfoCppFileGenerator.q.yml">quintessence/Blast/BuildInfoCppFileGenerator.q.yml</h3>
     <table>
<tr>
  <td class="property">build_info</td>
  <td class="property">Blast::BuildInfo</td>
</tr>
<tr>
  <td class="property">cpp_class</td>
  <td class="property">Blast::Cpp::Class</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">set_build_info(Blast::BuildInfo build_info={})</td>
</tr>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">build_cpp_class()</td>
</tr>
<tr>
  <td class="method">build_cpp_class_attribute_properties()</td>
</tr>
<tr>
  <td class="method">build_cpp_class_attribute(std::string datatype=&quot;std::string&quot;, std::string variable_name=&quot;variable&quot;, std::string initialization_value=&quot;variable&quot;)</td>
</tr>
<tr>
  <td class="method">build_cpp_class_symbol_dependencies()</td>
</tr>
<tr>
  <td class="method">wrap_in_quotes(std::string str=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">is_valid_datatype(std::string str=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">header_file_content()</td>
</tr>
<tr>
  <td class="method">source_file_content()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Cpp::Class&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Cpp/Class.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Cpp::ClassGenerator&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Cpp/ClassGenerator.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Cpp::ClassAttributes&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Cpp/ClassAttributes.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Cpp::SymbolDependencies&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Cpp/SymbolDependencies.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::BuildInfo&quot;, &quot;headers&quot;=&gt;[&quot;Blast/BuildInfo.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/BuildSystem/BuildFactory.q.yml">quintessence/Blast/BuildSystem/BuildFactory.q.yml</h3>
     <table>
<tr>
  <td class="property">build_stage_factory</td>
  <td class="property">Blast::BuildSystem::BuildStageFactory</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">create_placeholder_build()</td>
</tr>
<tr>
  <td class="method">create_shell_command_build(std::string shell_command=&quot;echo \&quot;Having a good day?\&quot;&quot;)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::BuildSystem::BuildStageFactory&quot;, &quot;headers&quot;=&gt;[&quot;Blast/BuildSystem/BuildStageFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::BuildSystem::Builds::Base&quot;, &quot;headers&quot;=&gt;[&quot;Blast/BuildSystem/Builds/Base.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/BuildSystem/BuildStageFactory.q.yml">quintessence/Blast/BuildSystem/BuildStageFactory.q.yml</h3>
     <table>
    </table>
     <table>
<tr>
  <td class="method">create_shell_command_build_stage(std::string shell_command=&quot;echo \&quot;Hi friend\&quot;&quot;)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::BuildSystem::BuildStages::ShellCommand&quot;, &quot;headers&quot;=&gt;[&quot;Blast/BuildSystem/BuildStages/ShellCommand.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/BuildSystem/BuildStageRenderer.q.yml">quintessence/Blast/BuildSystem/BuildStageRenderer.q.yml</h3>
     <table>
<tr>
  <td class="property">build_stage</td>
  <td class="property">Blast::BuildSystem::BuildStages::Base*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">build_text_report()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::BuildSystem::BuildStageRenderers::Base&quot;, &quot;headers&quot;=&gt;[&quot;Blast/BuildSystem/BuildStageRenderers/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::BuildSystem::BuildStageRenderers::ShellCommand&quot;, &quot;headers&quot;=&gt;[&quot;Blast/BuildSystem/BuildStageRenderers/ShellCommand.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::BuildSystem::BuildStages::Base&quot;, &quot;headers&quot;=&gt;[&quot;Blast/BuildSystem/BuildStages/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Errors&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Errors.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/BuildSystem/BuildStageRenderers/Base.q.yml">quintessence/Blast/BuildSystem/BuildStageRenderers/Base.q.yml</h3>
     <table>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">is_type(std::string possible_type=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">render_text()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::vector&lt;std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;char*&quot;, &quot;headers&quot;=&gt;[]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/BuildSystem/BuildStageRenderers/ShellCommand.q.yml">quintessence/Blast/BuildSystem/BuildStageRenderers/ShellCommand.q.yml</h3>
     <table>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">shell_command_build_stage</td>
  <td class="property">Blast::BuildSystem::BuildStages::ShellCommand*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render_text()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::BuildSystem::BuildStageRenderers::Base&quot;, &quot;headers&quot;=&gt;[&quot;Blast/BuildSystem/BuildStageRenderers/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::BuildSystem::BuildStages::ShellCommand&quot;, &quot;headers&quot;=&gt;[&quot;Blast/BuildSystem/BuildStages/ShellCommand.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/BuildSystem/BuildStages/Base.q.yml">quintessence/Blast/BuildSystem/BuildStages/Base.q.yml</h3>
     <table>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">started_at</td>
  <td class="property">std::chrono::high_resolution_clock::time_point</td>
</tr>
<tr>
  <td class="property">mutex_for_started_at</td>
  <td class="property">std::mutex</td>
</tr>
<tr>
  <td class="property">ended_at</td>
  <td class="property">std::chrono::high_resolution_clock::time_point</td>
</tr>
<tr>
  <td class="property">mutex_for_ended_at</td>
  <td class="property">std::mutex</td>
</tr>
<tr>
  <td class="property">status</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">mutex_for_status</td>
  <td class="property">std::mutex</td>
</tr>
<tr>
  <td class="property">STATUS_WAITING_TO_START</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">STATUS_RUNNING</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">STATUS_SUCCEEDED</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">STATUS_ERROR</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">STATUS_FAILED</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">get_status()</td>
</tr>
<tr>
  <td class="method">set_status(std::string status=&quot;[unset-status]&quot;)</td>
</tr>
<tr>
  <td class="method">get_started_at()</td>
</tr>
<tr>
  <td class="method">set_started_at(std::chrono::high_resolution_clock::time_point started_at=)</td>
</tr>
<tr>
  <td class="method">get_ended_at()</td>
</tr>
<tr>
  <td class="method">set_ended_at(std::chrono::high_resolution_clock::time_point ended_at=)</td>
</tr>
<tr>
  <td class="method">is_type(std::string possible_type=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">execute()</td>
</tr>
<tr>
  <td class="method">calc_duration_seconds()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::chrono::high_resolution_clock::time_point&quot;, &quot;headers&quot;=&gt;[&quot;chrono&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::mutex&quot;, &quot;headers&quot;=&gt;[&quot;mutex&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/BuildSystem/BuildStages/ShellCommand.q.yml">quintessence/Blast/BuildSystem/BuildStages/ShellCommand.q.yml</h3>
     <table>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">shell_command</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">shell_command_result</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">executed</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">execute()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::BuildSystem::BuildStages::Base&quot;, &quot;headers&quot;=&gt;[&quot;Blast/BuildSystem/BuildStages/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ShellCommandExecutorWithCallback&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ShellCommandExecutorWithCallback.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;char*&quot;, &quot;headers&quot;=&gt;[]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/BuildSystem/Builds/Base.q.yml">quintessence/Blast/BuildSystem/Builds/Base.q.yml</h3>
     <table>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">build_stages</td>
  <td class="property">std::vector&lt;Blast::BuildSystem::BuildStages::Base*&gt;</td>
</tr>
<tr>
  <td class="property">started_at</td>
  <td class="property">std::chrono::high_resolution_clock::time_point</td>
</tr>
<tr>
  <td class="property">ended_at</td>
  <td class="property">std::chrono::high_resolution_clock::time_point</td>
</tr>
<tr>
  <td class="property">status</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">STATUS_UNDEFINED</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">STATUS_WAITING_TO_START</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">STATUS_RUNNING</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">STATUS_FINISHED</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">STATUS_ERROR</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">is_type(std::string possible_type=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">run()</td>
</tr>
<tr>
  <td class="method">build_stage_executor(Blast::BuildSystem::BuildStages::Base* build_stage=nullptr)</td>
</tr>
<tr>
  <td class="method">run_all_in_parallel()</td>
</tr>
<tr>
  <td class="method">status_is(std::string possible_status=STATUS_UNDEFINED)</td>
</tr>
<tr>
  <td class="method">finished_successfully()</td>
</tr>
<tr>
  <td class="method">infer_duration_seconds()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::thread&quot;, &quot;headers&quot;=&gt;[&quot;thread&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::chrono::high_resolution_clock::time_point&quot;, &quot;headers&quot;=&gt;[&quot;chrono&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::BuildSystem::BuildStages::Base&quot;, &quot;headers&quot;=&gt;[&quot;Blast/BuildSystem/BuildStages/Base.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/BuildSystem/ReportRenderer.q.yml">quintessence/Blast/BuildSystem/ReportRenderer.q.yml</h3>
     <table>
<tr>
  <td class="property">build</td>
  <td class="property">Blast::BuildSystem::Builds::Base*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">build_text_report()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::BuildSystem::ReportRenderers::Base&quot;, &quot;headers&quot;=&gt;[&quot;Blast/BuildSystem/ReportRenderers/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::BuildSystem::Builds::Base&quot;, &quot;headers&quot;=&gt;[&quot;Blast/BuildSystem/Builds/Base.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/BuildSystem/ReportRenderers/Base.q.yml">quintessence/Blast/BuildSystem/ReportRenderers/Base.q.yml</h3>
     <table>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">build</td>
  <td class="property">Blast::BuildSystem::Builds::Base*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">is_type(std::string possible_type=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">render_text()</td>
</tr>
<tr>
  <td class="method">colorize_status(std::string status=&quot;[unset-status]&quot;)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::BuildSystem::BuildStageRenderer&quot;, &quot;headers&quot;=&gt;[&quot;Blast/BuildSystem/BuildStageRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::BuildSystem::BuildStages::Base&quot;, &quot;headers&quot;=&gt;[&quot;Blast/BuildSystem/BuildStages/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::BuildSystem::Builds::Base&quot;, &quot;headers&quot;=&gt;[&quot;Blast/BuildSystem/Builds/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Errors&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Errors.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/CamelCaseToConstantConverter.q.yml">quintessence/Blast/CamelCaseToConstantConverter.q.yml</h3>
     <table>
<tr>
  <td class="property">str</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">convert_to_constant()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::transform&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;isupper&quot;, &quot;headers&quot;=&gt;[&quot;cctype&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;islower&quot;, &quot;headers&quot;=&gt;[&quot;cctype&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/CamelCaseToUnderscoreConverter.q.yml">quintessence/Blast/CamelCaseToUnderscoreConverter.q.yml</h3>
     <table>
<tr>
  <td class="property">str</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">convert_to_underscores()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::transform&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;isupper&quot;, &quot;headers&quot;=&gt;[&quot;cctype&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;islower&quot;, &quot;headers&quot;=&gt;[&quot;cctype&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/Cpp/EnumClass.q.yml">quintessence/Blast/Cpp/EnumClass.q.yml</h3>
     <table>
<tr>
  <td class="property">name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">enumerators</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">scope</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">is_class</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">start_from</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">name_of_to_string_method</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">DEFAULT_CLASS_NAME</td>
  <td class="property">const char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_NAME_OF_TO_STRING_METHOD</td>
  <td class="property">const char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_SCOPE</td>
  <td class="property">const char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_TYPE</td>
  <td class="property">const char*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">set_enumerators(std::vector&lt;std::string&gt; enumerators={})</td>
</tr>
<tr>
  <td class="method">has_name()</td>
</tr>
<tr>
  <td class="method">set_scope(std::string scope=&quot;[unset-scope]&quot;)</td>
</tr>
<tr>
  <td class="method">set_type(std::string type=&quot;[unset-type]&quot;)</td>
</tr>
<tr>
  <td class="method">set_start_from(int start_from=0)</td>
</tr>
<tr>
  <td class="method">has_type()</td>
</tr>
<tr>
  <td class="method">is_private()</td>
</tr>
<tr>
  <td class="method">is_protected()</td>
</tr>
<tr>
  <td class="method">is_public()</td>
</tr>
<tr>
  <td class="method">build_to_string_method()</td>
</tr>
<tr>
  <td class="method">build_to_string_method_body()</td>
</tr>
<tr>
  <td class="method">validate(std::string method_name=&quot;[unset-method_name]&quot;)</td>
</tr>
<tr>
  <td class="method">validate_elements_are_unique(std::vector&lt;std::string&gt; elements={})</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Cpp::Function&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Cpp/Function.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::TemplatedFile&quot;, &quot;headers&quot;=&gt;[&quot;Blast/TemplatedFile.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Cpp::FunctionArgument&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Cpp/FunctionArgument.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::CamelCaseToUnderscoreConverter&quot;, &quot;headers&quot;=&gt;[&quot;Blast/CamelCaseToUnderscoreConverter.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/Cpp/EnumClassFormatter.q.yml">quintessence/Blast/Cpp/EnumClassFormatter.q.yml</h3>
     <table>
<tr>
  <td class="property">enum_class</td>
  <td class="property">Blast::Cpp::EnumClass</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">build_enum_definition(int indent_num_spaces=3)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Cpp::EnumClass&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Cpp/EnumClass.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/Cpp/Function.q.yml">quintessence/Blast/Cpp/Function.q.yml</h3>
     <table>
<tr>
  <td class="property">type</td>
  <td class="property"></td>
</tr>
<tr>
  <td class="property">name</td>
  <td class="property"></td>
</tr>
<tr>
  <td class="property">signature</td>
  <td class="property">std::vector&lt;Blast::Cpp::FunctionArgument&gt;</td>
</tr>
<tr>
  <td class="property">body</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">is_static</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">is_const</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">is_override</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">is_virtual</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">is_pure_virtual</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">is_final_override</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">is_private</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">is_protected</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;Blast::Cpp::FunctionArgument&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Blast/Cpp/FunctionArgument.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Cpp::FunctionArgument&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Cpp/FunctionArgument.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/Cpp/FunctionBody.q.yml">quintessence/Blast/Cpp/FunctionBody.q.yml</h3>
     <table>
<tr>
  <td class="property">content</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">dependency_symbols</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">DEFAULT_BODY_CONTENT</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::string&quot;, &quot;headers&quot;=&gt;[&quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::string&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/DependencyHeadersSuggester.q.yml">quintessence/Blast/DependencyHeadersSuggester.q.yml</h3>
     <table>
<tr>
  <td class="property">suggested_symbol_headers</td>
  <td class="property">std::map&lt;std::string, std::vector&lt;std::string&gt;&gt;</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">generate_autofill_suggestion_for_symbol(std::string symbol=&quot;[unset-symbol]&quot;)</td>
</tr>
<tr>
  <td class="method">find_suggested_headers(std::string symbol=&quot;[unset-symbol]&quot;, bool autogenerate_a_header_if_one_is_not_present=true)</td>
</tr>
<tr>
  <td class="method">find_suggested_headers_csv(std::string symbol=&quot;[unset-symbol]&quot;, bool autogenerate_a_header_if_one_is_not_present=true)</td>
</tr>
<tr>
  <td class="method">get_default_suggested_symbol_headers()</td>
</tr>
<tr>
  <td class="private_method">__replace(std::string str=&quot;source string&quot;, std::string from=&quot;source&quot;, std::string to=&quot;result&quot;)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::StringJoiner&quot;, &quot;headers&quot;=&gt;[&quot;Blast/StringJoiner.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/DependencySymbolAtomizer.q.yml">quintessence/Blast/DependencySymbolAtomizer.q.yml</h3>
     <table>
<tr>
  <td class="property">dependency_symbol</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">atomize()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::StringSplitter&quot;, &quot;headers&quot;=&gt;[&quot;Blast/StringSplitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::replace&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/DirectoryCreator.q.yml">quintessence/Blast/DirectoryCreator.q.yml</h3>
     <table>
<tr>
  <td class="property">directory_components</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">path_is_absolute</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">create()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;bool&quot;, &quot;headers&quot;=&gt;[], &quot;include_directories&quot;=&gt;[], &quot;linked_libraries&quot;=&gt;[]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::string&quot;, &quot;headers&quot;=&gt;[&quot;string&quot;], &quot;include_directories&quot;=&gt;[], &quot;linked_libraries&quot;=&gt;[]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::string&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;], &quot;include_directories&quot;=&gt;[], &quot;linked_libraries&quot;=&gt;[]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;mkdir&quot;, &quot;headers&quot;=&gt;[&quot;sys/stat.h&quot;], &quot;include_directories&quot;=&gt;[], &quot;linked_libraries&quot;=&gt;[]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::stringstream&quot;, &quot;headers&quot;=&gt;[&quot;sstream&quot;], &quot;include_directories&quot;=&gt;[], &quot;linked_libraries&quot;=&gt;[]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::DirectoryExistenceChecker&quot;, &quot;headers&quot;=&gt;[&quot;Blast/DirectoryExistenceChecker.hpp&quot;], &quot;include_directories&quot;=&gt;[], &quot;linked_libraries&quot;=&gt;[]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/DirectoryExistenceChecker.q.yml">quintessence/Blast/DirectoryExistenceChecker.q.yml</h3>
     <table>
<tr>
  <td class="property">directory_name</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">exists()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;stat&quot;, &quot;headers&quot;=&gt;[&quot;sys/stat.h&quot;], &quot;include_directories&quot;=&gt;[], &quot;linked_libraries&quot;=&gt;[]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::string&quot;, &quot;headers&quot;=&gt;[&quot;string&quot;], &quot;include_directories&quot;=&gt;[], &quot;linked_libraries&quot;=&gt;[]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/Errors.q.yml">quintessence/Blast/Errors.q.yml</h3>
     <table>
    </table>
     <table>
<tr>
  <td class="method">build_error_message(std::string from=&quot;[unset-from]&quot;, std::string message=&quot;[unset-message]&quot;)</td>
</tr>
<tr>
  <td class="method">throw_error(std::string from=&quot;[unset-from]&quot;, std::string message=&quot;[unset-message]&quot;)</td>
</tr>
    </table>
     <table>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/FileCreator.q.yml">quintessence/Blast/FileCreator.q.yml</h3>
     <table>
<tr>
  <td class="property">filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">initial_content</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">create_if_not_exists()</td>
</tr>
<tr>
  <td class="method">create_or_overwrite()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::ofstream&quot;, &quot;headers&quot;=&gt;[&quot;fstream&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/FileExistenceChecker.q.yml">quintessence/Blast/FileExistenceChecker.q.yml</h3>
     <table>
<tr>
  <td class="property">filename</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">exists()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::filesystem::exists&quot;, &quot;headers&quot;=&gt;[&quot;filesystem&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/FileLastWriteTime.q.yml">quintessence/Blast/FileLastWriteTime.q.yml</h3>
     <table>
<tr>
  <td class="property">filename</td>
  <td class="property"></td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">last_write_time()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::filesystem::last_write_time&quot;, &quot;headers&quot;=&gt;[&quot;filesystem&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::time_t&quot;, &quot;headers&quot;=&gt;[&quot;ctime&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/Inflector.q.yml">quintessence/Blast/Inflector.q.yml</h3>
     <table>
<tr>
  <td class="property">word</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">pluralize()</td>
</tr>
<tr>
  <td class="method">build_inflections_list()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::RegexMatcher&quot;, &quot;headers&quot;=&gt;[&quot;Blast/RegexMatcher.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::tuple&lt;std::string, std::string, std::regex_constants::syntax_option_type&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;tuple&quot;, &quot;string&quot;, &quot;regex&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::regex_constants::syntax_option_type&quot;, &quot;headers&quot;=&gt;[&quot;regex&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/Project/ActionCreator.q.yml">quintessence/Blast/Project/ActionCreator.q.yml</h3>
     <table>
<tr>
  <td class="property">parent_component</td>
  <td class="property">Blast::Project::Component</td>
</tr>
<tr>
  <td class="property">action_name_snake_case</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">generate_action_name_camel_case()</td>
</tr>
<tr>
  <td class="private_method">generate_action_name_identifier_constant()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Project::Component&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Project/Component.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/Project/Component.q.yml">quintessence/Blast/Project/Component.q.yml</h3>
     <table>
<tr>
  <td class="property">name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">project_root</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">generate_full_path_test_binary_filename()</td>
</tr>
<tr>
  <td class="method">list_existing_component_files()</td>
</tr>
<tr>
  <td class="method">last_write_time()</td>
</tr>
<tr>
  <td class="method">check_fragment_file_last_write_time(std::string project_root=&quot;[unset-project_root]&quot;, std::string name=&quot;[unset-name]&quot;, Blast::ProjectComponentFileTypes::project_file_type_t fragment_type=Blast::ProjectComponentFileTypes::QUINTESSENCE_FILE)</td>
</tr>
<tr>
  <td class="private_method">check_file_existence(Blast::ProjectComponentFileTypes::project_file_type_t type=Blast::ProjectComponentFileTypes::QUINTESSENCE_FILE)</td>
</tr>
<tr>
  <td class="method">exists()</td>
</tr>
<tr>
  <td class="method">has_quintessence()</td>
</tr>
<tr>
  <td class="method">has_only_source_and_header()</td>
</tr>
<tr>
  <td class="method">has_test()</td>
</tr>
<tr>
  <td class="method">has_documentation()</td>
</tr>
<tr>
  <td class="method">read_symlinks()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;vector&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;utility&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ProjectComponentFileTypes::project_file_type_t&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ProjectComponentFileTypes.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ProjectComponentFileTypes::project_file_type_t&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ProjectComponentFileTypes.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ProjectComponentFilenameGenerator&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ProjectComponentFilenameGenerator.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ProjectComponentFileTypes&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ProjectComponentFileTypes.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::FileExistenceChecker&quot;, &quot;headers&quot;=&gt;[&quot;Blast/FileExistenceChecker.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Project::SymlinkChecker&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Project/SymlinkChecker.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::FileLastWriteTime&quot;, &quot;headers&quot;=&gt;[&quot;Blast/FileLastWriteTime.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::time_t&quot;, &quot;headers&quot;=&gt;[&quot;ctime&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/Project/ComponentBasenameExtractor.q.yml">quintessence/Blast/Project/ComponentBasenameExtractor.q.yml</h3>
     <table>
<tr>
  <td class="property">filename</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">identify_file_type()</td>
</tr>
<tr>
  <td class="method">identify_component_basename()</td>
</tr>
<tr>
  <td class="method">extract_component()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::pair&lt;std::string, std::string&gt;&quot;, &quot;headers&quot;=&gt;[&quot;string&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/Project/ComponentCreator.q.yml">quintessence/Blast/Project/ComponentCreator.q.yml</h3>
     <table>
    </table>
     <table>
<tr>
  <td class="method">get_quintessence_file_default_content()</td>
</tr>
<tr>
  <td class="method">generate()</td>
</tr>
    </table>
     <table>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/Project/ComponentDependencyLister.q.yml">quintessence/Blast/Project/ComponentDependencyLister.q.yml</h3>
     <table>
<tr>
  <td class="property">component</td>
  <td class="property">Blast::Project::Component*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">list_component_dependency_names()</td>
</tr>
<tr>
  <td class="private_method">get_component_quintessence_full_filename()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ProjectComponentFileTypes&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ProjectComponentFileTypes.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ProjectComponentFilenameGenerator&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ProjectComponentFilenameGenerator.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Project::ComponentLister&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Project/ComponentLister.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Project::Component&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Project/Component.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Project::Component*&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Project/Component.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::string&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::count&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::stringstream&quot;, &quot;headers&quot;=&gt;[&quot;sstream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;yaml&quot;, &quot;headers&quot;=&gt;[&quot;yaml-cpp/yaml.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/Project/ComponentLister.q.yml">quintessence/Blast/Project/ComponentLister.q.yml</h3>
     <table>
<tr>
  <td class="property">project_root_directory</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="private_method">get_component_fragment_folder_name(Blast::Project::component_fragment_t component_fragment=COMPONENT_FRAGMENT_TYPE_UNDEFINED)</td>
</tr>
<tr>
  <td class="private_method">get_component_fragment_extension(Blast::Project::component_fragment_t component_fragment=COMPONENT_FRAGMENT_TYPE_UNDEFINED)</td>
</tr>
<tr>
  <td class="private_method">get_components_of_fragment_type(std::string project_root_directory=&quot;&quot;, Blast::Project::component_fragment_t component_fragment=COMPONENT_FRAGMENT_TYPE_UNDEFINED)</td>
</tr>
<tr>
  <td class="method">components_sorted_by_most_recent()</td>
</tr>
<tr>
  <td class="method">components()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Project::Component&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Project/Component.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Project::component_fragment_t&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Project/ComponentFragmentTypeEnum.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ShellCommandExecutorWithCallback&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ShellCommandExecutorWithCallback.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Project::ComponentBasenameExtractor&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Project/ComponentBasenameExtractor.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;StringSplitter&quot;, &quot;headers&quot;=&gt;[&quot;Blast/StringSplitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::time_t&quot;, &quot;headers&quot;=&gt;[&quot;ctime&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::unique&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::reverse&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::sort&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/Project/ComponentRelativeLister.q.yml">quintessence/Blast/Project/ComponentRelativeLister.q.yml</h3>
     <table>
<tr>
  <td class="property">component</td>
  <td class="property">Blast::Project::Component*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">list_component_relative_names()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Project::ComponentLister&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Project/ComponentLister.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Project::Component&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Project/Component.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Project::Component*&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Project/Component.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::string&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::count&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::stringstream&quot;, &quot;headers&quot;=&gt;[&quot;sstream&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/Project/ProgramLister.q.yml">quintessence/Blast/Project/ProgramLister.q.yml</h3>
     <table>
<tr>
  <td class="property">project_root</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">build_program_lister_shell_command()</td>
</tr>
<tr>
  <td class="method">program_filenames()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::sort&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ShellCommandExecutorWithCallback&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ShellCommandExecutorWithCallback.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;StringSplitter&quot;, &quot;headers&quot;=&gt;[&quot;Blast/StringSplitter.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/Project/ProjectSymlinkFixer.q.yml">quintessence/Blast/Project/ProjectSymlinkFixer.q.yml</h3>
     <table>
<tr>
  <td class="property">project_folder</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">debug_output</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="private_method">starts_with(std::string source=&quot;&quot;, std::string string_to_find=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">has_one_line(std::string filename=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">read_file_firstline(std::string filename=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">likely_an_intended_symlink(std::string filename=&quot;&quot;, std::string string_to_find=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">read_symlink(std::string filename=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">run()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Project::SymlinkChecker&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Project/SymlinkChecker.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::filesystem&quot;, &quot;headers&quot;=&gt;[&quot;filesystem&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::istream_iterator&quot;, &quot;headers&quot;=&gt;[&quot;iterator&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ShellCommandExecutorWithCallback&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ShellCommandExecutorWithCallback.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::string&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::cout&quot;, &quot;headers&quot;=&gt;[&quot;iostream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::endl&quot;, &quot;headers&quot;=&gt;[&quot;iostream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::ifstream&quot;, &quot;headers&quot;=&gt;[&quot;fstream&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/Project/SourceReleaseBuilder.q.yml">quintessence/Blast/Project/SourceReleaseBuilder.q.yml</h3>
     <table>
<tr>
  <td class="property">releases_base_folder</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">project_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">source_project_directory</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">main_program_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">link_with_opengl</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">build_process_completed_successfully</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">generated_release_folder_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">release_info</td>
  <td class="property">Blast::ReleaseInfo</td>
</tr>
<tr>
  <td class="property">build_info</td>
  <td class="property">Blast::BuildInfo</td>
</tr>
<tr>
  <td class="property">copy_allegro_flare_source</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">copy_nlohmann_json_from_allegro_flare_source</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">copy_ordered_map_from_allegro_flare_source</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">remove_AllegroFlare_Network_from_allegro_flare_copy</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">remove_AllegroFlare_Network2_from_allegro_flare_copy</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">remove_AllegroFlare_Integrations_Network_from_allegro_flare_copy</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">remove_AllegroFlare_Testing_from_allegro_flare_copy</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">remove_Testing_from_project_copy</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">prompt_before_deleting_unneeded_folders</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">write_file_contents(std::string filename=&quot;&quot;, std::string file_contents=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">get_released_version_string()</td>
</tr>
<tr>
  <td class="method">get_makefile_content()</td>
</tr>
<tr>
  <td class="method">get_pinfo_content()</td>
</tr>
<tr>
  <td class="method">copy_file(std::string source_filename=&quot;&quot;, std::string destination_filename=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">get_release_info_header_file_contents()</td>
</tr>
<tr>
  <td class="method">get_release_info_source_file_contents()</td>
</tr>
<tr>
  <td class="method">get_build_info_header_file_contents()</td>
</tr>
<tr>
  <td class="method">get_build_info_source_file_contents()</td>
</tr>
<tr>
  <td class="method">list_symlinks()</td>
</tr>
<tr>
  <td class="method">fix_symlink_targets_from_relative_to_absolute()</td>
</tr>
<tr>
  <td class="method">replace_symlinks_with_copies_of_linked_files()</td>
</tr>
<tr>
  <td class="method">get_generated_source_release_zip_filename()</td>
</tr>
<tr>
  <td class="method">generate_macos_release()</td>
</tr>
<tr>
  <td class="method">recursively_remove_folder_with_prompt(std::string folder_to_remove=&quot;/Users/markoates/Desktop/releases&quot;)</td>
</tr>
<tr>
  <td class="method">generate_source_release()</td>
</tr>
<tr>
  <td class="method">get_top_level_folders_in_include(std::string directory=&quot;[unset-directory]&quot;)</td>
</tr>
<tr>
  <td class="method">get_top_level_folders_in_src(std::string directory=&quot;[unset-directory]&quot;)</td>
</tr>
<tr>
  <td class="method">get_top_level_folders(std::string directory=&quot;[unset-directory]&quot;)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::filesystem&quot;, &quot;headers&quot;=&gt;[&quot;filesystem&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::ifstream&quot;, &quot;headers&quot;=&gt;[&quot;fstream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::ofstream&quot;, &quot;headers&quot;=&gt;[&quot;fstream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::stringstream&quot;, &quot;headers&quot;=&gt;[&quot;sstream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;remove&quot;, &quot;headers&quot;=&gt;[&quot;cstdio&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;StringSplitter&quot;, &quot;headers&quot;=&gt;[&quot;Blast/StringSplitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::DirectoryCreator&quot;, &quot;headers&quot;=&gt;[&quot;Blast/DirectoryCreator.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Project::SymlinkChecker&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Project/SymlinkChecker.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ShellCommandExecutorWithCallback&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ShellCommandExecutorWithCallback.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Project::ProjectSymlinkFixer&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Project/ProjectSymlinkFixer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::TimeStamper&quot;, &quot;headers&quot;=&gt;[&quot;Blast/TimeStamper.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::DirectoryExistenceChecker&quot;, &quot;headers&quot;=&gt;[&quot;Blast/DirectoryExistenceChecker.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Errors&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Errors.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::FileExistenceChecker&quot;, &quot;headers&quot;=&gt;[&quot;Blast/FileExistenceChecker.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ReleaseInfoBuilder&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ReleaseInfoBuilder.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ReleaseInfo&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ReleaseInfo.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ReleaseInfoCppFileGenerator&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ReleaseInfoCppFileGenerator.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::BuildInfo&quot;, &quot;headers&quot;=&gt;[&quot;Blast/BuildInfo.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::BuildInfoCppFileGenerator&quot;, &quot;headers&quot;=&gt;[&quot;Blast/BuildInfoCppFileGenerator.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::VersionYAMLLoaderEmitter&quot;, &quot;headers&quot;=&gt;[&quot;Blast/VersionYAMLLoaderEmitter.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/Project/SymlinkChecker.q.yml">quintessence/Blast/Project/SymlinkChecker.q.yml</h3>
     <table>
<tr>
  <td class="property">filename</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">is_symlink()</td>
</tr>
<tr>
  <td class="method">is_symlink__shell_call_impl()</td>
</tr>
<tr>
  <td class="method">read_symlink_target()</td>
</tr>
<tr>
  <td class="method">read_symlink_target__shell_call_impl()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ShellCommandExecutorWithCallback&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ShellCommandExecutorWithCallback.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::stringstream&quot;, &quot;headers&quot;=&gt;[&quot;sstream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::filesystem::path&quot;, &quot;headers&quot;=&gt;[&quot;filesystem&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::filesystem::exists&quot;, &quot;headers&quot;=&gt;[&quot;filesystem&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::filesystem::is_symlink&quot;, &quot;headers&quot;=&gt;[&quot;filesystem&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::filesystem::read_symlink&quot;, &quot;headers&quot;=&gt;[&quot;filesystem&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/Quintessence/YAMLParsers/EnumClassParser.q.yml">quintessence/Blast/Quintessence/YAMLParsers/EnumClassParser.q.yml</h3>
     <table>
<tr>
  <td class="property">node</td>
  <td class="property">YAML::Node</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">parse()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;YAML::Node&quot;, &quot;headers&quot;=&gt;[&quot;yaml-cpp/yaml.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Cpp::EnumClass&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Cpp/EnumClass.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::YAMLValidator&quot;, &quot;headers&quot;=&gt;[&quot;Blast/YAMLValidator.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/Quintessence/YAMLParsers/FunctionArgumentParser.q.yml">quintessence/Blast/Quintessence/YAMLParsers/FunctionArgumentParser.q.yml</h3>
     <table>
<tr>
  <td class="property">node</td>
  <td class="property">YAML::Node</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">parse()</td>
</tr>
<tr>
  <td class="method">explode(std::string location=&quot;[unset-location]&quot;, std::string error_message=&quot;[unset-error_message]&quot;)</td>
</tr>
<tr>
  <td class="method">validate(bool value=false, std::string location=&quot;[unset-location]&quot;, std::string error_message=&quot;[unset-error_message]&quot;)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;YAML::Node&quot;, &quot;headers&quot;=&gt;[&quot;yaml-cpp/yaml.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Cpp::FunctionArgument&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Cpp/FunctionArgument.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::YAMLValidator&quot;, &quot;headers&quot;=&gt;[&quot;Blast/YAMLValidator.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/RegexMatcher.q.yml">quintessence/Blast/RegexMatcher.q.yml</h3>
     <table>
<tr>
  <td class="property">source_string</td>
  <td class="property"></td>
</tr>
<tr>
  <td class="property">regex_expression</td>
  <td class="property"></td>
</tr>
<tr>
  <td class="property">options</td>
  <td class="property">std::vector&lt;std::regex_constants::syntax_option_type&gt;</td>
</tr>
<tr>
  <td class="property">re</td>
  <td class="property">std::regex</td>
</tr>
<tr>
  <td class="property">compiled</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">set_regex_expression(std::string regex_expression=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">set_options(std::vector&lt;std::regex_constants::syntax_option_type&gt; options={})</td>
</tr>
<tr>
  <td class="method">compile()</td>
</tr>
<tr>
  <td class="method">get_match_info()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::regex_constants::syntax_option_type&quot;, &quot;headers&quot;=&gt;[&quot;regex&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::regex_constants::syntax_option_type&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;regex&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::pair&lt;int, int&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::regex&quot;, &quot;headers&quot;=&gt;[&quot;regex&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::regex_iterator&quot;, &quot;headers&quot;=&gt;[&quot;regex&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::smatch&quot;, &quot;headers&quot;=&gt;[&quot;regex&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::regex_error&quot;, &quot;headers&quot;=&gt;[&quot;regex&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::runtime_error&quot;, &quot;headers&quot;=&gt;[&quot;regex&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/ReleaseInfo.q.yml">quintessence/Blast/ReleaseInfo.q.yml</h3>
     <table>
<tr>
  <td class="property">project_git_branch</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">project_git_hash</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">project_git_num_commits</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">project_git_latest_commit_date_and_time</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">version_number_major</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">version_number_minor</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">version_number_patch</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">version_number_labels</td>
  <td class="property">std::set&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">version_number_metadata</td>
  <td class="property">std::set&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">time_of_source_release</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">build_number</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">time_of_build</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">building_platform_os_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">building_platform_os_version</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">building_platform_chipset</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">compiler_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">compiler_version</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">allegro_version_num</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">allegro_version_git_branch</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">allegro_version_git_hash</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">allegro_version_git_latest_commit_date_and_time</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">allegro_version_git_num_commits</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">allegro_flare_version_num</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">allegro_flare_version_git_branch</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">allegro_flare_version_git_hash</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">allegro_flare_version_git_latest_commit_date_and_time</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">allegro_flare_version_git_num_commits</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">blast_version_num</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">blast_version_git_branch</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">blast_version_git_hash</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">blast_version_git_latest_commit_date_and_time</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">blast_version_git_num_commits</td>
  <td class="property">int</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">set_project_version(int version_number_major=0, int version_number_minor=0, int version_number_patch=0, std::set&lt;std::string&gt; version_number_labels={}, std::set&lt;std::string&gt; version_number_metadata={})</td>
</tr>
<tr>
  <td class="method">build_project_version_string()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::StringJoiner&quot;, &quot;headers&quot;=&gt;[&quot;Blast/StringJoiner.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/ReleaseInfoBuilder.q.yml">quintessence/Blast/ReleaseInfoBuilder.q.yml</h3>
     <table>
<tr>
  <td class="property">project_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">projects_folder</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">build()</td>
</tr>
<tr>
  <td class="method">get_project_git_hash()</td>
</tr>
<tr>
  <td class="method">get_project_git_branch()</td>
</tr>
<tr>
  <td class="method">get_project_git_num_commits()</td>
</tr>
<tr>
  <td class="method">get_project_git_latest_commit_date_and_time()</td>
</tr>
<tr>
  <td class="method">get_allegro_version_git_hash()</td>
</tr>
<tr>
  <td class="method">get_allegro_version_git_branch()</td>
</tr>
<tr>
  <td class="method">get_allegro_version_git_num_commits()</td>
</tr>
<tr>
  <td class="method">get_allegro_version_git_latest_commit_date_and_time()</td>
</tr>
<tr>
  <td class="method">get_allegro_flare_version_git_hash()</td>
</tr>
<tr>
  <td class="method">get_allegro_flare_version_git_num_commits()</td>
</tr>
<tr>
  <td class="method">get_allegro_flare_version_git_branch()</td>
</tr>
<tr>
  <td class="method">get_allegro_flare_version_git_latest_commit_date_and_time()</td>
</tr>
<tr>
  <td class="method">get_blast_version_git_hash()</td>
</tr>
<tr>
  <td class="method">get_blast_version_git_num_commits()</td>
</tr>
<tr>
  <td class="method">get_blast_version_git_branch()</td>
</tr>
<tr>
  <td class="method">get_blast_version_git_latest_commit_date_and_time()</td>
</tr>
<tr>
  <td class="private_method">project_folder()</td>
</tr>
<tr>
  <td class="method">project_name_is_valid()</td>
</tr>
<tr>
  <td class="private_method">project_folder_exists()</td>
</tr>
<tr>
  <td class="private_method">project_git_repo_active()</td>
</tr>
<tr>
  <td class="private_method">allegro_folder_exists()</td>
</tr>
<tr>
  <td class="private_method">allegro_git_repo_active()</td>
</tr>
<tr>
  <td class="private_method">allegro_flare_folder_exists()</td>
</tr>
<tr>
  <td class="private_method">allegro_flare_git_repo_active()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::regex&quot;, &quot;headers&quot;=&gt;[&quot;regex&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ReleaseInfo&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ReleaseInfo.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::DirectoryExistenceChecker&quot;, &quot;headers&quot;=&gt;[&quot;Blast/DirectoryExistenceChecker.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;NcursesArt::GithubRepoStatusFetcher&quot;, &quot;headers&quot;=&gt;[&quot;NcursesArt/GithubRepoStatusFetcher.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/ReleaseInfoCppFileGenerator.q.yml">quintessence/Blast/ReleaseInfoCppFileGenerator.q.yml</h3>
     <table>
<tr>
  <td class="property">release_info</td>
  <td class="property">Blast::ReleaseInfo</td>
</tr>
<tr>
  <td class="property">cpp_class</td>
  <td class="property">Blast::Cpp::Class</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">set_release_info(Blast::ReleaseInfo release_info={})</td>
</tr>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">build_cpp_class()</td>
</tr>
<tr>
  <td class="method">build_cpp_class_attribute_properties()</td>
</tr>
<tr>
  <td class="method">build_cpp_class_attribute(std::string datatype=&quot;std::string&quot;, std::string variable_name=&quot;variable&quot;, std::string initialization_value=&quot;variable&quot;)</td>
</tr>
<tr>
  <td class="method">build_cpp_class_symbol_dependencies()</td>
</tr>
<tr>
  <td class="method">wrap_in_quotes(std::string str=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">is_valid_datatype(std::string str=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">header_file_content()</td>
</tr>
<tr>
  <td class="method">source_file_content()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Cpp::Class&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Cpp/Class.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Cpp::ClassGenerator&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Cpp/ClassGenerator.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Cpp::ClassAttributes&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Cpp/ClassAttributes.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Cpp::SymbolDependencies&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Cpp/SymbolDependencies.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ReleaseInfo&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ReleaseInfo.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/ShellCommandExecutorWithCallback.q.yml">quintessence/Blast/ShellCommandExecutorWithCallback.q.yml</h3>
     <table>
<tr>
  <td class="property">command</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">callback</td>
  <td class="property">std::function&lt;void(std::string)&gt;</td>
</tr>
<tr>
  <td class="property">capture_stderr</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">exit_status_DISABLED__not_supported_on_windows</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">executed_successfully</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">finished</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">simple_silent_callback(std::string string_for_appending=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">simple_cout_callback(std::string string_for_appending=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">execute()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::function&quot;, &quot;headers&quot;=&gt;[&quot;functional&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::function&lt;void(std::string)&gt;&quot;, &quot;headers&quot;=&gt;[&quot;functional&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;void*&quot;, &quot;headers&quot;=&gt;[&quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;FILE&quot;, &quot;headers&quot;=&gt;[&quot;cstdio&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::string&quot;, &quot;headers&quot;=&gt;[&quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::array&quot;, &quot;headers&quot;=&gt;[&quot;array&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::shared_ptr&quot;, &quot;headers&quot;=&gt;[&quot;memory&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;pipe&quot;, &quot;headers&quot;=&gt;[&quot;cstdio&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;popen&quot;, &quot;headers&quot;=&gt;[&quot;cstdio&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;pclose&quot;, &quot;headers&quot;=&gt;[&quot;cstdio&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;feof&quot;, &quot;headers&quot;=&gt;[&quot;cstdio&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;fgets&quot;, &quot;headers&quot;=&gt;[&quot;cstdio&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::runtime_error&quot;, &quot;headers&quot;=&gt;[&quot;stdexcept&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/SimpleTextSearcher.q.yml">quintessence/Blast/SimpleTextSearcher.q.yml</h3>
     <table>
<tr>
  <td class="property">search_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">elements</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">would_be_included_in_results(std::string element=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">results()</td>
</tr>
    </table>
     <table>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/String/Trimmer.q.yml">quintessence/Blast/String/Trimmer.q.yml</h3>
     <table>
<tr>
  <td class="property">text</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">trim()</td>
</tr>
<tr>
  <td class="private_method">ltrim(std::string s=&quot;&quot;)</td>
</tr>
<tr>
  <td class="private_method">rtrim(std::string s=&quot;&quot;)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::find_if&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/StringSplitter.q.yml">quintessence/Blast/StringSplitter.q.yml</h3>
     <table>
<tr>
  <td class="property">string</td>
  <td class="property"></td>
</tr>
<tr>
  <td class="property">delimiter</td>
  <td class="property">char</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">split()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;char&quot;, &quot;headers&quot;=&gt;[]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::string&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::stringstream&quot;, &quot;headers&quot;=&gt;[&quot;sstream&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/StringUpcaser.q.yml">quintessence/Blast/StringUpcaser.q.yml</h3>
     <table>
<tr>
  <td class="property">original_text</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">upcase()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::transform&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::toupper&quot;, &quot;headers&quot;=&gt;[&quot;cctype&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/SystemInfo.q.yml">quintessence/Blast/SystemInfo.q.yml</h3>
     <table>
<tr>
  <td class="property">MACOS_SYSNAME</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">num_available_threads()</td>
</tr>
<tr>
  <td class="method">num_available_threads_are_known()</td>
</tr>
<tr>
  <td class="method">get_processor_type()</td>
</tr>
<tr>
  <td class="method">get_sysname()</td>
</tr>
<tr>
  <td class="method">is_apple_mac()</td>
</tr>
<tr>
  <td class="method">is_microsoft_windows()</td>
</tr>
<tr>
  <td class="method">get_version()</td>
</tr>
<tr>
  <td class="method">get_release()</td>
</tr>
<tr>
  <td class="method">get_hostname()</td>
</tr>
<tr>
  <td class="method">get_machine()</td>
</tr>
<tr>
  <td class="method">operating_system()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::thread::hardware_concurrency&quot;, &quot;headers&quot;=&gt;[&quot;thread&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::SystemInfoFetcher&quot;, &quot;headers&quot;=&gt;[&quot;Blast/SystemInfoFetcher.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/TaoTeChingQuoteGenerator.q.yml">quintessence/Blast/TaoTeChingQuoteGenerator.q.yml</h3>
     <table>
<tr>
  <td class="property">quotes</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">pick_quote()</td>
</tr>
<tr>
  <td class="method">default_quotes_list()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::sample&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::back_inserter&quot;, &quot;headers&quot;=&gt;[&quot;iterator&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::mt19937&quot;, &quot;headers&quot;=&gt;[&quot;random&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::random_device&quot;, &quot;headers&quot;=&gt;[&quot;random&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/TemplatedFile.q.yml">quintessence/Blast/TemplatedFile.q.yml</h3>
     <table>
<tr>
  <td class="property">template_content</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">insertion_variables</td>
  <td class="property">std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;</td>
</tr>
    </table>
     <table>
<tr>
  <td class="private_method">__replace(std::string str=&quot;source string&quot;, std::string from=&quot;source&quot;, std::string to=&quot;result&quot;)</td>
</tr>
<tr>
  <td class="method">generate_content()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;string&quot;, &quot;vector&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/Testing/TemporaryDirectoryCreator.q.yml">quintessence/Blast/Testing/TemporaryDirectoryCreator.q.yml</h3>
     <table>
    </table>
     <table>
<tr>
  <td class="method">create(uint32_t max_tries=100000)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;exception&quot;, &quot;headers&quot;=&gt;[&quot;exception&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;fstream&quot;, &quot;headers&quot;=&gt;[&quot;fstream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;iostream&quot;, &quot;headers&quot;=&gt;[&quot;iostream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;random&quot;, &quot;headers&quot;=&gt;[&quot;random&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;sstream&quot;, &quot;headers&quot;=&gt;[&quot;sstream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;filesystem&quot;, &quot;headers&quot;=&gt;[&quot;filesystem&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::filesystem::path&quot;, &quot;headers&quot;=&gt;[&quot;filesystem&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/TimeStamper.q.yml">quintessence/Blast/TimeStamper.q.yml</h3>
     <table>
    </table>
     <table>
<tr>
  <td class="method">generate_now_timestamp_utc()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::time_t&quot;, &quot;headers&quot;=&gt;[&quot;sstream&quot;, &quot;ctime&quot;, &quot;iomanip&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/VersionYAMLLoaderEmitter.q.yml">quintessence/Blast/VersionYAMLLoaderEmitter.q.yml</h3>
     <table>
<tr>
  <td class="property">yaml_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">root</td>
  <td class="property">YAML::Node</td>
</tr>
<tr>
  <td class="property">major</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">minor</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">patch</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">labels</td>
  <td class="property">std::set&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">metadata</td>
  <td class="property">std::set&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">loaded</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">load()</td>
</tr>
<tr>
  <td class="method">save()</td>
</tr>
<tr>
  <td class="method">get_major()</td>
</tr>
<tr>
  <td class="method">get_minor()</td>
</tr>
<tr>
  <td class="method">get_patch()</td>
</tr>
<tr>
  <td class="method">get_labels()</td>
</tr>
<tr>
  <td class="method">get_metadata()</td>
</tr>
<tr>
  <td class="method">increment()</td>
</tr>
<tr>
  <td class="method">validate_or_throw(YAML::Node node={}, std::string key=&quot;[unset-key]&quot;)</td>
</tr>
<tr>
  <td class="method">validate_or_throw_v(YAML::Node initial_node={}, std::vector&lt;std::string&gt; nested_keys={}, YAML::NodeType::value type=YAML::NodeType::Undefined)</td>
</tr>
<tr>
  <td class="method">validate_labels_format(std::set&lt;std::string&gt; labels={})</td>
</tr>
<tr>
  <td class="method">add_label(std::string label=&quot;[unset-label]&quot;)</td>
</tr>
<tr>
  <td class="method">add_metadata(std::string metadata_element=&quot;[unset-metadata_element]&quot;)</td>
</tr>
<tr>
  <td class="method">is_valid_label(std::string label=&quot;[unset-label]&quot;)</td>
</tr>
<tr>
  <td class="method">build_project_version_string()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;YAML::Node&quot;, &quot;headers&quot;=&gt;[&quot;yaml-cpp/yaml.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;YAML::NodeType::value&quot;, &quot;headers&quot;=&gt;[&quot;yaml-cpp/yaml.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Errors&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Errors.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::StringJoiner&quot;, &quot;headers&quot;=&gt;[&quot;Blast/StringJoiner.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::YAMLValidator&quot;, &quot;headers&quot;=&gt;[&quot;Blast/YAMLValidator.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::ofstream&quot;, &quot;headers&quot;=&gt;[&quot;fstream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::FileExistenceChecker&quot;, &quot;headers&quot;=&gt;[&quot;Blast/FileExistenceChecker.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/YAMLValidator.q.yml">quintessence/Blast/YAMLValidator.q.yml</h3>
     <table>
    </table>
     <table>
<tr>
  <td class="method">validate_presence_of_key(YAML::Node node={}, std::string key=&quot;[unset-key]&quot;, bool throw_on_error=true)</td>
</tr>
<tr>
  <td class="method">validate_node_type(YAML::Node node={}, std::string key=&quot;[unset-key]&quot;, YAML::NodeType::value expected_type=YAML::NodeType::Undefined, bool throw_on_error=true)</td>
</tr>
<tr>
  <td class="method">validate_node_has_unsigned_int_value(YAML::Node node={}, std::string key=&quot;[unset-key]&quot;)</td>
</tr>
<tr>
  <td class="method">validate_elements_are_unique(std::vector&lt;std::string&gt; elements={})</td>
</tr>
<tr>
  <td class="method">yaml_node_type_as_string(YAML::NodeType::value node_type=YAML::NodeType::Undefined)</td>
</tr>
<tr>
  <td class="method">validate_unique_all_upper_identifiers(YAML::Node items={})</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::any_of&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;YAML::Node&quot;, &quot;headers&quot;=&gt;[&quot;yaml-cpp/yaml.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;YAML::NodeType::value&quot;, &quot;headers&quot;=&gt;[&quot;yaml-cpp/yaml.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Cpp::EnumClass&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Cpp/EnumClass.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Errors&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Errors.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Checkbox.q.yml">quintessence/Checkbox.q.yml</h3>
     <table>
    </table>
     <table>
<tr>
  <td class="method">run()</td>
</tr>
    </table>
     <table>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/EpicDarkFont.q.yml">quintessence/EpicDarkFont.q.yml</h3>
     <table>
    </table>
     <table>
<tr>
  <td class="method">run()</td>
</tr>
    </table>
     <table>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/HostnameExtractor.q.yml">quintessence/HostnameExtractor.q.yml</h3>
     <table>
    </table>
     <table>
<tr>
  <td class="method">get_computer_name()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ShellCommandExecutorWithCallback&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ShellCommandExecutorWithCallback.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::String::Trimmer&quot;, &quot;headers&quot;=&gt;[&quot;Blast/String/Trimmer.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/NcursesArt/GithubRepoStatusFetcher.q.yml">quintessence/NcursesArt/GithubRepoStatusFetcher.q.yml</h3>
     <table>
<tr>
  <td class="property">repo_name</td>
  <td class="property"></td>
</tr>
<tr>
  <td class="property">repos_directory</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">last_captured_output_from_status_request</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">only_poll_once</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">status_polled</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">GIT_STATUS_COMMAND</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">git_pull_command</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">git_branch_count_command</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">git_current_branch_command</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">git_current_branch_num_commits_command</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">git_latest_commit_date_and_time_command</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">git_current_hash_command</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">git_remote_branch_names_command</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">component_quintessence_filenames_command</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">git_current_staged_files_command</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">git_is_clean_command</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">local_repo_exists()</td>
</tr>
<tr>
  <td class="method">has_file_changes()</td>
</tr>
<tr>
  <td class="method">has_untracked_files()</td>
</tr>
<tr>
  <td class="method">is_the_repo_in_sync_with_remote()</td>
</tr>
<tr>
  <td class="method">is_the_local_repo_ahead()</td>
</tr>
<tr>
  <td class="method">is_the_local_repo_behind()</td>
</tr>
<tr>
  <td class="method">is_clean()</td>
</tr>
<tr>
  <td class="method">get_current_hash()</td>
</tr>
<tr>
  <td class="method">get_branch_count()</td>
</tr>
<tr>
  <td class="method">get_current_branch_num_commits()</td>
</tr>
<tr>
  <td class="method">get_latest_commit_date_and_time()</td>
</tr>
<tr>
  <td class="method">get_branch_names_at_remote()</td>
</tr>
<tr>
  <td class="method">get_branch_count_at_remote()</td>
</tr>
<tr>
  <td class="method">is_current_branch_master()</td>
</tr>
<tr>
  <td class="method">get_current_branch_name_command()</td>
</tr>
<tr>
  <td class="method">get_pull_command()</td>
</tr>
<tr>
  <td class="method">get_status_command()</td>
</tr>
<tr>
  <td class="method">get_current_staged_files_command()</td>
</tr>
<tr>
  <td class="method">get_is_clean_command()</td>
</tr>
<tr>
  <td class="method">get_current_staged_files()</td>
</tr>
<tr>
  <td class="method">get_current_branch_name()</td>
</tr>
<tr>
  <td class="method">get_quintessence_filenames()</td>
</tr>
<tr>
  <td class="method">have_the_local_and_remote_repos_diverged()</td>
</tr>
<tr>
  <td class="method">last_captured_output_from_status_request_contains_string(std::string string_to_find=)</td>
</tr>
<tr>
  <td class="method">poll_status()</td>
</tr>
<tr>
  <td class="method">execute_command(std::string command=)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::StringSplitter&quot;, &quot;headers&quot;=&gt;[&quot;Blast/StringSplitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::String::Trimmer&quot;, &quot;headers&quot;=&gt;[&quot;Blast/String/Trimmer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::stringstream&quot;, &quot;headers&quot;=&gt;[&quot;sstream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::sort&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::cerr&quot;, &quot;headers&quot;=&gt;[&quot;iostream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::endl&quot;, &quot;headers&quot;=&gt;[&quot;iostream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ShellCommandExecutorWithCallback&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ShellCommandExecutorWithCallback.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/NcursesArt/Rails/ComponentFilenameGenerator.q.yml">quintessence/NcursesArt/Rails/ComponentFilenameGenerator.q.yml</h3>
     <table>
<tr>
  <td class="property">component_basename</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">get_model_filename()</td>
</tr>
    </table>
     <table>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/OrigamiMommyFontLoader.q.yml">quintessence/OrigamiMommyFontLoader.q.yml</h3>
     <table>
    </table>
     <table>
<tr>
  <td class="method">load()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;char, std::vector&lt;std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;vector&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/ProjectComponentBasenameExtractor.q.yml">quintessence/ProjectComponentBasenameExtractor.q.yml</h3>
     <table>
<tr>
  <td class="property">filename</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">identify_file_type()</td>
</tr>
<tr>
  <td class="method">identify_component_basename()</td>
</tr>
<tr>
  <td class="method">extract_component()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::pair&lt;std::string, std::string&gt;&quot;, &quot;headers&quot;=&gt;[&quot;string&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/ProjectFilenameGenerator.q.yml">quintessence/ProjectFilenameGenerator.q.yml</h3>
     <table>
<tr>
  <td class="property">basename</td>
  <td class="property"></td>
</tr>
<tr>
  <td class="property">underscores</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">generate_quintessence_filename()</td>
</tr>
<tr>
  <td class="method">generate_source_filename()</td>
</tr>
<tr>
  <td class="method">generate_header_filename()</td>
</tr>
<tr>
  <td class="method">generate_test_src_filename()</td>
</tr>
<tr>
  <td class="method">generate_example_src_filename()</td>
</tr>
<tr>
  <td class="method">generate_obj_binary()</td>
</tr>
<tr>
  <td class="method">generate_test_binary()</td>
</tr>
<tr>
  <td class="method">generate_example_binary()</td>
</tr>
    </table>
     <table>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/ProjectListBuilder.q.yml">quintessence/ProjectListBuilder.q.yml</h3>
     <table>
<tr>
  <td class="property">repos_directory</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">get_directories()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::filesystem::directory_iterator&quot;, &quot;headers&quot;=&gt;[&quot;filesystem&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Question.q.yml">quintessence/Question.q.yml</h3>
     <table>
<tr>
  <td class="property">question</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">image_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">correct_answer</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">incorrect_answers</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
    </table>
     <table>
    </table>
     <table>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Quiz.q.yml">quintessence/Quiz.q.yml</h3>
     <table>
<tr>
  <td class="property">questions</td>
  <td class="property">std::vector&lt;Question&gt;</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">append_questions(std::vector&lt;Question&gt; new_questions=)</td>
</tr>
<tr>
  <td class="method">shuffle_questions()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;Question&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Question.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Question&quot;, &quot;headers&quot;=&gt;[&quot;Question.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::random_device&quot;, &quot;headers&quot;=&gt;[&quot;random&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::mt19937&quot;, &quot;headers&quot;=&gt;[&quot;random&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::shuffle&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/QuizYAMLLoader.q.yml">quintessence/QuizYAMLLoader.q.yml</h3>
     <table>
<tr>
  <td class="property">quiz</td>
  <td class="property">Quiz*</td>
</tr>
<tr>
  <td class="property">yaml_filename</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">load_and_append()</td>
</tr>
<tr>
  <td class="method">get_type_string(YAML::Node node=YAML::Node())</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Quiz&quot;, &quot;headers&quot;=&gt;[&quot;Quiz.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Quiz*&quot;, &quot;headers&quot;=&gt;[&quot;Quiz.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;YAML::Node&quot;, &quot;headers&quot;=&gt;[&quot;yaml-cpp/yaml.h&quot;], &quot;include_directories&quot;=&gt;[&quot;yaml-cpp/include&quot;], &quot;linked_directories&quot;=&gt;[&quot;yaml-cpp/build&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Quizes/MultiplexQuestion.q.yml">quintessence/Quizes/MultiplexQuestion.q.yml</h3>
     <table>
<tr>
  <td class="property">date</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">subject</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">subject_type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">relevance</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">reference_page</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
    </table>
     <table>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Quizes/MultiplexQuestionCollectionHelper.q.yml">quintessence/Quizes/MultiplexQuestionCollectionHelper.q.yml</h3>
     <table>
<tr>
  <td class="property">questions</td>
  <td class="property">std::vector&lt;Quizes::MultiplexQuestion&gt;</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">select_with_dates()</td>
</tr>
<tr>
  <td class="method">select_with_relevance()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Quizes::MultiplexQuestion&quot;, &quot;headers&quot;=&gt;[&quot;Quizes/MultiplexQuestion.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::String::Trimmer&quot;, &quot;headers&quot;=&gt;[&quot;Blast/String/Trimmer.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Quizes/MultiplexQuizRunner.q.yml">quintessence/Quizes/MultiplexQuizRunner.q.yml</h3>
     <table>
<tr>
  <td class="property">question_pool</td>
  <td class="property">std::vector&lt;Quizes::MultiplexQuestion&gt;</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">run()</td>
</tr>
<tr>
  <td class="method">format_for_quiz_yaml_date(std::vector&lt;Quizes::MultiplexQuestion&gt; questions={})</td>
</tr>
<tr>
  <td class="method">format_for_quiz_yaml_relevance(std::vector&lt;Quizes::MultiplexQuestion&gt; questions={})</td>
</tr>
<tr>
  <td class="method">write_file_contents(std::string filename=&quot;&quot;, std::string file_contents=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">get_file_contents(std::string filename=&quot;no-file.txt&quot;)</td>
</tr>
<tr>
  <td class="method">sanitize_quotes(std::string str=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">split_trim_and_shuffle_by_semicolon(std::string str=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">trim(std::string str=&quot;&quot;)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;random_shuffling_deps&quot;, &quot;headers&quot;=&gt;[&quot;ctime&quot;, &quot;random&quot;, &quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;file_loading_deps&quot;, &quot;headers&quot;=&gt;[&quot;string&quot;, &quot;fstream&quot;, &quot;streambuf&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;Quizes::MultiplexQuestion&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Quizes/MultiplexQuestion.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Quizes::MultiplexQuestion&quot;, &quot;headers&quot;=&gt;[&quot;Quizes/MultiplexQuestion.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::String::Trimmer&quot;, &quot;headers&quot;=&gt;[&quot;Blast/String/Trimmer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Quizes::MultiplexSheetLoader&quot;, &quot;headers&quot;=&gt;[&quot;Quizes/MultiplexSheetLoader.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Quizes::MultiplexQuestionCollectionHelper&quot;, &quot;headers&quot;=&gt;[&quot;Quizes/MultiplexQuestionCollectionHelper.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::StringSplitter&quot;, &quot;headers&quot;=&gt;[&quot;Blast/StringSplitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::StringJoiner&quot;, &quot;headers&quot;=&gt;[&quot;Blast/StringJoiner.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::ofstream&quot;, &quot;headers&quot;=&gt;[&quot;fstream&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Quizes/MultiplexSheetLoader.q.yml">quintessence/Quizes/MultiplexSheetLoader.q.yml</h3>
     <table>
<tr>
  <td class="property">raw_csv</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">questions</td>
  <td class="property">std::vector&lt;Quizes::MultiplexQuestion&gt;</td>
</tr>
<tr>
  <td class="property">loaded</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">get_questions()</td>
</tr>
<tr>
  <td class="method">load()</td>
</tr>
<tr>
  <td class="method">trim(std::string str=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">extract_subject(std::string event_or_document=&quot;[not-set]&quot;, std::string person_name_or_symbol=&quot;[not-set]&quot;, std::string subject_group=&quot;[not-set]&quot;, int line_number=0)</td>
</tr>
<tr>
  <td class="method">extract_subject_type(std::string event_or_document=&quot;[not-set]&quot;, std::string person_name_or_symbol=&quot;[not-set]&quot;, std::string subject_group=&quot;[not-set]&quot;)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;Quizes::MultiplexQuestion&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Quizes/MultiplexQuestion.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Quizes::MultiplexQuestion&quot;, &quot;headers&quot;=&gt;[&quot;Quizes/MultiplexQuestion.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::FileExistenceChecker&quot;, &quot;headers&quot;=&gt;[&quot;Blast/FileExistenceChecker.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::StringSplitter&quot;, &quot;headers&quot;=&gt;[&quot;Blast/StringSplitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::String::Trimmer&quot;, &quot;headers&quot;=&gt;[&quot;Blast/String/Trimmer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;assert&quot;, &quot;headers&quot;=&gt;[&quot;cassert&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/SmallFontLoader.q.yml">quintessence/SmallFontLoader.q.yml</h3>
     <table>
    </table>
     <table>
<tr>
  <td class="method">sanitize_string(std::string unfiltered_phrase=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">load()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;char, std::vector&lt;std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;vector&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/StringSplitter.q.yml">quintessence/StringSplitter.q.yml</h3>
     <table>
<tr>
  <td class="property">string</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">delimiter</td>
  <td class="property">char</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">split()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::string&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;char&quot;, &quot;headers&quot;=&gt;[]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/StringVectorIntersection.q.yml">quintessence/StringVectorIntersection.q.yml</h3>
     <table>
<tr>
  <td class="property">v1</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">v2</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">intersection()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::string&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::sort&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::set_intersection&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/VortexFontLoader.q.yml">quintessence/VortexFontLoader.q.yml</h3>
     <table>
    </table>
     <table>
<tr>
  <td class="method">sanitize_string(std::string unfiltered_phrase=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">load()</td>
</tr>
    </table>
     <table>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/ncurses_art/Backends/Base.q.yml">quintessence/ncurses_art/Backends/Base.q.yml</h3>
     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">is_type(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
     <table>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/ncurses_art/Backends/Ncurses.q.yml">quintessence/ncurses_art/Backends/Ncurses.q.yml</h3>
     <table>
<tr>
  <td class="property">property</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">property_is(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ncurses_art::Backends::Base&quot;, &quot;headers&quot;=&gt;[&quot;ncurses_art/Backends/Base.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<h1>Dependents</h1>
<pre>
{
  "std/map<char, std/vector<std/string>>": [
    "ASCIICharacterRenderer",
    "OrigamiMommyFontLoader",
    "SmallFontLoader"
  ],
  "std/map": [
    "ASCIICharacterRenderer",
    "OrigamiMommyFontLoader",
    "SmallFontLoader"
  ],
  "std/vector": [
    "ASCIICharacterRenderer",
    "OrigamiMommyFontLoader",
    "SmallFontLoader"
  ],
  "std/string": [
    "ASCIICharacterRenderer",
    "Blast/Cpp/FunctionBody",
    "Blast/DirectoryCreator",
    "Blast/DirectoryExistenceChecker",
    "Blast/ShellCommandExecutorWithCallback"
  ],
  "char": [
    "ASCIICharacterRenderer",
    "Blast/BuildSystem/BuildStageRenderers/Base",
    "Blast/BuildSystem/BuildStages/ShellCommand",
    "Blast/StringSplitter",
    "StringSplitter"
  ],
  "mvaddnstr": [
    "ASCIICharacterRenderer"
  ],
  "std/setfill": [
    "Blast/Build/Celebrator"
  ],
  "std/setw": [
    "Blast/Build/Celebrator"
  ],
  "std/size_t": [
    "Blast/Build/Celebrator"
  ],
  "std/regex": [
    "Blast/BuildInfoBuilder",
    "Blast/RegexMatcher",
    "Blast/ReleaseInfoBuilder"
  ],
  "Blast/BuildInfo": [
    "Blast/BuildInfoBuilder",
    "Blast/BuildInfoCppFileGenerator",
    "Blast/Project/SourceReleaseBuilder"
  ],
  "Blast/DirectoryExistenceChecker": [
    "Blast/BuildInfoBuilder",
    "Blast/DirectoryCreator",
    "Blast/Project/SourceReleaseBuilder",
    "Blast/ReleaseInfoBuilder"
  ],
  "NcursesArt/GithubRepoStatusFetcher": [
    "Blast/BuildInfoBuilder",
    "Blast/ReleaseInfoBuilder"
  ],
  "Blast/Cpp/Class": [
    "Blast/BuildInfoCppFileGenerator",
    "Blast/ReleaseInfoCppFileGenerator"
  ],
  "Blast/Cpp/ClassGenerator": [
    "Blast/BuildInfoCppFileGenerator",
    "Blast/ReleaseInfoCppFileGenerator"
  ],
  "Blast/Cpp/ClassAttributes": [
    "Blast/BuildInfoCppFileGenerator",
    "Blast/ReleaseInfoCppFileGenerator"
  ],
  "Blast/Cpp/SymbolDependencies": [
    "Blast/BuildInfoCppFileGenerator",
    "Blast/ReleaseInfoCppFileGenerator"
  ],
  "Blast/BuildSystem/BuildStageFactory": [
    "Blast/BuildSystem/BuildFactory"
  ],
  "Blast/BuildSystem/Builds/Base": [
    "Blast/BuildSystem/BuildFactory",
    "Blast/BuildSystem/ReportRenderer",
    "Blast/BuildSystem/ReportRenderers/Base"
  ],
  "Blast/BuildSystem/BuildStages/ShellCommand": [
    "Blast/BuildSystem/BuildStageFactory",
    "Blast/BuildSystem/BuildStageRenderers/ShellCommand"
  ],
  "Blast/BuildSystem/BuildStageRenderers/Base": [
    "Blast/BuildSystem/BuildStageRenderer",
    "Blast/BuildSystem/BuildStageRenderers/ShellCommand"
  ],
  "Blast/BuildSystem/BuildStageRenderers/ShellCommand": [
    "Blast/BuildSystem/BuildStageRenderer"
  ],
  "Blast/BuildSystem/BuildStages/Base": [
    "Blast/BuildSystem/BuildStageRenderer",
    "Blast/BuildSystem/BuildStages/ShellCommand",
    "Blast/BuildSystem/Builds/Base",
    "Blast/BuildSystem/ReportRenderers/Base"
  ],
  "Blast/Errors": [
    "Blast/BuildSystem/BuildStageRenderer",
    "Blast/BuildSystem/ReportRenderers/Base",
    "Blast/Project/SourceReleaseBuilder",
    "Blast/VersionYAMLLoaderEmitter",
    "Blast/YAMLValidator"
  ],
  "std/vector<std/vector<std/string>>": [
    "Blast/BuildSystem/BuildStageRenderers/Base"
  ],
  "std/chrono/high_resolution_clock/time_point": [
    "Blast/BuildSystem/BuildStages/Base",
    "Blast/BuildSystem/Builds/Base"
  ],
  "std/mutex": [
    "Blast/BuildSystem/BuildStages/Base"
  ],
  "Blast/ShellCommandExecutorWithCallback": [
    "Blast/BuildSystem/BuildStages/ShellCommand",
    "Blast/Project/ComponentLister",
    "Blast/Project/ProgramLister",
    "Blast/Project/ProjectSymlinkFixer",
    "Blast/Project/SourceReleaseBuilder",
    "Blast/Project/SymlinkChecker",
    "HostnameExtractor",
    "NcursesArt/GithubRepoStatusFetcher"
  ],
  "std/thread": [
    "Blast/BuildSystem/Builds/Base"
  ],
  "Blast/BuildSystem/ReportRenderers/Base": [
    "Blast/BuildSystem/ReportRenderer"
  ],
  "Blast/BuildSystem/BuildStageRenderer": [
    "Blast/BuildSystem/ReportRenderers/Base"
  ],
  "std/transform": [
    "Blast/CamelCaseToConstantConverter",
    "Blast/CamelCaseToUnderscoreConverter",
    "Blast/StringUpcaser"
  ],
  "isupper": [
    "Blast/CamelCaseToConstantConverter",
    "Blast/CamelCaseToUnderscoreConverter"
  ],
  "islower": [
    "Blast/CamelCaseToConstantConverter",
    "Blast/CamelCaseToUnderscoreConverter"
  ],
  "Blast/Cpp/Function": [
    "Blast/Cpp/EnumClass"
  ],
  "Blast/TemplatedFile": [
    "Blast/Cpp/EnumClass"
  ],
  "Blast/Cpp/FunctionArgument": [
    "Blast/Cpp/EnumClass",
    "Blast/Cpp/Function",
    "Blast/Quintessence/YAMLParsers/FunctionArgumentParser"
  ],
  "Blast/CamelCaseToUnderscoreConverter": [
    "Blast/Cpp/EnumClass"
  ],
  "Blast/Cpp/EnumClass": [
    "Blast/Cpp/EnumClassFormatter",
    "Blast/Quintessence/YAMLParsers/EnumClassParser",
    "Blast/YAMLValidator"
  ],
  "std/vector<Blast/Cpp/FunctionArgument>": [
    "Blast/Cpp/Function"
  ],
  "std/vector<std/string>": [
    "Blast/Cpp/FunctionBody",
    "Blast/DirectoryCreator",
    "Blast/Project/ComponentDependencyLister",
    "Blast/Project/ComponentRelativeLister",
    "Blast/Project/ProjectSymlinkFixer",
    "Blast/StringSplitter",
    "StringSplitter",
    "StringVectorIntersection"
  ],
  "Blast/StringJoiner": [
    "Blast/DependencyHeadersSuggester",
    "Blast/ReleaseInfo",
    "Blast/VersionYAMLLoaderEmitter",
    "Quizes/MultiplexQuizRunner"
  ],
  "Blast/StringSplitter": [
    "Blast/DependencySymbolAtomizer",
    "NcursesArt/GithubRepoStatusFetcher",
    "Quizes/MultiplexQuizRunner",
    "Quizes/MultiplexSheetLoader"
  ],
  "std/replace": [
    "Blast/DependencySymbolAtomizer"
  ],
  "bool": [
    "Blast/DirectoryCreator"
  ],
  "mkdir": [
    "Blast/DirectoryCreator"
  ],
  "std/stringstream": [
    "Blast/DirectoryCreator",
    "Blast/Project/ComponentDependencyLister",
    "Blast/Project/ComponentRelativeLister",
    "Blast/Project/SourceReleaseBuilder",
    "Blast/Project/SymlinkChecker",
    "Blast/StringSplitter",
    "NcursesArt/GithubRepoStatusFetcher"
  ],
  "stat": [
    "Blast/DirectoryExistenceChecker"
  ],
  "std/ofstream": [
    "Blast/FileCreator",
    "Blast/Project/SourceReleaseBuilder",
    "Blast/VersionYAMLLoaderEmitter",
    "Quizes/MultiplexQuizRunner"
  ],
  "std/filesystem/exists": [
    "Blast/FileExistenceChecker",
    "Blast/Project/SymlinkChecker"
  ],
  "std/filesystem/last_write_time": [
    "Blast/FileLastWriteTime"
  ],
  "std/time_t": [
    "Blast/FileLastWriteTime",
    "Blast/Project/Component",
    "Blast/Project/ComponentLister",
    "Blast/TimeStamper"
  ],
  "Blast/RegexMatcher": [
    "Blast/Inflector"
  ],
  "std/vector<std/tuple<std/string, std/string, std/regex_constants/syntax_option_type>>": [
    "Blast/Inflector"
  ],
  "std/regex_constants/syntax_option_type": [
    "Blast/Inflector",
    "Blast/RegexMatcher"
  ],
  "Blast/Project/Component": [
    "Blast/Project/ActionCreator",
    "Blast/Project/ComponentDependencyLister",
    "Blast/Project/ComponentDependencyLister",
    "Blast/Project/ComponentLister",
    "Blast/Project/ComponentRelativeLister",
    "Blast/Project/ComponentRelativeLister"
  ],
  "vector": [
    "Blast/Project/Component"
  ],
  "std/vector<std/pair<std/string, std/string>>": [
    "Blast/Project/Component",
    "Blast/Project/SourceReleaseBuilder",
    "Blast/TemplatedFile"
  ],
  "Blast/ProjectComponentFileTypes/project_file_type_t": [
    "Blast/Project/Component",
    "Blast/Project/Component"
  ],
  "Blast/ProjectComponentFilenameGenerator": [
    "Blast/Project/Component",
    "Blast/Project/ComponentDependencyLister"
  ],
  "Blast/ProjectComponentFileTypes": [
    "Blast/Project/Component",
    "Blast/Project/ComponentDependencyLister"
  ],
  "Blast/FileExistenceChecker": [
    "Blast/Project/Component",
    "Blast/Project/SourceReleaseBuilder",
    "Blast/VersionYAMLLoaderEmitter",
    "Quizes/MultiplexSheetLoader"
  ],
  "Blast/Project/SymlinkChecker": [
    "Blast/Project/Component",
    "Blast/Project/ProjectSymlinkFixer",
    "Blast/Project/SourceReleaseBuilder"
  ],
  "Blast/FileLastWriteTime": [
    "Blast/Project/Component"
  ],
  "std/pair<std/string, std/string>": [
    "Blast/Project/ComponentBasenameExtractor",
    "ProjectComponentBasenameExtractor"
  ],
  "Blast/Project/ComponentLister": [
    "Blast/Project/ComponentDependencyLister",
    "Blast/Project/ComponentRelativeLister"
  ],
  "std/count": [
    "Blast/Project/ComponentDependencyLister",
    "Blast/Project/ComponentRelativeLister"
  ],
  "yaml": [
    "Blast/Project/ComponentDependencyLister"
  ],
  "Blast/Project/component_fragment_t": [
    "Blast/Project/ComponentLister"
  ],
  "Blast/Project/ComponentBasenameExtractor": [
    "Blast/Project/ComponentLister"
  ],
  "StringSplitter": [
    "Blast/Project/ComponentLister",
    "Blast/Project/ProgramLister",
    "Blast/Project/SourceReleaseBuilder"
  ],
  "std/unique": [
    "Blast/Project/ComponentLister"
  ],
  "std/reverse": [
    "Blast/Project/ComponentLister"
  ],
  "std/sort": [
    "Blast/Project/ComponentLister",
    "Blast/Project/ProgramLister",
    "NcursesArt/GithubRepoStatusFetcher",
    "StringVectorIntersection"
  ],
  "std/filesystem": [
    "Blast/Project/ProjectSymlinkFixer",
    "Blast/Project/SourceReleaseBuilder"
  ],
  "std/istream_iterator": [
    "Blast/Project/ProjectSymlinkFixer"
  ],
  "std/cout": [
    "Blast/Project/ProjectSymlinkFixer"
  ],
  "std/endl": [
    "Blast/Project/ProjectSymlinkFixer",
    "NcursesArt/GithubRepoStatusFetcher"
  ],
  "std/ifstream": [
    "Blast/Project/ProjectSymlinkFixer",
    "Blast/Project/SourceReleaseBuilder"
  ],
  "remove": [
    "Blast/Project/SourceReleaseBuilder"
  ],
  "Blast/DirectoryCreator": [
    "Blast/Project/SourceReleaseBuilder"
  ],
  "Blast/Project/ProjectSymlinkFixer": [
    "Blast/Project/SourceReleaseBuilder"
  ],
  "Blast/TimeStamper": [
    "Blast/Project/SourceReleaseBuilder"
  ],
  "Blast/ReleaseInfoBuilder": [
    "Blast/Project/SourceReleaseBuilder"
  ],
  "Blast/ReleaseInfo": [
    "Blast/Project/SourceReleaseBuilder",
    "Blast/ReleaseInfoBuilder",
    "Blast/ReleaseInfoCppFileGenerator"
  ],
  "Blast/ReleaseInfoCppFileGenerator": [
    "Blast/Project/SourceReleaseBuilder"
  ],
  "Blast/BuildInfoCppFileGenerator": [
    "Blast/Project/SourceReleaseBuilder"
  ],
  "Blast/VersionYAMLLoaderEmitter": [
    "Blast/Project/SourceReleaseBuilder"
  ],
  "std/filesystem/path": [
    "Blast/Project/SymlinkChecker",
    "Blast/Testing/TemporaryDirectoryCreator"
  ],
  "std/filesystem/is_symlink": [
    "Blast/Project/SymlinkChecker"
  ],
  "std/filesystem/read_symlink": [
    "Blast/Project/SymlinkChecker"
  ],
  "YAML/Node": [
    "Blast/Quintessence/YAMLParsers/EnumClassParser",
    "Blast/Quintessence/YAMLParsers/FunctionArgumentParser",
    "Blast/VersionYAMLLoaderEmitter",
    "Blast/YAMLValidator",
    "QuizYAMLLoader"
  ],
  "Blast/YAMLValidator": [
    "Blast/Quintessence/YAMLParsers/EnumClassParser",
    "Blast/Quintessence/YAMLParsers/FunctionArgumentParser",
    "Blast/VersionYAMLLoaderEmitter"
  ],
  "std/vector<std/regex_constants/syntax_option_type>": [
    "Blast/RegexMatcher"
  ],
  "std/vector<std/pair<int, int>>": [
    "Blast/RegexMatcher"
  ],
  "std/regex_iterator": [
    "Blast/RegexMatcher"
  ],
  "std/smatch": [
    "Blast/RegexMatcher"
  ],
  "std/regex_error": [
    "Blast/RegexMatcher"
  ],
  "std/runtime_error": [
    "Blast/RegexMatcher",
    "Blast/ShellCommandExecutorWithCallback"
  ],
  "std/function": [
    "Blast/ShellCommandExecutorWithCallback"
  ],
  "std/function<void(std/string)>": [
    "Blast/ShellCommandExecutorWithCallback"
  ],
  "void": [
    "Blast/ShellCommandExecutorWithCallback"
  ],
  "FILE": [
    "Blast/ShellCommandExecutorWithCallback"
  ],
  "std/array": [
    "Blast/ShellCommandExecutorWithCallback"
  ],
  "std/shared_ptr": [
    "Blast/ShellCommandExecutorWithCallback"
  ],
  "pipe": [
    "Blast/ShellCommandExecutorWithCallback"
  ],
  "popen": [
    "Blast/ShellCommandExecutorWithCallback"
  ],
  "pclose": [
    "Blast/ShellCommandExecutorWithCallback"
  ],
  "feof": [
    "Blast/ShellCommandExecutorWithCallback"
  ],
  "fgets": [
    "Blast/ShellCommandExecutorWithCallback"
  ],
  "std/find_if": [
    "Blast/String/Trimmer"
  ],
  "std/toupper": [
    "Blast/StringUpcaser"
  ],
  "std/thread/hardware_concurrency": [
    "Blast/SystemInfo"
  ],
  "Blast/SystemInfoFetcher": [
    "Blast/SystemInfo"
  ],
  "std/sample": [
    "Blast/TaoTeChingQuoteGenerator"
  ],
  "std/back_inserter": [
    "Blast/TaoTeChingQuoteGenerator"
  ],
  "std/mt19937": [
    "Blast/TaoTeChingQuoteGenerator",
    "Quiz"
  ],
  "std/random_device": [
    "Blast/TaoTeChingQuoteGenerator",
    "Quiz"
  ],
  "exception": [
    "Blast/Testing/TemporaryDirectoryCreator"
  ],
  "fstream": [
    "Blast/Testing/TemporaryDirectoryCreator"
  ],
  "iostream": [
    "Blast/Testing/TemporaryDirectoryCreator"
  ],
  "random": [
    "Blast/Testing/TemporaryDirectoryCreator"
  ],
  "sstream": [
    "Blast/Testing/TemporaryDirectoryCreator"
  ],
  "filesystem": [
    "Blast/Testing/TemporaryDirectoryCreator"
  ],
  "YAML/NodeType/value": [
    "Blast/VersionYAMLLoaderEmitter",
    "Blast/YAMLValidator"
  ],
  "std/any_of": [
    "Blast/YAMLValidator"
  ],
  "Blast/String/Trimmer": [
    "HostnameExtractor",
    "NcursesArt/GithubRepoStatusFetcher",
    "Quizes/MultiplexQuestionCollectionHelper",
    "Quizes/MultiplexQuizRunner",
    "Quizes/MultiplexSheetLoader"
  ],
  "std/cerr": [
    "NcursesArt/GithubRepoStatusFetcher"
  ],
  "std/filesystem/directory_iterator": [
    "ProjectListBuilder"
  ],
  "std/vector<Question>": [
    "Quiz"
  ],
  "Question": [
    "Quiz"
  ],
  "std/shuffle": [
    "Quiz"
  ],
  "Quiz": [
    "QuizYAMLLoader",
    "QuizYAMLLoader"
  ],
  "Quizes/MultiplexQuestion": [
    "Quizes/MultiplexQuestionCollectionHelper",
    "Quizes/MultiplexQuizRunner",
    "Quizes/MultiplexSheetLoader"
  ],
  "random_shuffling_deps": [
    "Quizes/MultiplexQuizRunner"
  ],
  "file_loading_deps": [
    "Quizes/MultiplexQuizRunner"
  ],
  "std/vector<Quizes/MultiplexQuestion>": [
    "Quizes/MultiplexQuizRunner",
    "Quizes/MultiplexSheetLoader"
  ],
  "Quizes/MultiplexSheetLoader": [
    "Quizes/MultiplexQuizRunner"
  ],
  "Quizes/MultiplexQuestionCollectionHelper": [
    "Quizes/MultiplexQuizRunner"
  ],
  "assert": [
    "Quizes/MultiplexSheetLoader"
  ],
  "std/set_intersection": [
    "StringVectorIntersection"
  ],
  "ncurses_art/Backends/Base": [
    "ncurses_art/Backends/Ncurses"
  ]
}
</pre>
</body>