parent_classes:


  - class: AllegroFlare::GameConfigurations::Complete
    scope: public
    init_with: [[COMPONENT_CLASS_NAME]]::TYPE


properties:


  - name: primary_gameplay_screen
    type: [[COMPONENT_NAME_FIRST_FRAGMENT]]::Gameplay::Screen*
    init_with: nullptr

  - name: primary_gameplay_subscreen
    type: AllegroFlare::Screens::Subscreen::Screen*
    init_with: nullptr

  - name: pause_screen
    type: AllegroFlare::Screens::TitledMenuScreen*
    init_with: nullptr

  - name: TYPE
    type: char*
    init_with: '(char*)"[[COMPONENT_NAME]]"'
    static: true
    constexpr: true


methods:


  - name: app_icon_1024_filename
    type: std::string
    virtual: true
    override: true
    body: |
      return "icons/allegro-flare-generic-icon-1024.png";


  - name: app_title
    type: std::string
    virtual: true
    override: true
    body: |
      return "Untitled Game";


  - name: title_screen_title
    type: std::string
    virtual: true
    override: true
    body: |
      return "Untitled Game";


  - name: primary_display_icon_filename
    type: std::string
    virtual: true
    override: true
    body: |
      return "icons/allegro-flare-generic-icon-1024.png";


  - name: get_num_save_profiles
    virtual: true
    override: true
    type: int
    body: |
      return 1;


  - name: get_num_manual_save_slots
    virtual: true
    override: true
    type: int
    body: |
      return 3;


  - name: get_num_autosave_save_slots
    virtual: true
    override: true
    type: int
    body: |
      return 0;


  - name: get_num_quicksave_save_slots
    virtual: true
    override: true
    type: int
    body: |
      return 0;


  - name: build_achievements
    virtual: true
    override: true
    type: std::vector<std::tuple<std::string, AllegroFlare::Achievement*, bool, bool>>
    body: |
      return {};
    body_dependency_symbols:
      - AllegroFlare::Achievement
 

  - name: create_primary_gameplay_screen
    type: AllegroFlare::Screens::Gameplay*
    virtual: true
    override: true
    parameters:
      - name: runner
        type: AllegroFlare::Runners::Complete*
        default_argument: nullptr
    guards: [ runner ]
    body: |
      // TODO: Find some way to remove the Runners::Complete dependency, consider injecting
      // the bin dependencies individually into this method

      [[COMPONENT_NAME_FIRST_FRAGMENT]]::Gameplay::Screen *result = new [[COMPONENT_NAME_FIRST_FRAGMENT]]::Gameplay::Screen;

      result->set_data_folder_path(runner->get_framework()->get_data_folder_path());
      result->set_asset_studio_database(&runner->get_framework()->get_asset_studio_database_ref());
      result->set_font_bin(runner->get_font_bin());
      result->set_bitmap_bin(runner->get_bitmap_bin());
      result->set_model_bin(runner->get_model_bin());
      result->set_event_emitter(runner->get_event_emitter());
      result->set_on_paused_callback_func([runner](AllegroFlare::Screens::Gameplay* screen, void* user_data){
         runner->get_event_emitter()->emit_router_event(AllegroFlare::Routers::Standard::EVENT_PAUSE_GAME);
      });
      result->initialize();

      primary_gameplay_screen = result;

      return result;
    body_dependency_symbols:
      - [[COMPONENT_NAME_FIRST_FRAGMENT]]::Gameplay::Screen
      - AllegroFlare::Runners::Complete


  - name: destroy_primary_gameplay_screen
    virtual: true
    override: true
    body: |
      if (primary_gameplay_screen) primary_gameplay_screen->destroy();
      return;


  - name: load_save_file_content_into_gameplay
    virtual: true
    override: true
    parameters:
      - name: save_file_content
        type: std::string
        default_argument: '"[unset-save_file_content]"'
    guards: [ (!save_file_content.empty()) ]
    body: |
      [[COMPONENT_NAME_FIRST_FRAGMENT]]::GameProgressAndStateInfo game_progress_and_state_info;
      game_progress_and_state_info.import_from_string(save_file_content);

      // TODO: Set in-game variables
      //int player_num_lives = game_progress_and_state_info.get_player_num_lives();
      //std::vector<std::string> player_inventory_items = game_progress_and_state_info.get_player_inventory_items();

      //primary_gameplay_screen->set_player_num_lives(player_num_lives);
      //primary_gameplay_screen->set_player_inventory_items(player_inventory_items);

      return;
   body_dependency_symbols:
      - [[COMPONENT_NAME_FIRST_FRAGMENT]]::GameProgressAndStateInfo


  - name: build_save_file_content_for_current_game
    type: std::string
    virtual: true
    override: true
    body: |
      [[COMPONENT_NAME_FIRST_FRAGMENT]]::GameProgressAndStateInfo game_progress_and_state_info;

      // Grab variables/data/content from the varous sources in the system
      //int player_num_lives = game_progress_and_state_info.get_player_num_lives();
      //std::vector<std::string> player_inventory_items = game_progress_and_state_info.get_player_inventory_items();

      // Set in-game variables
      //game_progress_and_state_info.set_player_num_lives(player_num_lives);
      //game_progress_and_state_info.set_player_inventory_items(player_inventory_items);

      // Return the string dump
      return game_progress_and_state_info.export_to_string();
    body_dependency_symbols:
      - [[COMPONENT_NAME_FIRST_FRAGMENT]]::GameProgressAndStateInfo



  - name: create_primary_gameplay_subscreen
    virtual: true
    override: true
    type: AllegroFlare::Screens::Subscreen::Screen*
    parameters:
      - name: runner
        type: AllegroFlare::Runners::Complete*
        default_argument: nullptr
    guards: [ (!primary_gameplay_subscreen) ]
    body: |
      AllegroFlare::EventEmitter* event_emitter = runner->get_event_emitter();
      AllegroFlare::BitmapBin* bitmap_bin = runner->get_bitmap_bin();
      AllegroFlare::FontBin* font_bin = runner->get_font_bin();

      // Build the subscreen_element
      AllegroFlare::Screens::Subscreen::Element *subscreen_element = new AllegroFlare::Screens::Subscreen::Element;
      subscreen_element->set_bitmap_bin(bitmap_bin);
      subscreen_element->set_font_bin(font_bin);
      subscreen_element->initialize();

      // Build and assemble the subscreen
      primary_gameplay_subscreen = new AllegroFlare::Screens::Subscreen::Screen;
      primary_gameplay_subscreen->set_event_emitter(event_emitter);
      primary_gameplay_subscreen->set_bitmap_bin(bitmap_bin);
      primary_gameplay_subscreen->set_font_bin(font_bin);
      primary_gameplay_subscreen->set_subscreen_element(subscreen_element);

      // Set the exit screen behavior
      primary_gameplay_subscreen->set_on_exit_callback_func(
         [event_emitter](AllegroFlare::Screens::Subscreen::Screen* pause_screen, void* user_data){
            event_emitter->emit_router_event(
               AllegroFlare::Routers::Standard::EVENT_UNPAUSE_GAME,
               nullptr,
               al_get_time()
            );
         }
      );
      primary_gameplay_subscreen->set_on_exit_callback_func_user_data(nullptr);

      primary_gameplay_subscreen->initialize();

      return primary_gameplay_subscreen;


  - name: create_pause_screen
    virtual: true
    override: true
    type: AllegroFlare::Screens::Base*
    parameters:
      - name: runner
        type: AllegroFlare::Runners::Complete*
        default_argument: nullptr
    guards: [ (!pause_screen) ]
    body: |
      AllegroFlare::EventEmitter* event_emitter = runner->get_event_emitter();

      pause_screen = AllegroFlare::Screens::TitledMenuScreenFactory::create_standard_pause_screen(
         runner->get_framework()->get_data_folder_path()
         //runner->get_framework()->get_data_folder_path(), // TODO: Add "NAME OF GAME   v0.2.5" as footer text
      );

      //pause_screen->set_foreground(shared_foreground);
      //pause_screen->set_background(shared_background);

      pause_screen->set_on_menu_choice_callback_func(
         [event_emitter](AllegroFlare::Screens::TitledMenuScreen* pause_screen, std::string value, void* user_data){
            auto RESUME_PAUSED_GAMEPLAY_EVENT_NAME =
               AllegroFlare::Screens::TitledMenuScreenFactory::RESUME_PAUSED_GAMEPLAY_EVENT_NAME;
            auto EXIT_TO_TITLE_SCREEN_EVENT_NAME =
               AllegroFlare::Screens::TitledMenuScreenFactory::EXIT_TO_TITLE_SCREEN_EVENT_NAME;

            std::string current_menu_option_value = value;
            if (current_menu_option_value == RESUME_PAUSED_GAMEPLAY_EVENT_NAME)
            {
               event_emitter->emit_router_event(
                  AllegroFlare::Routers::Standard::EVENT_UNPAUSE_GAME,
                  nullptr,
                  al_get_time()
               );
            }
            else if (current_menu_option_value == EXIT_TO_TITLE_SCREEN_EVENT_NAME)
            {
               // TODO: Add a "are you sure?" step here
               event_emitter->emit_router_event(
                  AllegroFlare::Routers::Standard::EVENT_ACTIVATE_TITLE_SCREEN,
                  nullptr,
                  al_get_time()
               );
            }
            else
            {
               AllegroFlare::Logger::throw_error(
                  "AllegroFlare::GameConfigurations::Base::create_pause_screen"
                  "While in the \"on_menu_choice_callback_func\", there was no option to handle the menu value \""
                     + current_menu_option_value + "\"."
               );
            }
         }
      );
      pause_screen->set_on_menu_choice_callback_func_user_data(nullptr);

      // Set the exit screen behavior
      pause_screen->set_on_finished_callback_func(
         [event_emitter](AllegroFlare::Screens::TitledMenuScreen* pause_screen, void* user_data){
            event_emitter->emit_router_event(
               AllegroFlare::Routers::Standard::EVENT_UNPAUSE_GAME,
               nullptr,
               al_get_time()
            );
         }
      );
      pause_screen->set_on_finished_callback_func_user_data(nullptr);

      return pause_screen;
    body_dependency_symbols:
      - AllegroFlare::Screens::TitledMenuScreenFactory


  - name: destroy_pause_screen
    virtual: true
    override: true
    body: |
      pause_screen->destroy();
      return;


  - name: handle_primary_gameplay_screen_paused
    virtual: true
    override: true
    guards: [ primary_gameplay_screen ]
    body: |
      // TODO: Add tests for this behavior
      // TODO: Consider having and using event_emitter from self
      AllegroFlare::EventEmitter* event_emitter = primary_gameplay_screen->get_event_emitter();
      primary_gameplay_screen->suspend_gameplay();
      event_emitter->emit_router_event(
         AllegroFlare::Routers::Standard::EVENT_ACTIVATE_PAUSE_SCREEN,
         //AllegroFlare::Routers::Standard::EVENT_ACTIVATE_PRIMARY_GAMEPLAY_SUBSCREEN,
         nullptr,
         al_get_time()
      );
      return;


  - name: handle_primary_gameplay_screen_unpaused
    virtual: true
    override: true
    guards: [ primary_gameplay_screen ]
    body: |
      // TODO: Add tests for this behavior
      // TODO: Consider having and using event_emitter from self
      AllegroFlare::EventEmitter* event_emitter = primary_gameplay_screen->get_event_emitter();
      primary_gameplay_screen->resume_suspended_gameplay();
      event_emitter->emit_router_event(
         AllegroFlare::Routers::Standard::EVENT_ACTIVATE_PRIMARY_GAMEPLAY_SCREEN,
         nullptr,
         al_get_time()
      );
      return;


  - name: create_intro_logos_storyboard_pages
    virtual: true
    override: true
    type: std::vector<AllegroFlare::Elements::StoryboardPages::Base *>
    body: |
      //AllegroFlare::StoryboardPageFactory page_factory;
      //page_factory.set_font_bin(font_bin);
      //page_factory.set_bitmap_bin(bitmap_bin);
      //page_factory.set_model_bin(model_bin);
      //page_factory.create_clubcatt_logo_page(),
      //page_factory.create_image_page(bitmap_bin->operator[]("clubcatt-website-01.jpg")),
      return {};


  - name: create_intro_storyboard_pages
    virtual: true
    override: true
    type: std::vector<AllegroFlare::Elements::StoryboardPages::Base *>
    body: |
      //AllegroFlare::Logger::throw_error(
         //"AllegroFlare::GameConfigurations::Base::create_intro_storyboard_pages",
         //"Not implemented in the base class. This method must be implemented in the derived class"
      //);
      //AllegroFlare::StoryboardPageFactory page_factory;
      //page_factory.set_font_bin(font_bin);
      //page_factory.set_bitmap_bin(bitmap_bin);
      //page_factory.set_model_bin(model_bin);

      //std::vector<AllegroFlare::Elements::StoryboardPages::Base *> result =
      //{
         //page_factory.create_image_with_advancing_text_page(
            //"storyboard-1-01-1165x500.png",
            //"Once upon a time, in a magical kingdom ruled by a wise and just queen, a young hero sets out on a "
               //"journey to prove himself and save his people from a terrible curse."
         //),
         //page_factory.create_image_with_advancing_text_page(
            //"storyboard-2-01-1165x500.png",
            //"With the help of his trusty sidekick and a band of unlikely allies, he must navigate treacherous "
               //"terrain and battle fierce foes."
         //),
         //page_factory.create_advancing_text_page(
           //"And achieve his goal to save the kingdom."
         //),
      //};
      return {};


  - name: handle_arbitrary_storyboard_screen_finished
    virtual: true
    override: true
    body: |
      AllegroFlare::Logger::throw_error(
         "AllegroFlare::GameConfigurations::Base::handle_arbitrary_storyboard_screen_finished",
         "Not implemented in the base class. This method must be implemented in the derived class"
      );
      // NOTE: To use, typically:
      //router->emit_route_event(
         //AllegroFlare::Routers::Standard::EVENT_ACTIVATE_LEVEL_SELECT_SCREEN,
         //nullptr,
         //al_get_time()
      //);
      return;



  - name: create_arbitrary_storyboard_pages_by_identifier
    virtual: true
    override: true
    type: std::vector<AllegroFlare::Elements::StoryboardPages::Base *>
    parameters:
      - name: identifier
        type: std::string
        default_argument: '"[unset-identifier]"'
    body: |
      // NOTE: At the time of this writing, identifier is not properly wired up, you will need to find
      // a way to transmit the identifier you'd like to use. In the past, an identifier is stored
      // at the point where the AllegroFlare::Routers::Standard::EVENT_ACTIVATE_ARBITRARY_STORYBOARD_SCREEN route
      // event is emitted, and is somehow retrieved here, or, this method dispatches out to the object/class where the
      // event was emitted.
      // Ideally, you would wire up the identifier to be passed along here. Probably as a new
      // AllegroFlare::RouteEventDatas::ActivateArbitraryStoryboardScreen or similar
      return {};


  - name: build_title_screen_menu_options
    virtual: true
    override: true
    type: std::vector<std::pair<std::string, std::string>>
    body: |
      //AllegroFlare::Logger::throw_error(
         //"AllegroFlare::GameConfigurations::Base::build_title_screen_menu_options",
            //"Not implemented in the base class. This method must be implemented in the derived class"
      //);
      std::vector<std::pair<std::string, std::string>> options = {
         //{ "Continue",          "continue_from_last_save" },       // TODO: If game session is saved and valid
         { "Load a Saved Game", "goto_load_a_saved_game_screen" }, // TODO: If game session is saved and valid,
                                                                   // and the game supports save slots
         { "Start New Game",    "start_new_game" },                // TODO: If the game session has not begun
         //{ "Achievements",      "goto_achievements_screen" },
         //{ "Settings",          "goto_settings_screen" },
         //{ "Version",           "goto_version_screen" },
         //{ "Credits",           "goto_credits_screen" },           // TODO: If game has been won
         { "Quit",              "quit" },
      };
      return options;


  - name: load_audio_controller
    virtual: true
    override: true
    parameters:
      - name: audio_controller
        type: AllegroFlare::AudioController*
        default_argument: nullptr
    guards: [ audio_controller ]
    body: |
      // An example of how to load a sound effect track:
      audio_controller->set_and_load_sound_effect_elements({
         //{ "menu_move", { "ci-menu_move-01.ogg", false, "restart" } },
         //{ "menu_select", { "ci-menu_choice-01.ogg", false, "restart" } },
      });

      // How to play a sound effect:
      // event_emitter->emit_play_music_track_event("menu_select");

      //// An example of how to load a music track:
      //audio_controller.set_and_load_music_track_elements({
         ////{ "intro_music", { "wanderer-01.ogg", true, "ignore" } },
      //});

      // How to play a music track:
      // event_emitter->emit_play_music_track_event("intro_music");
      return;


  - name: load_last_played_session_or_start_new
    virtual: true
    override: true
    parameters:
      - name: game_session
        type: AllegroFlare::GameSession*
        default_argument: nullptr
    guards: [ game_session ]
    body: |
      // TODO: This method
      //AllegroFlare::GameProgressAndStateInfos::Base *game_progress_and_state_info =
        //game_session->get_game_progress_and_state_info();
      return;
    body_dependency_symbols:
      - AllegroFlare::GameProgressAndStateInfos::Base


  - name: create_game_progress_and_state_info_saver_loader
    virtual: true
    override: true
    type: AllegroFlare::GameProgressAndStateInfos::Base*
    body: |
      return new [[COMPONENT_NAME_FIRST_FRAGMENT]]::GameProgressAndStateInfo();
    body_dependency_symbols:
      - [[COMPONENT_NAME_FIRST_FRAGMENT]]::GameProgressAndStateInfo


  - name: setup_new_game_progress_and_state_info_DEPRECATED
    virtual: true
    override: true
    parameters:
      - name: game_session
        type: AllegroFlare::GameSession*
        default_argument: nullptr
    guards: [ game_session ]
    body: |
      // TODO: This method
      AllegroFlare::Logger::throw_error(
         "AllegroFlare::GameConfigurations::Base::setup_new_game_progress_and_state_info",
         "This is DEPRECATED."
      );
      //AllegroFlare::GameProgressAndStateInfos::Base *game_progress_and_state_info =
        //game_session->get_game_progress_and_state_info();
      return;
    body_dependency_symbols:
      - AllegroFlare::GameProgressAndStateInfos::Base


  - name: build_save_slots_for_load_a_saved_game_screen
    virtual: true
    override: true
    type: std::vector<AllegroFlare::LoadASavedGame::SaveSlots::Base*>
    body: |
      std::vector<AllegroFlare::LoadASavedGame::SaveSlots::Base*> result = {
         new AllegroFlare::LoadASavedGame::SaveSlots::Empty(), // TODO: Fill this list with items from save file
         new AllegroFlare::LoadASavedGame::SaveSlots::Empty(),
         new AllegroFlare::LoadASavedGame::SaveSlots::Empty(),
      };
      return result;
    body_dependency_symbols:
      - AllegroFlare::LoadASavedGame::SaveSlots::Empty


  - name: handle_game_event
    virtual: true
    override: true
    parameters:
      - name: game_event
        type: AllegroFlare::GameEvent*
        default_argument: nullptr
    body: |
      //// TODO: Handle top-level game events here
      //if (game_event->is_type(AllegroFlare::GameEventDatas::ScreenActivated::NAME))
      //{
         //AllegroFlare::GameEventDatas::ScreenActivated* as =
           //static_cast<AllegroFlare::GameEventDatas::ScreenActivated*>(game_event->get_data());

         //// TODO: Handle game-specific logic for a after a screen switch
      //}
      if (game_event->get_type() == AllegroFlare::GameEventDatas::AchievementUnlocked::NAME)
      {
         if (game_event->get_data()->is_type(AllegroFlare::GameEventDatas::AchievementUnlocked::TYPE))
         {
            AllegroFlare::GameEventDatas::AchievementUnlocked *as =
               static_cast<AllegroFlare::GameEventDatas::AchievementUnlocked *>(game_event->get_data());
            // TODO: Handle saving progress of achievements. Something like below.
            // See this guide:
            // https://docs.google.com/document/d/1QdDVa6giZOmGbF61dgom1ZJ_Ev5OFvZEM2Bc453RjGw/edit
            //mark_achievement_as_unlocked_and_save_progress(as->get_achievement_identifier());
         }
         else
         {
            throw std::runtime_error("Gameplay/Runner/game_event_func: unexpected AchievementUnlocked event data type");
         }
      }
      return;
    body_dependency_symbols:
      - AllegroFlare::EventNames
      - AllegroFlare::GameEventDatas::AchievementUnlocked


  - name: continue_from_last_save
    body: |
      // TODO: Consider adding this method as part of the standard system
      return;


  - name: build_level_list_for_level_select_screen_by_identifier
    virtual: true
    override: true
    type: std::vector<std::pair<std::string, std::string>>
    parameters:
      - name: identifier
        type: std::string
        default_argument: '"[unset-identifier]"'
    body: |
      std::vector<std::pair<std::string, std::string>> result = {
         //{ "Forest Village 1", "forest_village_1" },
         //{ "Forest Village 2", "forest_village_2" },
         //{ "Forest", "forest_1" },
         //{ "Crystal Cave", "crystal_cave_1" },
         //{ "Desert Town", "desert_town_3" },
         //{ "Town 2", "town_2" },
         //{ "Cave 1", "cave_1" },
         //{ "Town 1", "town_1" },
      };
      return result;


  - name: build_dialog_bank_by_identifier
    virtual: true
    override: true
    type: AllegroFlare::DialogTree::NodeBank
    parameters:
      - name: identifier
        type: std::string
        default_argument: '"[identifier-discarded]"'
    body: |
      // TODO: Test this contains the expected nodes
      AllegroFlare::DialogTree::NodeBank result_node_bank;

      // TODO: Consider joining the system nodes outside of the LevelFactory
      AllegroFlare::DialogTree::NodeBank system_node_bank =
         AllegroFlare::DialogTree::NodeBankFactory::build_common_system_dialogs_node_bank();
      result_node_bank.merge(&system_node_bank);

      return result_node_bank;
    body_dependency_symbols:
      - AllegroFlare::DialogTree::NodeBankFactory


  - name: load_level_by_identifier
    virtual: true
    override: true
    type: AllegroFlare::Levels::Base*
    parameters:
      - name: identifier
        type: std::string
        default_argument: '"[unset-identifier]"'
    body: |
      // TODO: Replace void* with a better type (once the design is clear)
      [[COMPONENT_NAME_FIRST_FRAGMENT]]::Gameplay::Level *result = new [[COMPONENT_NAME_FIRST_FRAGMENT]]::Gameplay::Level();

      std::map<std::string, std::function<void()>> items_map = {
         { "", [](){
            AllegroFlare::Logger::warn_from(
               "[[COMPONENT_NAME_FIRST_FRAGMENT]]::GameConfigurations::Main::load_level_by_identifier",
               "Loading a completely blank empty level."
            );
            // TODO: Add warning: loading an empty level
         }},
         { "forest_village_1", [](){
            //result->set_background_image_identifier("maps/forest-village-1.png");
         }},
         //{ "forest_village_2", [](){
            //result->set_background_image_identifier("maps/forest-village-2.png");
         //}},
         //{ "forest_1", [result](){
            //result->set_background_image_identifier("maps/forest-1.png");
         //}},
         //{ "crystal_cave_1", [result](){
            //result->set_background_image_identifier("maps/crystal-cave-1.png");
         //}},
         //{ "desert_town_3", [result](){
            //result->set_background_image_identifier("maps/desert-town-3.png");
         //}},
         //{ "town_2", [result](){
            //result->set_background_image_identifier("maps/town-2.png");
         //}},
         //{ "cave_1", [result](){
            //result->set_background_image_identifier("maps/rpg-fit-backgrounds-ex-101.png");
         //}},
         //{ "town_1", [result](){
            //result->set_background_image_identifier("maps/rpg-fit-backgrounds-x2-01.png");
         //}},
      };

      // locate and call the function to handle the item
      if (items_map.count(identifier) == 0)
      {
         bool item_handled = false;
         //if (unrecognized_key_callback_func)
         //{
            //item_handled = unrecognized_key_callback_func();
         //}

         if (!item_handled)
         {
            // item not found
            std::stringstream error_message;
            error_message << "[[[COMPONENT_CLASS_NAME]]::load_level]: error: Cannot load the item with the identifier \""
                          << identifier << "\", it does not exist.";
            throw std::runtime_error(error_message.str());
         }
      }
      else
      {
         // call the item
         items_map[identifier]();
      }

      return result;
    body_dependency_symbols:
     - [[COMPONENT_NAME_FIRST_FRAGMENT]]::Gameplay::Level
     - std::function
     - std::stringstream
     - std::map


dependencies:


  - symbol: AllegroFlare::GameConfigurations::Complete
    headers: [ AllegroFlare/GameConfigurations/Complete.hpp ]
  - symbol: AllegroFlare::Levels::Base
    headers: [ AllegroFlare/Levels/Base.hpp ]
  - symbol: AllegroFlare::DialogTree::NodeBank
    headers: [ AllegroFlare/DialogTree/NodeBank.hpp ]
  - symbol: AllegroFlare::DialogTree::NodeBankFactory
    headers: [ AllegroFlare/DialogTree/NodeBankFactory.hpp ]
  - symbol: AllegroFlare::DialogTree::Nodes::Wait
    headers: [ AllegroFlare/DialogTree/Nodes/Wait.hpp ]
  - symbol: AllegroFlare::DialogTree::Nodes::ExitProgram
    headers: [ AllegroFlare/DialogTree/Nodes/ExitProgram.hpp ]
  - symbol: AllegroFlare::DialogTree::Nodes::MultipageWithOptions
    headers: [ AllegroFlare/DialogTree/Nodes/MultipageWithOptions.hpp ]
  - symbol: AllegroFlare::DialogTree::NodeOptions::GoToNode
    headers: [ AllegroFlare/DialogTree/NodeOptions/GoToNode.hpp ]
  - symbol: AllegroFlare::DialogTree::NodeOptions::ExitDialog
    headers: [ AllegroFlare/DialogTree/NodeOptions/ExitDialog.hpp ]
  - symbol: [[COMPONENT_NAME_FIRST_FRAGMENT]]::Gameplay::Level
    headers: [ [[COMPONENT_NAME_FIRST_FRAGMENT]]/Gameplay/Level.hpp ]
  - symbol: AllegroFlare::Achievement
    headers: [ AllegroFlare/Achievement.hpp ]
  - symbol: AllegroFlare::Elements::StoryboardPages::Base
    headers: [ AllegroFlare/Elements/StoryboardPages/Base.hpp ]
  - symbol: AllegroFlare::GameSession
    headers: [ AllegroFlare/GameSession.hpp ]
  - symbol: AllegroFlare::GameProgressAndStateInfos::Base
    headers: [ AllegroFlare/GameProgressAndStateInfos/Base.hpp ]
  - symbol: AllegroFlare::LoadASavedGame::SaveSlots::Base
    headers: [ AllegroFlare/LoadASavedGame/SaveSlots/Base.hpp ]
  - symbol: AllegroFlare::LoadASavedGame::SaveSlots::Empty
    headers: [ AllegroFlare/LoadASavedGame/SaveSlots/Empty.hpp ]
  - symbol: [[COMPONENT_NAME_FIRST_FRAGMENT]]::Gameplay::Screen
    headers: [ [[COMPONENT_NAME_FIRST_FRAGMENT]]/Gameplay/Screen.hpp ]
  - symbol: [[COMPONENT_NAME_FIRST_FRAGMENT]]::GameProgressAndStateInfo
    headers: [ [[COMPONENT_NAME_FIRST_FRAGMENT]]/GameProgressAndStateInfo.hpp ]
  - symbol: AllegroFlare::Screens::Gameplay
    headers: [ AllegroFlare/Screens/Gameplay.hpp ]
  - symbol: AllegroFlare::Runners::Complete
    headers: [ AllegroFlare/Runners/Complete.hpp ]
  - symbol: AllegroFlare::AudioController
    headers: [ AllegroFlare/AudioController.hpp ]
  - symbol: AllegroFlare::EventNames
    headers: [ AllegroFlare/EventNames.hpp ]
  - symbol: AllegroFlare::GameEventDatas::AchievementUnlocked
    headers: [ AllegroFlare/GameEventDatas/AchievementUnlocked.hpp ]
  - symbol: AllegroFlare::GameEvent
    headers: [ AllegroFlare/GameEvent.hpp ]
  - symbol: AllegroFlare::Screens::Subscreen::Screen
    headers: [ AllegroFlare/Screens/Subscreen/Screen.hpp ]
  - symbol: AllegroFlare::Screens::TitledMenuScreen
    headers: [ AllegroFlare/Screens/TitledMenuScreen.hpp ]
  - symbol: AllegroFlare::Screens::TitledMenuScreenFactory
    headers: [ AllegroFlare/Screens/TitledMenuScreenFactory.hpp ]
  - symbol: AllegroFlare::Screens::Base
    headers: [ AllegroFlare/Screens/Base.hpp ]


