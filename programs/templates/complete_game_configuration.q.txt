parent_classes:


  - class: AllegroFlare::GameConfigurations::Complete
    scope: public
    init_with: [[COMPONENT_CLASS_NAME]]::TYPE


properties:


  - name: TYPE
    type: char*
    init_with: '(char*)"[[COMPONENT_NAME]]"'
    static: true
    constexpr: true


methods:


  - name: build_achievements
    virtual: true
    override: true
    type: std::vector<std::tuple<std::string, AllegroFlare::Achievement*, bool, bool>>
    body: |
      return {};
    body_dependency_symbols:
      - AllegroFlare::Achievement


  - name: create_primary_gameplay_screen
    type: AllegroFlare::Screens::Gameplay*
    virtual: true
    override: true
    parameters:
      - name: runner
        type: AllegroFlare::Runners::Complete*
        default_argument: nullptr
    guards: [ runner ]
    body: |
      // TODO: Find some way to remove the Runners::Complete dependency, consider injecting
      // the bin dependencies individually into this method

      [[COMPONENT_NAME_FIRST_FRAGMENT]]::Gameplay::Screen *result = new [[COMPONENT_NAME_FIRST_FRAGMENT]]::Gameplay::Screen;

      result->set_font_bin(runner->get_font_bin());
      result->set_bitmap_bin(runner->get_bitmap_bin());
      result->set_model_bin(runner->get_model_bin());
      result->set_event_emitter(runner->get_event_emitter());

      result->initialize();
      return result;
    body_dependency_symbols:
      - [[COMPONENT_NAME_FIRST_FRAGMENT]]::Gameplay::Screen
      - AllegroFlare::Runners::Complete


  - name: create_intro_logos_storyboard_pages
    virtual: true
    override: true
    type: std::vector<AllegroFlare::Elements::StoryboardPages::Base *>
    body: |
      //AllegroFlare::StoryboardPageFactory page_factory;
      //page_factory.set_font_bin(font_bin);
      //page_factory.set_bitmap_bin(bitmap_bin);
      //page_factory.set_model_bin(model_bin);
      //page_factory.create_clubcatt_logo_page(),
      //page_factory.create_image_page(bitmap_bin->operator[]("clubcatt-website-01.jpg")),
      return {};


  - name: create_intro_storyboard_pages
    virtual: true
    override: true
    type: std::vector<AllegroFlare::Elements::StoryboardPages::Base *>
    body: |
      //AllegroFlare::Logger::throw_error(
         //"AllegroFlare::GameConfigurations::Base::create_intro_storyboard_pages",
         //"Not implemented in the base class. This method must be implemented in the derived class"
      //);
      //AllegroFlare::StoryboardPageFactory page_factory;
      //page_factory.set_font_bin(font_bin);
      //page_factory.set_bitmap_bin(bitmap_bin);
      //page_factory.set_model_bin(model_bin);

      //std::vector<AllegroFlare::Elements::StoryboardPages::Base *> result =
      //{
         //page_factory.create_image_with_advancing_text_page(
            //"storyboard-1-01-1165x500.png",
            //"Once upon a time, in a magical kingdom ruled by a wise and just queen, a young hero sets out on a "
               //"journey to prove himself and save his people from a terrible curse."
         //),
         //page_factory.create_image_with_advancing_text_page(
            //"storyboard-2-01-1165x500.png",
            //"With the help of his trusty sidekick and a band of unlikely allies, he must navigate treacherous "
               //"terrain and battle fierce foes."
         //),
         //page_factory.create_advancing_text_page(
           //"And achieve his goal to save the kingdom."
         //),
      //};
      return {};


  - name: build_title_screen_menu_options
    virtual: true
    override: true
    type: std::vector<std::pair<std::string, std::string>>
    body: |
      //AllegroFlare::Logger::throw_error(
         //"AllegroFlare::GameConfigurations::Base::build_title_screen_menu_options",
            //"Not implemented in the base class. This method must be implemented in the derived class"
      //);
      std::vector<std::pair<std::string, std::string>> options = {
         //{ "Continue",          "continue_from_last_save" },       // TODO: If game session is saved and valid
         //{ "Load a Saved Game", "goto_load_a_saved_game_screen" }, // TODO: If game session is saved and valid,
                                                                   // and the game supports save slots
         { "Start New Game",    "start_new_game" },                // TODO: If the game session has not begun
         //{ "Achievements",      "goto_achievements_screen" },
         //{ "Settings",          "goto_settings_screen" },
         //{ "Version",           "goto_version_screen" },
         //{ "Credits",           "goto_credits_screen" },           // TODO: If game has been won
         { "Quit",              "quit" },
      };
      return options;


  - name: load_audio_controller
    virtual: true
    override: true
    body: |
      //AllegroFlare::AudioController &audio_controller = framework->get_audio_controller_ref();
      //audio_controller.set_and_load_sound_effect_elements({
         //// { "menu_move", { "menu_move_tink-02.ogg", false, "restart" } }, // TODO: Throw on an unknown replay type
      //});
      //audio_controller.set_and_load_music_track_elements({
         //// An example of how to load a music track:
         ////{ "intro_music", { "wanderer-01.ogg", true, "ignore" } },
      //});
      //// An example of how to play a music track:
      //// event_emitter->emit_play_music_track_event("intro_music");
      return;


  - name: load_last_played_session_or_start_new
    virtual: true
    override: true
    parameters:
      - name: game_session
        type: AllegroFlare::GameSession*
        default_argument: nullptr
    guards: [ game_session ]
    body: |
      // TODO: This method
      //AllegroFlare::GameProgressAndStateInfos::Base *game_progress_and_state_info =
        //game_session->get_game_progress_and_state_info();
      return;
    body_dependency_symbols:
      - AllegroFlare::GameProgressAndStateInfos::Base


  - name: setup_new_game_progress_and_state_info
    virtual: true
    override: true
    parameters:
      - name: game_session
        type: AllegroFlare::GameSession*
        default_argument: nullptr
    guards: [ game_session ]
    body: |
      // TODO: This method
      //AllegroFlare::Logger::throw_error(
         //"AllegroFlare::GameConfigurations::Base::setup_new_game_progress_and_state_info",
         //"Not implemented in the base class. This method must be implemented in the derived class"
      //);
      //AllegroFlare::GameProgressAndStateInfos::Base *game_progress_and_state_info =
        //game_session->get_game_progress_and_state_info();
      return;
    body_dependency_symbols:
      - AllegroFlare::GameProgressAndStateInfos::Base


  - name: build_save_slots_for_load_a_saved_game_screen
    virtual: true
    override: true
    type: std::vector<AllegroFlare::LoadASavedGame::SaveSlots::Base*>
    body: |
      /*
      std::vector<AllegroFlare::LoadASavedGame::SaveSlots::Base*> result = {
         new AllegroFlare::LoadASavedGame::SaveSlots::Empty(), // TODO: Fill this list with items from save file
         new AllegroFlare::LoadASavedGame::SaveSlots::Empty(),
         new AllegroFlare::LoadASavedGame::SaveSlots::Empty(),
      };
      return result;
      */
      return {};


  - name: continue_from_last_save
    virtual: true
    override: true
    body: |
      // TODO: This method
      return;


  - name: build_level_list_for_level_select_screen_by_identifier
    virtual: true
    override: true
    type: std::vector<std::pair<std::string, std::string>>
    parameters:
      - name: identifier
        type: std::string
        default_argument: '"[unset-identifier]"'
    body: |
      std::vector<std::pair<std::string, std::string>> result = {
         //{ "Forest Village 1", "forest_village_1" },
         //{ "Forest Village 2", "forest_village_2" },
         //{ "Forest", "forest_1" },
         //{ "Crystal Cave", "crystal_cave_1" },
         //{ "Desert Town", "desert_town_3" },
         //{ "Town 2", "town_2" },
         //{ "Cave 1", "cave_1" },
         //{ "Town 1", "town_1" },
      };
      return result;


  - name: build_dialog_bank_by_identifier
    virtual: true
    override: true
    type: AllegroFlare::DialogTree::NodeBank
    parameters:
      - name: identifier
        type: std::string
        default_argument: '"[identifier-discarded]"'
    body: |
      // TODO: Test this contains the expected nodes
      AllegroFlare::DialogTree::NodeBank result_node_bank;

      // TODO: Consider joining the system nodes outside of the LevelFactory
      AllegroFlare::DialogTree::NodeBank system_node_bank =
         AllegroFlare::DialogTree::NodeBankFactory::build_common_system_dialogs_node_bank();
      result_node_bank.merge(&system_node_bank);

      return result_node_bank;
    body_dependency_symbols:
      - AllegroFlare::DialogTree::NodeBankFactory


  - name: load_level_by_identifier
    virtual: true
    override: true
    type: AllegroFlare::Levels::Base*
    parameters:
      - name: identifier
        type: std::string
        default_argument: '"[unset-identifier]"'
    body: |
      // TODO: Replace void* with a better type (once the design is clear)
      [[COMPONENT_NAME_FIRST_FRAGMENT]]::Gameplay::Level *result = new [[COMPONENT_NAME_FIRST_FRAGMENT]]::Gameplay::Level();

      std::map<std::string, std::function<void()>> items_map = {
         { "forest_village_1", [result](){
            //result->set_background_image_identifier("maps/forest-village-1.png");
         }},
         //{ "forest_village_2", [result](){
            //result->set_background_image_identifier("maps/forest-village-2.png");
         //}},
         //{ "forest_1", [result](){
            //result->set_background_image_identifier("maps/forest-1.png");
         //}},
         //{ "crystal_cave_1", [result](){
            //result->set_background_image_identifier("maps/crystal-cave-1.png");
         //}},
         //{ "desert_town_3", [result](){
            //result->set_background_image_identifier("maps/desert-town-3.png");
         //}},
         //{ "town_2", [result](){
            //result->set_background_image_identifier("maps/town-2.png");
         //}},
         //{ "cave_1", [result](){
            //result->set_background_image_identifier("maps/rpg-fit-backgrounds-ex-101.png");
         //}},
         //{ "town_1", [result](){
            //result->set_background_image_identifier("maps/rpg-fit-backgrounds-x2-01.png");
         //}},
      };

      // locate and call the function to handle the item
      if (items_map.count(identifier) == 0)
      {
         bool item_handled = false;
         //if (unrecognized_key_callback_func)
         //{
            //item_handled = unrecognized_key_callback_func();
         //}

         if (!item_handled)
         {
            // item not found
            std::stringstream error_message;
            error_message << "[[[COMPONENT_CLASS_NAME]]::load_level]: error: Cannot load the item with the identifier \""
                          << identifier << "\", it does not exist.";
            throw std::runtime_error(error_message.str());
         }
      }
      else
      {
         // call the item
         items_map[identifier]();
      }

      return result;
    body_dependency_symbols:
     - [[COMPONENT_NAME_FIRST_FRAGMENT]]::Gameplay::Level
     - std::function
     - std::stringstream
     - std::map


dependencies:


  - symbol: AllegroFlare::GameConfigurations::Complete
    headers: [ AllegroFlare/GameConfigurations/Complete.hpp ]
  - symbol: AllegroFlare::Levels::Base
    headers: [ AllegroFlare/Levels/Base.hpp ]
  - symbol: AllegroFlare::DialogTree::NodeBank
    headers: [ AllegroFlare/DialogTree/NodeBank.hpp ]
  - symbol: AllegroFlare::DialogTree::NodeBankFactory
    headers: [ AllegroFlare/DialogTree/NodeBankFactory.hpp ]
  - symbol: AllegroFlare::DialogTree::Nodes::Wait
    headers: [ AllegroFlare/DialogTree/Nodes/Wait.hpp ]
  - symbol: AllegroFlare::DialogTree::Nodes::ExitProgram
    headers: [ AllegroFlare/DialogTree/Nodes/ExitProgram.hpp ]
  - symbol: AllegroFlare::DialogTree::Nodes::MultipageWithOptions
    headers: [ AllegroFlare/DialogTree/Nodes/MultipageWithOptions.hpp ]
  - symbol: AllegroFlare::DialogTree::NodeOptions::GoToNode
    headers: [ AllegroFlare/DialogTree/NodeOptions/GoToNode.hpp ]
  - symbol: AllegroFlare::DialogTree::NodeOptions::ExitDialog
    headers: [ AllegroFlare/DialogTree/NodeOptions/ExitDialog.hpp ]
  - symbol: [[COMPONENT_NAME_FIRST_FRAGMENT]]::Gameplay::Level
    headers: [ [[COMPONENT_NAME_FIRST_FRAGMENT]]/Gameplay/Level.hpp ]
  - symbol: AllegroFlare::Achievement
    headers: [ AllegroFlare/Achievement.hpp ]
  - symbol: AllegroFlare::Elements::StoryboardPages::Base
    headers: [ AllegroFlare/Elements/StoryboardPages/Base.hpp ]
  - symbol: AllegroFlare::GameSession
    headers: [ AllegroFlare/GameSession.hpp ]
  - symbol: AllegroFlare::GameProgressAndStateInfos::Base
    headers: [ AllegroFlare/GameProgressAndStateInfos/Base.hpp ]
  - symbol: AllegroFlare::LoadASavedGame::SaveSlots::Base
    headers: [ AllegroFlare/LoadASavedGame/SaveSlots/Base.hpp ]
  - symbol: [[COMPONENT_NAME_FIRST_FRAGMENT]]::Gameplay::Screen
    headers: [ [[COMPONENT_NAME_FIRST_FRAGMENT]]/Gameplay/Screen.hpp ]
  - symbol: AllegroFlare::Screens::Gameplay
    headers: [ AllegroFlare/Screens/Gameplay.hpp ]
  - symbol: AllegroFlare::Runners::Complete
    headers: [ AllegroFlare/Runners/Complete.hpp ]

