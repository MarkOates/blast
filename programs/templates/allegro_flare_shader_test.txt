
#include <gtest/gtest.h>

#include <[[COMPONENT_HEADER_INCLUDE_FILE_PATH]]>


TEST([[COMPONENT_TEST_DESCRIPTION_NAME]], can_be_created_without_blowing_up)
{
   [[COMPONENT_CLASS_NAME]] [[COMPONENT_BASENAME_SNAKE_CASE]];
}


TEST([[COMPONENT_TEST_DESCRIPTION_NAME]], TYPE__has_the_expected_value)
{
   [[COMPONENT_CLASS_NAME]] [[COMPONENT_BASENAME_SNAKE_CASE]];
   EXPECT_EQ("[[COMPONENT_NAME_UP_TO_LAST_FRAGMENT]]/[[COMPONENT_NAME_LAST_FRAGMENT]]", [[COMPONENT_BASENAME_SNAKE_CASE]].get_type());
}


TEST([[COMPONENT_TEST_DESCRIPTION_NAME]], type__has_the_expected_value_matching_TYPE)
{
   [[COMPONENT_CLASS_NAME]] [[COMPONENT_BASENAME_SNAKE_CASE]];
   EXPECT_EQ([[COMPONENT_CLASS_NAME]]::TYPE, [[COMPONENT_BASENAME_SNAKE_CASE]].get_type());
}


/* // TODO: add in this test environment
TEST_F(AllegroFlare_Shaders_CubeMapWithAllegroRenderingFixtureTest, VISUAL__will_appear_as_expected)
{
   AllegroFlare::Shaders::CubeMap shader;
   AllegroFlare::Camera3D camera;
   AllegroFlare::ModelBin model_bin;
   AllegroFlare::Model3D *model;

   model_bin.set_path(get_fixtures_path() + "models");
   model = model_bin["rounded_unit_cube-01.obj"];

   // TODO: setup object

   shader.initialize();
   shader.activate();

   int passes = 60;
   for (int i=0; i<passes; i++)
   {
      camera.setup_projection_on(get_display_backbuffer());
      clear();

      model->draw();

      // TODO: render object
      al_flip_display();
   }

   shader.deactivate();
}
*/


