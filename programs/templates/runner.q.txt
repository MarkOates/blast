parent_classes:


  - class: AllegroFlare::Screens::Base
    scope: public
    init_with: '"Runner"'


properties:


  - name: mode
    type: std::string
    init_with: MODE_PRODUCTION
    constructor_arg: true

  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr
    constructor_arg: true

  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true

  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true

  - name: sample_bin
    type: AllegroFlare::SampleBin*
    init_with: nullptr
    constructor_arg: true

  - name: model_bin
    type: AllegroFlare::ModelBin*
    init_with: nullptr
    constructor_arg: true

  - name: initialized
    type: bool
    init_with: false

  - name: MODE_TEST
    type: char*
    init_with: '"test"'
    static: true
    constexpr: true

  - name: MODE_PRODUCTION
    type: char*
    init_with: '"production"'
    static: true
    constexpr: true

  - name: MODE_DEVELOPMENT
    type: char*
    init_with: '"development"'
    static: true
    constexpr: true


functions:


  - name: initialize
    guards: [ (!initialized) ]
    body: |
      return;


  - name: RUN
    parameters:
      - name: mode
        type: std::string
        default_argument: '"production"'
      - name: disable_escape_key_will_shutdown
        type: bool
        default_argument: false
    static: true
    guards: [ is_valid_mode(mode) ]
    body: |
      // setup the framework
      AllegroFlare::Frameworks::Full framework;
      if (disable_escape_key_will_shutdown) framework.disable_escape_key_will_shutdown();
      framework.initialize();

      // setup the environment/asset folders
      if (is_test_mode(mode) || is_development_mode(mode))
      {
         std::string PROJECT_DATA_FOLDER = "/Users/markoates/Repos/CatDetective/bin/programs/data";
         framework.get_font_bin_ref().set_full_path(PROJECT_DATA_FOLDER + "/fonts");
         framework.get_bitmap_bin_ref().set_full_path(PROJECT_DATA_FOLDER + "/bitmaps");
         framework.get_sample_bin_ref().set_full_path(PROJECT_DATA_FOLDER + "/samples");
         framework.get_model_bin_ref().set_full_path(PROJECT_DATA_FOLDER + "/models");
      }

      // instantiate our actual game runner
      Runner runner(
         mode,
         &framework.get_event_emitter_ref(),
         &framework.get_bitmap_bin_ref(),
         &framework.get_font_bin_ref(),
         &framework.get_sample_bin_ref(),
         &framework.get_model_bin_ref()
      );
      runner.initialize();
      framework.register_screen("runner", &runner);

      framework.run_loop();
      return;
    body_dependency_symbols:
      - AllegroFlare::Frameworks::Full


  - name: is_test_mode
    type: bool
    static: true
    parameters:
      - name: mode
        type: std::string
        default_argument: '"[unset-mode]"'
    body: |
      return mode == MODE_TEST;


  - name: is_development_mode
    type: bool
    static: true
    parameters:
      - name: mode
        type: std::string
        default_argument: '"[unset-mode]"'
    body: |
      return mode == MODE_DEVELOPMENT;


  - name: is_production_mode
    type: bool
    static: true
    parameters:
      - name: mode
        type: std::string
        default_argument: '"[unset-mode]"'
    body: |
      return mode == MODE_PRODUCTION;


  - name: in_development_mode
    type: bool
    body: |
      return mode == MODE_DEVELOPMENT;


  - name: in_production_mode
    type: bool
    body: |
      return mode == MODE_PRODUCTION;


  - name: in_test_mode
    type: bool
    body: |
      return mode == MODE_TEST;


  - name: is_valid_mode
    static: true
    type: bool
    parameters:
      - name: mode
        type: std::string
        default_argument: '"[unset-mode]"'
    body: |
      static const std::set<std::string> VALID_MODES = {
         MODE_PRODUCTION,
         MODE_DEVELOPMENT,
         MODE_TEST,
      };
      return (VALID_MODES.count(mode) > 0);
    body_dependency_symbols:
      - std::set


dependencies:


  - symbol: AllegroFlare::Screens::Base
    headers: [ AllegroFlare/Screens/Base.hpp ]
  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::Frameworks::Full
    headers: [ AllegroFlare/Frameworks/Full.hpp ]
  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::ModelBin
    headers: [ AllegroFlare/ModelBin.hpp ]
  - symbol: AllegroFlare::SampleBin
    headers: [ AllegroFlare/SampleBin.hpp ]


