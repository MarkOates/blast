parent_classes:


  - class: AllegroFlare::Screens::Base
    scope: public
    init_with: [[COMPONENT_CLASS_NAME]]::TYPE


properties:


  - name: framework
    type: AllegroFlare::Frameworks::Full*
    init_with: nullptr
    constructor_arg: true

  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr
    constructor_arg: true

  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true

  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true

  - name: model_bin
    type: AllegroFlare::ModelBin*
    init_with: nullptr
    constructor_arg: true

  - name: primary_gameplay_screen
    type: [[COMPONENT_CLASS_NAME_UP_TO_LAST_FRAGMENT]]::Gameplay::Screen
    init_with: ''

  - name: initialized
    type: bool
    init_with: false

  - name: EVENT_ACTIVATE_PRIMARY_GAMEPLAY_SCREEN
    type: char*
    init_with: '(char*)"activate_primary_gameplay_screen"'
    static: true
    constexpr: true

  - name: TYPE
    type: char*
    init_with: '(char*)"[[COMPONENT_NAME_UP_TO_LAST_FRAGMENT]]/[[COMPONENT_NAME_LAST_FRAGMENT]]"'
    static: true
    constexpr: true


functions:


  - name: initialize
    guards:
      - (!initialized)
      - framework
      - event_emitter
      - bitmap_bin
      - font_bin
      - model_bin
    body: |
      // TODO: consider adding achievements, title_screen, opening_credits, etc to this runner

      // Setup our main gameplay screen
      primary_gameplay_screen.set_event_emitter(event_emitter);
      primary_gameplay_screen.set_bitmap_bin(bitmap_bin);
      primary_gameplay_screen.set_font_bin(font_bin);
      primary_gameplay_screen.set_model_bin(model_bin);
      primary_gameplay_screen.initialize();
      framework->register_screen("primary_gameplay_screen", &primary_gameplay_screen);

      return;


  - name: event_map
    type: std::map<std::string, std::function<void()>>
    body: |
      return {};


  - name: game_event_func
    virtual: true
    override: true
    parameters:
      - name: ev
        type: AllegroFlare::GameEvent*
        default_argument: nullptr
    guards: [ ev, event_emitter ]
    body: |
      std::string event_name = ev->get_type();
      std::cout << "EVENT_EMITTED: \"" << event_name << "\"" << std::endl;

      std::map<std::string, std::function<void()>> event_map = {
         { "initialize", [this](){
            // TODO: branch out conditional for production
            event_emitter->emit_game_event(AllegroFlare::GameEvent(EVENT_ACTIVATE_PRIMARY_GAMEPLAY_SCREEN));
         }},
         { EVENT_ACTIVATE_PRIMARY_GAMEPLAY_SCREEN, [this](){
            framework->activate_screen("primary_gameplay_screen");
         }},
         //{ EVENT_PAUSE_GAME, [this](){
            //push_screen();
            //framework->activate_screen("pause_screen");
         //}},
         //{ EVENT_UNPAUSE_GAME, [this](){
            //std::string previous_screen = pop_screen();
            //framework->activate_screen("pause_screen");
         //}},
      };

      // locate and call the function to handle the event
      if (event_map.count(event_name) == 0)
      {
         // event not found
         std::cout << "ERROR: event not found: \"" << event_name << "\"" << std::endl;
      }
      else
      {
         // call the event
         event_map[event_name]();
      }

      return;


  - name: run
    parameters:
      - name: deployment_environment_mode
        type: std::string
        default_argument: '"[unset-deployment_environment_mode]"'
    static: true
    body: |
      // setup the framework
      AllegroFlare::Frameworks::Full framework;
      framework.set_deployment_environment(deployment_environment_mode);
      //if (disable_escape_key_will_shutdown) framework.disable_escape_key_will_shutdown();
      framework.initialize();

      // instantiate our actual game runner
      Runner runner(
         &framework,
         &framework.get_event_emitter_ref(),
         &framework.get_bitmap_bin_ref(),
         &framework.get_font_bin_ref(),
         &framework.get_model_bin_ref()
      );
      runner.initialize();
      framework.register_screen("runner", &runner);

      framework.run_loop();
      return;
    body_dependency_symbols:
      - AllegroFlare::Frameworks::Full


dependencies:


  - symbol: AllegroFlare::Screens::Base
    headers: [ AllegroFlare/Screens/Base.hpp ]
  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::Frameworks::Full
    headers: [ AllegroFlare/Frameworks/Full.hpp ]
  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::ModelBin
    headers: [ AllegroFlare/ModelBin.hpp ]
  - symbol: AllegroFlare::GameEvent
    headers: [ AllegroFlare/GameEvent.hpp ]
  - symbol: CubeShooter::Screen
    headers: [ CubeShooter/Screen.hpp ]
  - symbol: [[COMPONENT_CLASS_NAME_UP_TO_LAST_FRAGMENT]]::Gameplay::Screen
    headers: [ [[COMPONENT_CLASS_NAME_UP_TO_LAST_FRAGMENT]]/Gameplay/Screen.hpp ]


