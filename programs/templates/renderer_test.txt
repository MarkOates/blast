#include <gtest/gtest.h>

#define EXPECT_THROW_WITH_MESSAGE(code, raised_exception_type, expected_exception_message) \
   try { code; FAIL() << "Expected " # raised_exception_type; } \
   catch ( raised_exception_type const &err ) { EXPECT_EQ(std::string(expected_exception_message), err.what()); } \
   catch (...) { FAIL() << "Expected " # raised_exception_type; }

#include <AllegroFlare/Testing/WithAllegroRenderingFixture.hpp>


class [[COMPONENT_TEST_DESCRIPTION_NAME]] : public ::testing::Test {};
class [[COMPONENT_TEST_DESCRIPTION_NAME]]WithAllegroRenderingFixture
   : public AllegroFlare::Testing::WithAllegroRenderingFixture
{};


#include <[[COMPONENT_HEADER_INCLUDE_FILE_PATH]]>


TEST_F([[COMPONENT_TEST_DESCRIPTION_NAME]], can_be_created_without_blowing_up)
{
   [[COMPONENT_CLASS_NAME]] [[COMPONENT_BASENAME_SNAKE_CASE]];
}


TEST_F([[COMPONENT_TEST_DESCRIPTION_NAME]], render__without_allegro_initialized__raises_an_error)
{
   [[COMPONENT_CLASS_NAME]] [[COMPONENT_BASENAME_SNAKE_CASE]];
   std::string expected_error_message =
      "[[COMPONENT_NAME_LAST_FRAGMENT]]::render: error: guard \"al_is_system_installed()\" not met";
   EXPECT_THROW_WITH_MESSAGE([[COMPONENT_BASENAME_SNAKE_CASE]].render(), std::runtime_error, expected_error_message);
}


TEST_F([[COMPONENT_TEST_DESCRIPTION_NAME]]WithAllegroRenderingFixture, render__will_not_blow_up)
{
   [[COMPONENT_CLASS_NAME]] [[COMPONENT_BASENAME_SNAKE_CASE]];
   [[COMPONENT_BASENAME_SNAKE_CASE]].render();
}


